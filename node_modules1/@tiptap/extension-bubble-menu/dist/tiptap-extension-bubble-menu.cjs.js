'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var core = require('@tiptap/core');
var prosemirrorState = require('prosemirror-state');
var tippy = require('tippy.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var tippy__default = /*#__PURE__*/_interopDefaultLegacy(tippy);

class BubbleMenuView {
    constructor({ editor, element, view, tippyOptions, }) {
        this.preventHide = false;
        this.mousedownHandler = () => {
            this.preventHide = true;
        };
        this.focusHandler = () => {
            // we use `setTimeout` to make sure `selection` is already updated
            setTimeout(() => this.update(this.editor.view));
        };
        this.blurHandler = ({ event }) => {
            var _a;
            if (this.preventHide) {
                this.preventHide = false;
                return;
            }
            if ((event === null || event === void 0 ? void 0 : event.relatedTarget)
                && ((_a = this.element.parentNode) === null || _a === void 0 ? void 0 : _a.contains(event.relatedTarget))) {
                return;
            }
            this.hide();
        };
        this.editor = editor;
        this.element = element;
        this.view = view;
        this.element.addEventListener('mousedown', this.mousedownHandler, { capture: true });
        this.editor.on('focus', this.focusHandler);
        this.editor.on('blur', this.blurHandler);
        this.createTooltip(tippyOptions);
        this.element.style.visibility = 'visible';
    }
    createTooltip(options = {}) {
        this.tippy = tippy__default['default'](this.view.dom, {
            duration: 0,
            getReferenceClientRect: null,
            content: this.element,
            interactive: true,
            trigger: 'manual',
            placement: 'top',
            hideOnClick: 'toggle',
            ...options,
        });
    }
    update(view, oldState) {
        const { state, composing } = view;
        const { doc, selection } = state;
        const isSame = oldState && oldState.doc.eq(doc) && oldState.selection.eq(selection);
        if (composing || isSame) {
            return;
        }
        const { empty, $anchor, ranges } = selection;
        // support for CellSelections
        const from = Math.min(...ranges.map(range => range.$from.pos));
        const to = Math.max(...ranges.map(range => range.$to.pos));
        // Sometime check for `empty` is not enough.
        // Doubleclick an empty paragraph returns a node size of 2.
        // So we check also for an empty text size.
        if (empty || !$anchor.parent.textContent) {
            this.hide();
            return;
        }
        this.tippy.setProps({
            getReferenceClientRect: () => {
                if (core.isNodeSelection(view.state.selection)) {
                    const node = view.nodeDOM(from);
                    if (node) {
                        return node.getBoundingClientRect();
                    }
                }
                return core.posToDOMRect(view, from, to);
            },
        });
        this.show();
    }
    show() {
        this.tippy.show();
    }
    hide() {
        this.tippy.hide();
    }
    destroy() {
        this.tippy.destroy();
        this.element.removeEventListener('mousedown', this.mousedownHandler);
        this.editor.off('focus', this.focusHandler);
        this.editor.off('blur', this.blurHandler);
    }
}
const BubbleMenuPluginKey = new prosemirrorState.PluginKey('menuBubble');
const BubbleMenuPlugin = (options) => {
    return new prosemirrorState.Plugin({
        key: BubbleMenuPluginKey,
        view: view => new BubbleMenuView({ view, ...options }),
    });
};

const BubbleMenu = core.Extension.create({
    name: 'bubbleMenu',
    defaultOptions: {
        element: null,
        tippyOptions: {},
    },
    addProseMirrorPlugins() {
        if (!this.options.element) {
            return [];
        }
        return [
            BubbleMenuPlugin({
                editor: this.editor,
                element: this.options.element,
                tippyOptions: this.options.tippyOptions,
            }),
        ];
    },
});

exports.BubbleMenu = BubbleMenu;
exports.BubbleMenuPlugin = BubbleMenuPlugin;
exports.BubbleMenuPluginKey = BubbleMenuPluginKey;
exports.BubbleMenuView = BubbleMenuView;
exports.default = BubbleMenu;
//# sourceMappingURL=tiptap-extension-bubble-menu.cjs.js.map
