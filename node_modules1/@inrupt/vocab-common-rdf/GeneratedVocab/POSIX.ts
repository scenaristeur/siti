/**
 * MIT License
 * 
 * Copyright 2020 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the &quot;Software&quot;), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

/**
 * Generated by the artifact generator [@inrupt/lit-artifact-generator], version [0.13.4]
 * as part of artifact: [vocab-common-rdf], version: [0.7.4]
 * on 'Monday, April 5, 2021 9:51 PM'.
 *
 * Vocabulary built from vocab list file: [common-rdf/Common/Vocab-List-Common-Rdf.yml].
 *
 * A vocabulary for the basic POSIX terms.
 */

import { DataFactory } from 'rdf-data-factory';
import * as RdfTypes from 'rdf-js';

const rdfFactory: RdfTypes.DataFactory = new DataFactory();

function _NS(localName: string): RdfTypes.NamedNode {
  return rdfFactory.namedNode(`http://www.w3.org/ns/posix/stat#${localName}`);
}

// Add 'any' type annotation in case this vocab includes 'NamedNode' instances,
// for example instances of Constant IRIs (TypeScript compiler will complain of
// "semantic error TS2742" otherwise).
/**
 * A vocabulary for the basic POSIX terms.
 */
const POSIX: any = {
  PREFIX: "posix",
  NAMESPACE: "http://www.w3.org/ns/posix/stat#",
  PREFIX_AND_NAMESPACE: { "posix": "http://www.w3.org/ns/posix/stat#" },
  NS: _NS,

  // *******************
  // All the Properties.
  // *******************

  /**
   * Time of last access
   */
  atime: _NS("atime"),

  /**
   * Blocksize for file system I/O
   */
  blksize: _NS("blksize"),

  /**
   * Number of 512B blocks allocated
   */
  blocks: _NS("blocks"),

  /**
   * Time of last status change
   */
  ctime: _NS("ctime"),

  /**
   * ID of device containing file
   */
  dev: _NS("dev"),

  /**
   * Group ID of owner
   */
  gid: _NS("gid"),

  /**
   * inode number
   */
  ino: _NS("ino"),

  /**
   * Protection
   */
  mode: _NS("mode"),

  /**
   * Time of last modification
   */
  mtime: _NS("mtime"),

  /**
   * Number of hard links
   */
  nlink: _NS("nlink"),

  /**
   * Device ID (if special file)
   */
  rdev: _NS("rdev"),

  /**
   * Total size, in bytes
   */
  size: _NS("size"),

  /**
   * User ID of owner
   */
  uid: _NS("uid"),
 }

export default POSIX;
