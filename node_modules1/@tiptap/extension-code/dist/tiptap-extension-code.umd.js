(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@tiptap/core')) :
  typeof define === 'function' && define.amd ? define(['exports', '@tiptap/core'], factory) :
  (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global['@tiptap/extension-code'] = {}, global.core));
}(this, (function (exports, core) { 'use strict';

  const inputRegex = /(?:^|\s)((?:`)((?:[^`]+))(?:`))$/gm;
  const pasteRegex = /(?:^|\s)((?:`)((?:[^`]+))(?:`))/gm;
  const Code = core.Mark.create({
      name: 'code',
      defaultOptions: {
          HTMLAttributes: {},
      },
      excludes: '_',
      parseHTML() {
          return [
              { tag: 'code' },
          ];
      },
      renderHTML({ HTMLAttributes }) {
          return ['code', core.mergeAttributes(this.options.HTMLAttributes, HTMLAttributes), 0];
      },
      addCommands() {
          return {
              setCode: () => ({ commands }) => {
                  return commands.setMark('code');
              },
              toggleCode: () => ({ commands }) => {
                  return commands.toggleMark('code');
              },
              unsetCode: () => ({ commands }) => {
                  return commands.unsetMark('code');
              },
          };
      },
      addKeyboardShortcuts() {
          return {
              'Mod-e': () => this.editor.commands.toggleCode(),
          };
      },
      addInputRules() {
          return [
              core.markInputRule(inputRegex, this.type),
          ];
      },
      addPasteRules() {
          return [
              core.markPasteRule(inputRegex, this.type),
          ];
      },
  });

  exports.Code = Code;
  exports.default = Code;
  exports.inputRegex = inputRegex;
  exports.pasteRegex = pasteRegex;

  Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=tiptap-extension-code.umd.js.map
