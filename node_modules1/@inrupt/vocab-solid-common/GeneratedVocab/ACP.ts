/**
 * MIT License
 * 
 * Copyright 2020 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the &quot;Software&quot;), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

/**
  Generated by the artifact generator [@inrupt/lit-artifact-generator], version [0.13.4]
  as part of artifact: [vocab-solid-common], version: [0.7.4]
  on 'Monday, April 5, 2021 9:51 PM'.

  Vocabulary built from vocab list file: [solid-rdf/Common/Vocab-List-Solid-Common.yml].

  A vocabulary to structure policy-based access controls for the Solid ecosystem.
 */

import { VocabTerm, getLocalStore } from "@inrupt/solid-common-vocab";

import { DataFactory } from 'rdf-data-factory';
import * as RDF from 'rdf-js';

const rdfFactory: RDF.DataFactory = new DataFactory();

function _NS(localName: string): RDF.NamedNode {
  return rdfFactory.namedNode(`http://www.w3.org/ns/solid/acp#${localName}`);
}

// Add 'any' type annotation in case this vocab includes 'NamedNode' instances,
// for example instances of Constant IRIs (TypeScript compiler will complain of
// "semantic error TS2742" otherwise).
/**
 * A vocabulary to structure policy-based access controls for the Solid ecosystem.
 */
const ACP: any = {
  PREFIX: "acp",
  NAMESPACE: "http://www.w3.org/ns/solid/acp#",
  PREFIX_AND_NAMESPACE: { "acp": "http://www.w3.org/ns/solid/acp#" },
  NS: _NS,

  // *****************
  // All the Classes.
  // *****************

  /**
   * Access Control statements associate an AccessControlResource with specific Policy definitions.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/solid/acp#
   */
  AccessControl: new VocabTerm(
    _NS("AccessControl"),
    rdfFactory,
    getLocalStore(),
    false
  )
    .addIsDefinedBy(_NS("http://www.w3.org/ns/solid/acp#"))
    .addLabel(`Access Control`, "en")
    .addComment(`Access Control statements associate an AccessControlResource with specific Policy definitions.`, "en"),

  /**
   * An RDF resource that includes AccessControl statements
   *
   * Defined by the vocabulary: http://www.w3.org/ns/solid/acp#
   */
  AccessControlResource: new VocabTerm(
    _NS("AccessControlResource"),
    rdfFactory,
    getLocalStore(),
    false
  )
    .addIsDefinedBy(_NS("http://www.w3.org/ns/solid/acp#"))
    .addLabel(`Access Control Resource`, "en")
    .addComment(`An RDF resource that includes AccessControl statements`, "en"),

  /**
   * A Policy defines a collection of access modes along with the conditions under which the policy is applied.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/solid/acp#
   */
  Policy: new VocabTerm(
    _NS("Policy"),
    rdfFactory,
    getLocalStore(),
    false
  )
    .addIsDefinedBy(_NS("http://www.w3.org/ns/solid/acp#"))
    .addLabel(`Access Policy`, "en")
    .addComment(`A Policy defines a collection of access modes along with the conditions under which the policy is applied.`, "en"),

  /**
   * A Rule defines which agent(s), group(s) and client application(s) match a Policy filter
   *
   * Defined by the vocabulary: http://www.w3.org/ns/solid/acp#
   */
  Rule: new VocabTerm(
    _NS("Rule"),
    rdfFactory,
    getLocalStore(),
    false
  )
    .addIsDefinedBy(_NS("http://www.w3.org/ns/solid/acp#"))
    .addLabel(`Rule`, "en")
    .addComment(`A Rule defines which agent(s), group(s) and client application(s) match a Policy filter`, "en"),

  /**
   * An abstract access mode. This class should not be used directly. Instead, please use Read, Write and Append
   *
   * Defined by the vocabulary: http://www.w3.org/ns/solid/acp#
   */
  AccessMode: new VocabTerm(
    _NS("AccessMode"),
    rdfFactory,
    getLocalStore(),
    false
  )
    .addIsDefinedBy(_NS("http://www.w3.org/ns/solid/acp#"))
    .addLabel(`Access Mode`, "en")
    .addComment(`An abstract access mode. This class should not be used directly. Instead, please use Read, Write and Append`, "en"),

  /**
   * An access mode indicating Read access
   *
   * Defined by the vocabulary: http://www.w3.org/ns/solid/acp#
   */
  Read: new VocabTerm(
    _NS("Read"),
    rdfFactory,
    getLocalStore(),
    false
  )
    .addIsDefinedBy(_NS("http://www.w3.org/ns/solid/acp#"))
    .addLabel(`Read`, "en")
    .addComment(`An access mode indicating Read access`, "en"),

  /**
   * An access mode indicating Write access
   *
   * Defined by the vocabulary: http://www.w3.org/ns/solid/acp#
   */
  Write: new VocabTerm(
    _NS("Write"),
    rdfFactory,
    getLocalStore(),
    false
  )
    .addIsDefinedBy(_NS("http://www.w3.org/ns/solid/acp#"))
    .addLabel(`Write`, "en")
    .addComment(`An access mode indicating Write access`, "en"),

  /**
   * An access mode indicating Append access. Append is a more limited form of Write in which data may only be added but not removed.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/solid/acp#
   */
  Append: new VocabTerm(
    _NS("Append"),
    rdfFactory,
    getLocalStore(),
    false
  )
    .addIsDefinedBy(_NS("http://www.w3.org/ns/solid/acp#"))
    .addLabel(`Append`, "en")
    .addComment(`An access mode indicating Append access. Append is a more limited form of Write in which data may only be added but not removed.`, "en"),


  // *******************
  // All the Properties.
  // *******************

  /**
   * The object of this relationship is the access control resource associated with the subject resource.
 This relationship is intended to be used as the rel type of a Link, via HTTP Link Headers rfc5988 for Linked Data resources.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/solid/acp#
   */
  accessControl: new VocabTerm(
    _NS("accessControl"),
    rdfFactory,
    getLocalStore(),
    false
  )
    .addIsDefinedBy(_NS("http://www.w3.org/ns/solid/acp#"))
    .addLabel(`accessControl`, "en")
    .addComment(`The object of this relationship is the access control resource associated with the subject resource.
 This relationship is intended to be used as the rel type of a Link, via HTTP Link Headers rfc5988 for Linked Data resources.`, "en"),

  /**
   * The access property identifies the access policies that apply to the ACR itself.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/solid/acp#
   */
  access: new VocabTerm(
    _NS("access"),
    rdfFactory,
    getLocalStore(),
    false
  )
    .addIsDefinedBy(_NS("http://www.w3.org/ns/solid/acp#"))
    .addLabel(`access`, "en")
    .addComment(`The access property identifies the access policies that apply to the ACR itself.`, "en"),

  /**
   * The accessLocked property identifies the access policies that apply to the ACR itself.
 These policies may not be removed except by an agent with write access to the root ACR.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/solid/acp#
   */
  accessLocked: new VocabTerm(
    _NS("accessLocked"),
    rdfFactory,
    getLocalStore(),
    false
  )
    .addIsDefinedBy(_NS("http://www.w3.org/ns/solid/acp#"))
    .addLabel(`access locked`, "en")
    .addComment(`The accessLocked property identifies the access policies that apply to the ACR itself.
 These policies may not be removed except by an agent with write access to the root ACR.`, "en"),

  /**
   * The accessProtected property identifies the access policies that apply to the ACR itself.
 These policies may not be removed except by an agent with write access to the ACR where the policy was initially applied.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/solid/acp#
   */
  accessProtected: new VocabTerm(
    _NS("accessProtected"),
    rdfFactory,
    getLocalStore(),
    false
  )
    .addIsDefinedBy(_NS("http://www.w3.org/ns/solid/acp#"))
    .addLabel(`access protected`, "en")
    .addComment(`The accessProtected property identifies the access policies that apply to the ACR itself.
 These policies may not be removed except by an agent with write access to the ACR where the policy was initially applied.`, "en"),

  /**
   * The accessMembers property identifies the access policies that apply to the ACR itself, recursively.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/solid/acp#
   */
  accessMembers: new VocabTerm(
    _NS("accessMembers"),
    rdfFactory,
    getLocalStore(),
    false
  )
    .addIsDefinedBy(_NS("http://www.w3.org/ns/solid/acp#"))
    .addLabel(`access members`, "en")
    .addComment(`The accessMembers property identifies the access policies that apply to the ACR itself, recursively.`, "en"),

  /**
   * The accessMembersLocked property identifies the access policies that apply to the ACR itself, recursively.
    These policies may not be removed except by an agent with write access to the root ACR.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/solid/acp#
   */
  accessMembersLocked: new VocabTerm(
    _NS("accessMembersLocked"),
    rdfFactory,
    getLocalStore(),
    false
  )
    .addIsDefinedBy(_NS("http://www.w3.org/ns/solid/acp#"))
    .addLabel(`access members locked`, "en")
    .addComment(`The accessMembersLocked property identifies the access policies that apply to the ACR itself, recursively.
    These policies may not be removed except by an agent with write access to the root ACR.`, "en"),

  /**
   * The accessMembersProtected property identifies the access policies that apply to the ACR itself, recursively.
    These policies may not be removed except by an agent with write access to the ACR where the policy was initially applied.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/solid/acp#
   */
  accessMembersProtected: new VocabTerm(
    _NS("accessMembersProtected"),
    rdfFactory,
    getLocalStore(),
    false
  )
    .addIsDefinedBy(_NS("http://www.w3.org/ns/solid/acp#"))
    .addLabel(`access members protected`, "en")
    .addComment(`The accessMembersProtected property identifies the access policies that apply to the ACR itself, recursively.
    These policies may not be removed except by an agent with write access to the ACR where the policy was initially applied.`, "en"),

  /**
   * The apply property indentifies the access policies to apply to a resource.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/solid/acp#
   */
  apply: new VocabTerm(
    _NS("apply"),
    rdfFactory,
    getLocalStore(),
    false
  )
    .addIsDefinedBy(_NS("http://www.w3.org/ns/solid/acp#"))
    .addLabel(`apply`, "en")
    .addComment(`The apply property indentifies the access policies to apply to a resource.`, "en"),

  /**
   * The applyProtected property identifies the access policies to apply to a resource's members recursively.
    These policies may not be removed except by an agent with write access to the ACR where the policy was initially applied.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/solid/acp#
   */
  applyProtected: new VocabTerm(
    _NS("applyProtected"),
    rdfFactory,
    getLocalStore(),
    false
  )
    .addIsDefinedBy(_NS("http://www.w3.org/ns/solid/acp#"))
    .addLabel(`apply protected`, "en")
    .addComment(`The applyProtected property identifies the access policies to apply to a resource's members recursively.
    These policies may not be removed except by an agent with write access to the ACR where the policy was initially applied.`, "en"),

  /**
   * The applyLocked property identifies the access policies to apply to a resource's members recursively.
 These policies may not be removed except by an agent with write access to the root ACR.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/solid/acp#
   */
  applyLocked: new VocabTerm(
    _NS("applyLocked"),
    rdfFactory,
    getLocalStore(),
    false
  )
    .addIsDefinedBy(_NS("http://www.w3.org/ns/solid/acp#"))
    .addLabel(`apply locked`, "en")
    .addComment(`The applyLocked property identifies the access policies to apply to a resource's members recursively.
 These policies may not be removed except by an agent with write access to the root ACR.`, "en"),

  /**
   * The applyMembers property indentifies the access policies to apply to a resource's members recursively.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/solid/acp#
   */
  applyMembers: new VocabTerm(
    _NS("applyMembers"),
    rdfFactory,
    getLocalStore(),
    false
  )
    .addIsDefinedBy(_NS("http://www.w3.org/ns/solid/acp#"))
    .addLabel(`apply members`, "en")
    .addComment(`The applyMembers property indentifies the access policies to apply to a resource's members recursively.`, "en"),

  /**
   * The applyMembersProtected property identifies the access policies to apply to a resource's members recursively.
 These policies may not be removed except by an agent with write access to the ACR where the policy was initially applied.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/solid/acp#
   */
  applyMembersProtected: new VocabTerm(
    _NS("applyMembersProtected"),
    rdfFactory,
    getLocalStore(),
    false
  )
    .addIsDefinedBy(_NS("http://www.w3.org/ns/solid/acp#"))
    .addLabel(`apply members protected`, "en")
    .addComment(`The applyMembersProtected property identifies the access policies to apply to a resource's members recursively.
 These policies may not be removed except by an agent with write access to the ACR where the policy was initially applied.`, "en"),

  /**
   * The applyMembersLocked property identifies the access policies to apply to a resource's members recurseively.
 These policies may not be removed except by an agent with write access to the root ACR.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/solid/acp#
   */
  applyMembersLocked: new VocabTerm(
    _NS("applyMembersLocked"),
    rdfFactory,
    getLocalStore(),
    false
  )
    .addIsDefinedBy(_NS("http://www.w3.org/ns/solid/acp#"))
    .addLabel(`apply members locked`, "en")
    .addComment(`The applyMembersLocked property identifies the access policies to apply to a resource's members recurseively.
 These policies may not be removed except by an agent with write access to the root ACR.`, "en"),

  /**
   * The allOf property identifies a collection of Rules, each of which must match in order for the Policy to take effect.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/solid/acp#
   */
  allOf: new VocabTerm(
    _NS("allOf"),
    rdfFactory,
    getLocalStore(),
    false
  )
    .addIsDefinedBy(_NS("http://www.w3.org/ns/solid/acp#"))
    .addLabel(`all of`, "en")
    .addComment(`The allOf property identifies a collection of Rules, each of which must match in order for the Policy to take effect.`, "en"),

  /**
   * The anyOf property identifies a collection of Rules, one of which must match in order for the Policy to take effect.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/solid/acp#
   */
  anyOf: new VocabTerm(
    _NS("anyOf"),
    rdfFactory,
    getLocalStore(),
    false
  )
    .addIsDefinedBy(_NS("http://www.w3.org/ns/solid/acp#"))
    .addLabel(`any of`, "en")
    .addComment(`The anyOf property identifies a collection of Rules, one of which must match in order for the Policy to take effect.`, "en"),

  /**
   * The noneOf property identifies a collection of Rules, none of which must match in order for the Policy to take effect.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/solid/acp#
   */
  noneOf: new VocabTerm(
    _NS("noneOf"),
    rdfFactory,
    getLocalStore(),
    false
  )
    .addIsDefinedBy(_NS("http://www.w3.org/ns/solid/acp#"))
    .addLabel(`none of`, "en")
    .addComment(`The noneOf property identifies a collection of Rules, none of which must match in order for the Policy to take effect.`, "en"),

  /**
   * The allow property identifies the access modes a Policy allows.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/solid/acp#
   */
  allow: new VocabTerm(
    _NS("allow"),
    rdfFactory,
    getLocalStore(),
    false
  )
    .addIsDefinedBy(_NS("http://www.w3.org/ns/solid/acp#"))
    .addLabel(`allow`, "en")
    .addComment(`The allow property identifies the access modes a Policy allows.`, "en"),

  /**
   * The deny property identifies the access modes a Policy denies.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/solid/acp#
   */
  deny: new VocabTerm(
    _NS("deny"),
    rdfFactory,
    getLocalStore(),
    false
  )
    .addIsDefinedBy(_NS("http://www.w3.org/ns/solid/acp#"))
    .addLabel(`deny`, "en")
    .addComment(`The deny property identifies the access modes a Policy denies.`, "en"),

  /**
   * The agent property identifies the agent WebID(s) to which a Rule applies.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/solid/acp#
   */
  agent: new VocabTerm(
    _NS("agent"),
    rdfFactory,
    getLocalStore(),
    false
  )
    .addIsDefinedBy(_NS("http://www.w3.org/ns/solid/acp#"))
    .addLabel(`agent`, "en")
    .addComment(`The agent property identifies the agent WebID(s) to which a Rule applies.`, "en"),

  /**
   * The client property identifies the client WebID(s) to which a Rule applies.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/solid/acp#
   */
  client: new VocabTerm(
    _NS("client"),
    rdfFactory,
    getLocalStore(),
    false
  )
    .addIsDefinedBy(_NS("http://www.w3.org/ns/solid/acp#"))
    .addLabel(`client`, "en")
    .addComment(`The client property identifies the client WebID(s) to which a Rule applies.`, "en"),

  /**
   * The group property identifies the vcard group(s) to which a Rule applies.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/solid/acp#
   */
  group: new VocabTerm(
    _NS("group"),
    rdfFactory,
    getLocalStore(),
    false
  )
    .addIsDefinedBy(_NS("http://www.w3.org/ns/solid/acp#"))
    .addLabel(`group`, "en")
    .addComment(`The group property identifies the vcard group(s) to which a Rule applies.`, "en"),
 };

export default ACP;
