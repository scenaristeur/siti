{"version":3,"file":"tiptap-extension-italic.cjs.js","sources":["../src/italic.ts"],"sourcesContent":["import {\n  Command,\n  Mark,\n  markInputRule,\n  markPasteRule,\n  mergeAttributes,\n} from '@tiptap/core'\n\nexport interface ItalicOptions {\n  HTMLAttributes: Record<string, any>,\n}\n\ndeclare module '@tiptap/core' {\n  interface Commands {\n    italic: {\n      /**\n       * Set an italic mark\n       */\n      setItalic: () => Command,\n      /**\n       * Toggle an italic mark\n       */\n      toggleItalic: () => Command,\n      /**\n       * Unset an italic mark\n       */\n      unsetItalic: () => Command,\n    }\n  }\n}\n\nexport const starInputRegex = /(?:^|\\s)((?:\\*)((?:[^*]+))(?:\\*))$/gm\nexport const starPasteRegex = /(?:^|\\s)((?:\\*)((?:[^*]+))(?:\\*))/gm\nexport const underscoreInputRegex = /(?:^|\\s)((?:_)((?:[^_]+))(?:_))$/gm\nexport const underscorePasteRegex = /(?:^|\\s)((?:_)((?:[^_]+))(?:_))/gm\n\nexport const Italic = Mark.create<ItalicOptions>({\n  name: 'italic',\n\n  defaultOptions: {\n    HTMLAttributes: {},\n  },\n\n  parseHTML() {\n    return [\n      {\n        tag: 'em',\n      },\n      {\n        tag: 'i',\n        getAttrs: node => (node as HTMLElement).style.fontStyle !== 'normal' && null,\n      },\n      {\n        style: 'font-style=italic',\n      },\n    ]\n  },\n\n  renderHTML({ HTMLAttributes }) {\n    return ['em', mergeAttributes(this.options.HTMLAttributes, HTMLAttributes), 0]\n  },\n\n  addCommands() {\n    return {\n      setItalic: () => ({ commands }) => {\n        return commands.setMark('italic')\n      },\n      toggleItalic: () => ({ commands }) => {\n        return commands.toggleMark('italic')\n      },\n      unsetItalic: () => ({ commands }) => {\n        return commands.unsetMark('italic')\n      },\n    }\n  },\n\n  addKeyboardShortcuts() {\n    return {\n      'Mod-i': () => this.editor.commands.toggleItalic(),\n    }\n  },\n\n  addInputRules() {\n    return [\n      markInputRule(starInputRegex, this.type),\n      markInputRule(underscoreInputRegex, this.type),\n    ]\n  },\n\n  addPasteRules() {\n    return [\n      markPasteRule(starPasteRegex, this.type),\n      markPasteRule(underscorePasteRegex, this.type),\n    ]\n  },\n})\n"],"names":["Mark","mergeAttributes","markInputRule","markPasteRule"],"mappings":";;;;;;MA+Ba,cAAc,GAAG,uCAAsC;MACvD,cAAc,GAAG,sCAAqC;MACtD,oBAAoB,GAAG,qCAAoC;MAC3D,oBAAoB,GAAG,oCAAmC;MAE1D,MAAM,GAAGA,SAAI,CAAC,MAAM,CAAgB;IAC/C,IAAI,EAAE,QAAQ;IAEd,cAAc,EAAE;QACd,cAAc,EAAE,EAAE;KACnB;IAED,SAAS;QACP,OAAO;YACL;gBACE,GAAG,EAAE,IAAI;aACV;YACD;gBACE,GAAG,EAAE,GAAG;gBACR,QAAQ,EAAE,IAAI,IAAK,IAAoB,CAAC,KAAK,CAAC,SAAS,KAAK,QAAQ,IAAI,IAAI;aAC7E;YACD;gBACE,KAAK,EAAE,mBAAmB;aAC3B;SACF,CAAA;KACF;IAED,UAAU,CAAC,EAAE,cAAc,EAAE;QAC3B,OAAO,CAAC,IAAI,EAAEC,oBAAe,CAAC,IAAI,CAAC,OAAO,CAAC,cAAc,EAAE,cAAc,CAAC,EAAE,CAAC,CAAC,CAAA;KAC/E;IAED,WAAW;QACT,OAAO;YACL,SAAS,EAAE,MAAM,CAAC,EAAE,QAAQ,EAAE;gBAC5B,OAAO,QAAQ,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAA;aAClC;YACD,YAAY,EAAE,MAAM,CAAC,EAAE,QAAQ,EAAE;gBAC/B,OAAO,QAAQ,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAA;aACrC;YACD,WAAW,EAAE,MAAM,CAAC,EAAE,QAAQ,EAAE;gBAC9B,OAAO,QAAQ,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAA;aACpC;SACF,CAAA;KACF;IAED,oBAAoB;QAClB,OAAO;YACL,OAAO,EAAE,MAAM,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,YAAY,EAAE;SACnD,CAAA;KACF;IAED,aAAa;QACX,OAAO;YACLC,kBAAa,CAAC,cAAc,EAAE,IAAI,CAAC,IAAI,CAAC;YACxCA,kBAAa,CAAC,oBAAoB,EAAE,IAAI,CAAC,IAAI,CAAC;SAC/C,CAAA;KACF;IAED,aAAa;QACX,OAAO;YACLC,kBAAa,CAAC,cAAc,EAAE,IAAI,CAAC,IAAI,CAAC;YACxCA,kBAAa,CAAC,oBAAoB,EAAE,IAAI,CAAC,IAAI,CAAC;SAC/C,CAAA;KACF;CACF;;;;;;;;;"}