/**
 * MIT License
 * 
 * Copyright 2020 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the &quot;Software&quot;), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

/**
 * Generated by the artifact generator [@inrupt/lit-artifact-generator], version [0.13.4]
 * as part of artifact: [vocab-common-rdf], version: [0.7.4]
 * on 'Monday, April 5, 2021 9:51 PM'.
 *
 * Vocabulary built from vocab list file: [common-rdf/Common/Vocab-List-Common-Rdf.yml].
 *
 * The Vocabulary of Interlinked Datasets (VoID) is an RDF Schema vocabulary for expressing metadata about RDF datasets. It is intended as a bridge between the publishers and users of RDF data, with applications ranging from data discovery to cataloging and archiving of datasets. This document provides a formal definition of the new RDF classes and properties introduced for VoID. It is a companion to the main specification document for VoID, <em><a href="http://www.w3.org/TR/void/">Describing Linked Datasets with the VoID Vocabulary</a></em>.
 */

import { DataFactory } from 'rdf-data-factory';
import * as RdfTypes from 'rdf-js';

const rdfFactory: RdfTypes.DataFactory = new DataFactory();

function _NS(localName: string): RdfTypes.NamedNode {
  return rdfFactory.namedNode(`http://rdfs.org/ns/void#${localName}`);
}

// Add 'any' type annotation in case this vocab includes 'NamedNode' instances,
// for example instances of Constant IRIs (TypeScript compiler will complain of
// "semantic error TS2742" otherwise).
/**
 * The Vocabulary of Interlinked Datasets (VoID) is an RDF Schema vocabulary for expressing metadata about RDF datasets. It is intended as a bridge between the publishers and users of RDF data, with applications ranging from data discovery to cataloging and archiving of datasets. This document provides a formal definition of the new RDF classes and properties introduced for VoID. It is a companion to the main specification document for VoID, <em><a href="http://www.w3.org/TR/void/">Describing Linked Datasets with the VoID Vocabulary</a></em>.
 */
const VOID: any = {
  PREFIX: "void",
  NAMESPACE: "http://rdfs.org/ns/void#",
  PREFIX_AND_NAMESPACE: { "void": "http://rdfs.org/ns/void#" },
  NS: _NS,

  // *****************
  // All the Classes.
  // *****************

  /**
   * A set of RDF triples that are published, maintained or aggregated by a single provider.
   */
  Dataset: _NS("Dataset"),

  /**
   * A collection of RDF links between two void:Datasets.
   */
  Linkset: _NS("Linkset"),

  /**
   * A technical feature of a void:Dataset, such as a supported RDF serialization format.
   */
  TechnicalFeature: _NS("TechnicalFeature"),

  /**
   * A web resource whose foaf:primaryTopic or foaf:topics include void:Datasets.
   */
  DatasetDescription: _NS("DatasetDescription"),


  // *******************
  // All the Properties.
  // *******************

  /**
   * feature
   */
  feature: _NS("feature"),

  /**
   * has subset
   */
  subset: _NS("subset"),

  /**
   * One of the two datasets linked by the Linkset.
   */
  target: _NS("target"),

  /**
   * has a SPARQL endpoint at
   */
  sparqlEndpoint: _NS("sparqlEndpoint"),

  /**
   * a link predicate
   */
  linkPredicate: _NS("linkPredicate"),

  /**
   * example resource of dataset
   */
  exampleResource: _NS("exampleResource"),

  /**
   * A vocabulary that is used in the dataset.
   */
  vocabulary: _NS("vocabulary"),

  /**
   * The dataset describing the subjects of triples contained in the Linkset.
   */
  subjectsTarget: _NS("subjectsTarget"),

  /**
   * The dataset describing the objects of the triples contained in the Linkset.
   */
  objectsTarget: _NS("objectsTarget"),

  /**
   * An RDF dump, partial or complete, of a void:Dataset.
   */
  dataDump: _NS("dataDump"),

  /**
   * Defines a simple URI look-up protocol for accessing a dataset.
   */
  uriLookupEndpoint: _NS("uriLookupEndpoint"),

  /**
   * Defines a regular expression pattern matching URIs in the dataset.
   */
  uriRegexPattern: _NS("uriRegexPattern"),

  /**
   * The rdfs:Class that is the rdf:type of all entities in a class-based partition.
   */
  class: _NS("class"),

  /**
   * The total number of distinct classes in a void:Dataset. In other words, the number of distinct resources occuring as objects of rdf:type triples in the dataset.
   */
  classes: _NS("classes"),

  /**
   * A subset of a void:Dataset that contains only the entities of a certain rdfs:Class.
   */
  classPartition: _NS("classPartition"),

  /**
   * The total number of distinct objects in a void:Dataset. In other words, the number of distinct resources that occur in the object position of triples in the dataset. Literals are included in this count.
   */
  distinctObjects: _NS("distinctObjects"),

  /**
   * The total number of distinct subjects in a void:Dataset. In other words, the number of distinct resources that occur in the subject position of triples in the dataset.
   */
  distinctSubjects: _NS("distinctSubjects"),

  /**
   * The total number of documents, for datasets that are published as a set of individual documents, such as RDF/XML documents or RDFa-annotated web pages. Non-RDF documents, such as web pages in HTML or images, are usually not included in this count. This property is intended for datasets where the total number of triples or entities is hard to determine. void:triples or void:entities should be preferred where practical.
   */
  documents: _NS("documents"),

  /**
   * The total number of entities that are described in a void:Dataset.
   */
  entities: _NS("entities"),

  /**
   * Points to the void:Dataset that a document is a part of.
   */
  inDataset: _NS("inDataset"),

  /**
   * An OpenSearch description document for a free-text search service over a void:Dataset.
   */
  openSearchDescription: _NS("openSearchDescription"),

  /**
   * The total number of distinct properties in a void:Dataset. In other words, the number of distinct resources that occur in the predicate position of triples in the dataset.
   */
  properties: _NS("properties"),

  /**
   * The rdf:Property that is the predicate of all triples in a property-based partition.
   */
  property: _NS("property"),

  /**
   * A subset of a void:Dataset that contains only the triples of a certain rdf:Property.
   */
  propertyPartition: _NS("propertyPartition"),

  /**
   * A top concept or entry point for a void:Dataset that is structured in a tree-like fashion. All resources in a dataset can be reached by following links from its root resources in a small number of steps.
   */
  rootResource: _NS("rootResource"),

  /**
   * The total number of triples contained in a void:Dataset.
   */
  triples: _NS("triples"),

  /**
   * A URI that is a common string prefix of all the entity URIs in a void:Dataset.
   */
  uriSpace: _NS("uriSpace"),
 }

export default VOID;
