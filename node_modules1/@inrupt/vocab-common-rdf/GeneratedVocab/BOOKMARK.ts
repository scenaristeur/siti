/**
 * MIT License
 * 
 * Copyright 2020 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the &quot;Software&quot;), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

/**
 * Generated by the artifact generator [@inrupt/lit-artifact-generator], version [0.13.4]
 * as part of artifact: [vocab-common-rdf], version: [0.7.4]
 * on 'Monday, April 5, 2021 9:51 PM'.
 *
 * Vocabulary built from vocab list file: [common-rdf/Common/Vocab-List-Common-Rdf.yml].
 *
 * [Generator provided] - W3C Bookmark vocabulary
 */

import { DataFactory } from 'rdf-data-factory';
import * as RdfTypes from 'rdf-js';

const rdfFactory: RdfTypes.DataFactory = new DataFactory();

function _NS(localName: string): RdfTypes.NamedNode {
  return rdfFactory.namedNode(`http://www.w3.org/2002/01/bookmark#${localName}`);
}

// Add 'any' type annotation in case this vocab includes 'NamedNode' instances,
// for example instances of Constant IRIs (TypeScript compiler will complain of
// "semantic error TS2742" otherwise).
/**
 * [Generator provided] - W3C Bookmark vocabulary
 */
const BOOKMARK: any = {
  PREFIX: "bookmark",
  NAMESPACE: "http://www.w3.org/2002/01/bookmark#",
  PREFIX_AND_NAMESPACE: { "bookmark": "http://www.w3.org/2002/01/bookmark#" },
  NS: _NS,

  // *****************
  // All the Classes.
  // *****************

  /**
   * Topic
   */
  Topic: _NS("Topic"),

  /**
   * Specifies a behavior; when the
                object of type 'Shortcut' is activated, the
                client follows the 'recalls' property and
                activates the object at the end of that
                'recalls' property.  The target object may
                be another Bookmark or may be a Topic.
   */
  Shortcut: _NS("Shortcut"),

  /**
   * The class to which all bookmarks belong.
   */
  Bookmark: _NS("Bookmark"),


  // *******************
  // All the Properties.
  // *******************

  /**
   * relates a bookmark to a topic.
                A bookmark must have at least one hasTopic property.
                The typical user operation of following a bookmark link
                will use the value of the b:recalls property. This property
                corresponds to XBEL:href property.
   */
  hasTopic: _NS("hasTopic"),

  /**
   * connects a Shortcut to the bookmark or topic that is
being included by reference in some other topic
   */
  leadsTo: _NS("leadsTo"),

  /**
   * This corresponds to XBEL:href an
                object of type Bookmark is expected to have a
                'recalls' relationship to the document being
                bookmarked.  The 'bookmarks' property is an older
                name for the 'recalls' relationship.
   */
  bookmarks: _NS("bookmarks"),

  /**
   * Relates a bookmark with the resource that
                has been bookmarked.  This corresponds to XBEL:href;
                an object of type Bookmark is expected to have a
                'recalls' relationship to the document being
                bookmarked 
   */
  recalls: _NS("recalls"),

  /**
   * Describes a relationship between Topics.
        When a topic T is a sub-topic of a topic U then all
        bookmarks that have topic T are also considered to have
        topic U. A topic may be a sub-topic of one or more
        topics; trivially, every topic is a sub-topic of itself.
        More formally; for all B, T, and U: b b:hasTopic T,
        T b:subTopicOf U implies B b:hasTopic U.
   */
  subTopicOf: _NS("subTopicOf"),
 }

export default BOOKMARK;
