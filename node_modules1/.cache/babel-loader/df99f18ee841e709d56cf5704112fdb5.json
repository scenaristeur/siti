{"remainingRequest":"/home/smag/dev/siti/node_modules/babel-loader/lib/index.js!/home/smag/dev/siti/node_modules/eslint-loader/index.js??ref--13-0!/home/smag/dev/siti/src/plugins/vue-solid.js","dependencies":[{"path":"/home/smag/dev/siti/src/plugins/vue-solid.js","mtime":1622992798542},{"path":"/home/smag/dev/siti/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/smag/dev/siti/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/home/smag/dev/siti/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/home/smag/dev/siti/src/plugins/vue-solid.js"],"names":["getSolidDataset","getThingAll","getFile","isRawData","getContentType","saveFileInContainer","getContainedResourceUrlAll","createContainerAt","getSourceUrl","deleteFile","deleteContainer","overwriteFile","getStringNoLocale","getThing","getUrlAll","getUrl","FOAF","VCARD","WS","sc","plugin","install","Vue","opts","store","prototype","$login","issuer","login","oidcIssuer","redirectUrl","window","location","href","clientName","alert","$logout","params","session","getDefaultSession","console","log","logout","commit","$checkSessions","handleIncomingRedirect","restorePreviousSession","restore","then","info","onSessionRestore","url","$getPodInfosFromSession","pod","logged","isLoggedIn","webId","$getPodInfos","storage","$setCurrentThingUrl","$getFolderContent","fetch","myDataset","resources","pages","map","x","name","replace","$setCurrentThing","page","file","reader","FileReader","addEventListener","path","content","result","type","mime","root","readAsText","length","things","dataset","profile","knows","friends","hasPhoto","photo","$save","Blob","savedFile","$uploadLocalToPod","dest","undefined","distIsDirectory","endsWith","srcIsDirectory","event","parts","split","state","vatch","pathsep","slug","encodeURIComponent","pop","answer","confirm","$createFile","filename","$createFolder","foldername","savedFolder","$deleteOnPod","parent","slice","lastIndexOf","use"],"mappings":"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","sourcesContent":["import {\n  getSolidDataset,\n  getThingAll,\n  getFile,\n  isRawData,\n  getContentType,\n  saveFileInContainer,\n  getContainedResourceUrlAll,\n  createContainerAt,\n  getSourceUrl,\n  deleteFile,\n  deleteContainer,\n  //  addStringNoLocale,\n  // setThing,\n  // saveSolidDatasetAt,\n  // createSolidDataset,\n  // createThing,\n  // addUrl,\n  overwriteFile,\n  getStringNoLocale,\n  getThing,\n  getUrlAll,\n  getUrl\n} from \"@inrupt/solid-client\";\nimport { FOAF, /*RDF, LDP,*/ VCARD } from \"@inrupt/vocab-common-rdf\";\nimport { WS, /*, VCARD */} from \"@inrupt/vocab-solid-common\";\nimport * as sc from '@inrupt/solid-client-authn-browser'\n// import {\n//   WebsocketNotification,\n// } from \"@inrupt/solid-client-notifications\";\n// import * as jsonld from 'jsonld';\n\n\nconst plugin = {\n  install(Vue, opts = {}) {\n    let store = opts.store\n\n    Vue.prototype.$login= async function(issuer) {\n\n      try{\n        await sc.login({\n          oidcIssuer: issuer,\n          redirectUrl: window.location.href,\n          clientName: \"Vatch\",\n        });\n      } catch(e){\n        alert(e)\n      }\n    },\n\n    Vue.prototype.$logout = async function(params){\n      try{\n        let session = sc.getDefaultSession()\n        console.log(params)\n        await session.logout()\n        store.commit('solid/setSession',session)\n        store.commit('solid/setPod', {})\n      } catch(e){\n        alert(e)\n      }\n    },\n\n    Vue.prototype.$checkSessions = async function( params){\n      try{\n        await sc.handleIncomingRedirect({restorePreviousSession : params.restore}).then((info) => {\n          console.log(info)\n        })\n        let session = sc.getDefaultSession()\n        sc.onSessionRestore((url) => {\n          console.log(\"restore\",url)\n        });\n        store.commit('solid/setSession',session)\n        //  dispatch('getPodInfos', session)\n        this.$getPodInfosFromSession(session)\n      } catch(e){\n        alert(e)\n      }\n    },\n\n    Vue.prototype.$getPodInfosFromSession = async function(session){\n      try{\n        let pod = {}\n        pod.logged = session.info.isLoggedIn\n        if (pod.logged) {\n          pod.webId = session.info.webId\n          pod = await this.$getPodInfos(pod)\n          store.commit('solid/setPod', pod)\n          if (pod.storage != null){\n            this.$setCurrentThingUrl(pod.storage)\n            // let publicTagFile = pod.storage+'public/tags.ttl'\n            // //let privateTagFile = podStorage+'private/tags.ttl'\n            // let tags = await this.$getTags(publicTagFile)\n            // console.log(\"############################tags\",tags)\n          }\n        }else{\n          store.commit('solid/setPod', null)\n          store.commit('solid/setThings', [])\n        }\n      } catch(e){\n        alert(e)\n      }\n    }\n\n    Vue.prototype.$getFolderContent = async function(url){\n      const myDataset = await getSolidDataset( url, {fetch: sc.fetch});\n      console.log(myDataset)\n      let resources = await getContainedResourceUrlAll(myDataset,{fetch: sc.fetch} )\n      let pages = resources.map(x => {return {url: x, name: x.replace(url,\"\")}})\n      console.log(\"Pages\", pages)\n      return pages\n    }\n\n\n\n    Vue.prototype.$setCurrentThing = async function(page){\n      let url = page.url\n      try{\n        const file = await getFile(url, {fetch: sc.fetch});\n        // file is a Blob (see https://developer.mozilla.org/docs/Web/API/Blob)\n        console.log(\n          `Fetched a ${getContentType(file)} file from ${getSourceUrl(file)}.`\n        );\n        console.log(`The file is ${isRawData(file) ? \"not \" : \"\"}a dataset.`);\n\n        store.commit('solid/setCurrentRemoteUrl',url)\n\n        if(isRawData(file)){\n          console.log(\"todo raw data\", file)\n          var reader = new FileReader();\n          reader.addEventListener(\"loadend\", function() {\n            console.log(reader)\n            //  console.log(reader.result)\n            store.commit('viki/setFile', {\n              name: page.name,\n              path: getSourceUrl(file),\n              content : reader.result,\n              type:{mime: getContentType(file)}\n            }, { root: true })\n            // reader.result contient le contenu du\n            // blob sous la forme d'un tableau typé\n          });\n          reader.readAsText(file);\n        }else{\n          const myDataset = await getSolidDataset( url, {fetch: sc.fetch});\n          console.log(myDataset)\n\n          let resources = await getContainedResourceUrlAll(myDataset,{fetch: sc.fetch} )\n          console.log(\"Resources\", resources)\n          if(resources.length > 0){\n            store.commit('solid/setRemoteResources',resources)\n          }else{\n            const things = await getThingAll(\n              myDataset,\n              url\n            );\n            store.commit('solid/setThings',things)\n          }\n        }\n      }\n      catch(e){\n        alert(e)\n      }\n\n    },\n\n\n    Vue.prototype.$setCurrentThingUrl = async function( url){\n      try{\n        const file = await getFile(url, {fetch: sc.fetch});\n        // file is a Blob (see https://developer.mozilla.org/docs/Web/API/Blob)\n        console.log(\n          `Fetched a ${getContentType(file)} file from ${getSourceUrl(file)}.`\n        );\n        console.log(`The file is ${isRawData(file) ? \"not \" : \"\"}a dataset.`);\n\n        store.commit('solid/setCurrentRemoteUrl',url)\n\n        if(isRawData(file)){\n          console.log(\"todo raw data\", file)\n          var reader = new FileReader();\n          reader.addEventListener(\"loadend\", function() {\n            console.log(reader)\n            //  console.log(reader.result)\n            store.commit('viki/setFile', {\n              path: getSourceUrl(file),\n              content : reader.result,\n              type:{mime: getContentType(file)}\n            }, { root: true })\n            // reader.result contient le contenu du\n            // blob sous la forme d'un tableau typé\n          });\n          reader.readAsText(file);\n        }else{\n          const myDataset = await getSolidDataset( url, {fetch: sc.fetch});\n          console.log(myDataset)\n\n          let resources = await getContainedResourceUrlAll(myDataset,{fetch: sc.fetch} )\n          console.log(\"Resources\", resources)\n          if(resources.length > 0){\n            store.commit('solid/setRemoteResources',resources)\n          }else{\n            const things = await getThingAll(\n              myDataset,\n              url\n            );\n            store.commit('solid/setThings',things)\n          }\n        }\n      }\n      catch(e){\n        alert(e)\n      }\n\n    },\n\n    Vue.prototype.$getPodInfos = async function(pod){\n      try{\n        const dataset = await getSolidDataset( pod.webId, { fetch: sc.fetch });\n        console.log(\"DATASET\", dataset)\n        let profile = await getThing( dataset, pod.webId );\n        pod.name = await getStringNoLocale(profile, FOAF.name);\n        pod.friends = await getUrlAll(profile, FOAF.knows).map(webId => {return {webId: webId}})\n        pod.storage = await getUrl(profile, WS.storage);\n        pod.photo = await getUrl(profile, VCARD.hasPhoto);\n        // pod.publicTags = await this.$getTags(pod.storage+'public/tags.ttl')\n        // store.commit(\"vatch/addToNetwork\", pod.publicTags)\n        //this.$subscribe(pod.storage)\n        console.log(\"getpodinfos\",pod)\n      }catch(e)\n      {\n        console.log(\"erreur\",e, pod)\n      }\n      return await pod\n    }\n\n    // Vue.prototype.$getTags = async function (tagFile){\n    //   try{\n    //\n    //     // let tagsJ = await parseTagsJsonld(tagFile)\n    //     // console.log(\"tags JSONLD\",tagsJ)\n    //\n    //     let tagsR = await parseTagsRdf(tagFile)\n    //     console.log(\"tags RDF\",tagsR)\n    //\n    //     const tagDataset = await getSolidDataset( tagFile, { fetch: sc.fetch });\n    //     console.log(\"DATASET\", tagDataset)\n    //     let things =  await getThingAll(tagDataset, tagFile);\n    //     console.log(things)\n    //\n    //     return tagsR\n    //   }catch(e){\n    //     return []\n    //   }\n    // }\n\n\n    // Vue.prototype.$addTags = async function(params){\n    //   //console.log(params)\n    //\n    //   let tagDataset\n    //   try{\n    //     tagDataset = await getSolidDataset(params.tagFile, {fetch: sc.fetch});\n    //     console.log(\"DATASET\", tagDataset)\n    //   }catch(e){\n    //     //  console.log(e)\n    //   }\n    //\n    //   //  console.log(tagDataset)\n    //   tagDataset== undefined || tagDataset== null ? tagDataset = createSolidDataset() :\"\"\n    //\n    //   let thing, thingInDs;\n    //   //thing = addUrl(thing, RDF.type, LDP.Resource);\n    //   params.tags.forEach((t) => {\n    //     console.log(\"add\",t.subject, t.predicate.value, t.object.concepturi )\n    //     //  console.log(thing == undefined || thing ==null, thing)\n    //     //thing == undefined || thing ==null ?  thing = getThing(tagDataset, params.tagFile+\"#\"+t.subject) : \"\"\n    //     thing == undefined || thing ==null ?  thing = getThing(tagDataset, t.subject) : \"\"\n    //     //  console.log(thing)\n    //     //  thing == null ? thing = createThing({name: t.subject}) : \"\"\n    //     thing == null ? thing = createThing({url: t.subject}) : \"\"\n    //     //  console.log(thing)\n    //     thing = addUrl(thing, t.predicate.value, t.object.concepturi);\n    //\n    //   });\n    //   thingInDs = setThing(tagDataset, thing);\n    //\n    //\n    //   let savedThing = await saveSolidDatasetAt(params.tagFile, thingInDs, { fetch: sc.fetch } );\n    //   console.log(\"File saved\",savedThing);\n    // },\n\n    Vue.prototype.$save = async function(params){\n      console.log(params)\n      try{\n        let type = params.type && params.type.mime || \"plain/text\"\n        const savedFile = await overwriteFile(\n          params.path,\n          new Blob([params.content], { type: type }),\n          { fetch: sc.fetch }\n          // Or in Node:\n          // Buffer.from(\"This is a plain piece of text\", \"utf8\"), { type: \"plain/text\" })\n        );\n        console.log(\"File saved!\", savedFile);\n\n      }catch(e){\n        alert(e)\n      }\n    }\n    Vue.prototype.$uploadLocalToPod = async function(params){\n      try{\n        console.log(params)\n\n        if(params.dest == undefined){\n          alert (\"Please select a destination\")\n          return\n        }\n\n\n        let type = params.type && params.type.mime || \"plain/text\"\n        let distIsDirectory = params.dest.endsWith('/')\n        let srcIsDirectory = params.event == \"addDir\"\n\n        if (srcIsDirectory){\n          console.info(\"todo src is directory\")\n        }else{\n\n          if(distIsDirectory){\n            params.parts == undefined ? params.parts = params.path.split(store.state.vatch.pathsep) : \"\"\n            let slug = encodeURIComponent(params.parts.pop())\n            const savedFile = await saveFileInContainer(\n              params.dest,\n              new Blob([params.content], { type: type }),\n              { slug: slug, fetch: sc.fetch }\n            );\n\n            console.log(`File saved at ${getSourceUrl(savedFile)}`);\n            this.$setCurrentThingUrl(params.dest)\n          }else{\n\n            let answer = confirm(\"Are you sure you want to replace \"+params.dest);\n            if (answer == true)\n            {\n              const savedFile = await overwriteFile(\n                params.dest,\n                new Blob([params.content], { type: type }),\n                { fetch: sc.fetch }\n                // Or in Node:\n                // Buffer.from(\"This is a plain piece of text\", \"utf8\"), { type: \"plain/text\" })\n              );\n              console.log(\"File saved!\", savedFile);\n            }\n          }\n        }\n      } catch(e){\n        alert(e)\n      }\n    },\n\n    Vue.prototype.$createFile = async function(params){\n      try{\n        let type = params.type && params.type.mime || \"plain/text\"\n        let slug = encodeURIComponent(params.filename)\n        const savedFile = await saveFileInContainer(\n          params.dest,\n          new Blob([params.content || \"\"], { type: type }),\n          { slug: slug, fetch: sc.fetch }\n        );\n        console.log(`File saved at ${getSourceUrl(savedFile)}`);\n        this.$setCurrentThingUrl(params.dest)\n      } catch(e){\n        alert(e)\n      }\n    },\n\n    Vue.prototype.$createFolder = async function(params){\n      try{\n        let url = params.dest+encodeURIComponent(params.foldername)\n        const savedFolder = await createContainerAt(url, {fetch: sc.fetch});\n        console.log(`Folder saved at ${getSourceUrl(savedFolder)}`);\n        this.$setCurrentThingUrl(params.dest)\n      } catch(e){\n        alert(e)\n      }\n    },\n\n\n    Vue.prototype.$deleteOnPod = async function(url){\n      try{\n        if(url.endsWith('/')){\n          await deleteContainer(\n            url, { fetch: sc.fetch }\n          );\n        }\n        else{\n          await deleteFile(\n            url, { fetch: sc.fetch }\n          );\n        }\n        console.log(\" deleted !\",url);\n        let parent = url.slice(0, url.lastIndexOf('/'))+'/';\n        console.log(\"parent\",parent)\n        this.$setCurrentThingUrl(parent)\n      } catch(e){\n        alert(e)\n      }\n\n    }\n\n    // Vue.prototype.$subscribe = async function(resourceURL){\n    //\n    //   const gateway = \"https://notification.pod.inrupt.com/\";\n    //\n    //   const websocket = new WebsocketNotification(\n    //     resourceURL,\n    //     { fetch: sc.fetch, gateway }\n    //   );\n    //   console.log(\"Subscription to\", resourceURL)\n    //   websocket.on(\"connected\", () =>\n    //   console.log(\"connected\", websocket)\n    //   // setMessages((prev) => [\n    //   //   ...prev,\n    //   //   `Websocket connected; watching ${podRoot}`,\n    //   // ])\n    // );\n    //\n    // websocket.on(\"message\", (message) =>\n    // {\n    //   console.log('message', JSON.parse(message))\n    // }\n    //   // setMessages((prev) => [...prev, formatMessage(message)])\n    // );\n    //\n    // websocket.on(\"closed\", () =>\n    // console.log(\"websocket closed\")\n    // //  setMessages((prev) => [...prev, \"Websocket closed\"])\n    // );\n    //\n    // websocket.on(\"error\", (error) => {\n    //   /* eslint no-console: 0 */\n    //   console.error(error);\n    //   // setMessages((prev) => [\n    //   //   ...prev,\n    //   //   \"Websocket error (see console for details)\",\n    //   // ]);\n    // });\n    //\n    //   // websocket.on(\"message\", console.log);\n    //   // websocket.on(\"*\", console.log);\n    //   // websocket.on(\"connect\", console.log);\n    //   // websocket.on(\"CREATE\", console.log);\n    //\n    //   websocket.connect();\n    // }\n\n\n    ////////////////////////////\n\n\n\n    // async function parseTagsRdf(url){\n    //   let graph = {nodes: [], edges: []}\n    //   console.log(\"parseTagsRdf\",url)\n    //   try{\n    //\n    //     let dataset = await getSolidDataset(url, { fetch: sc.fetch });\n    //     console.log(dataset)\n    //     await dataset._quads.forEach(async function (q)  {\n    //       let [s,p,o] = [\n    //         {id:q.subject.id, label: await lastPart(q.subject.id)},\n    //         q.predicate.id,\n    //         {id:q.object.id, label: await lastPart(q.object.id)}\n    //       ]\n    //       //  console.log(s,p,o)\n    //       var indexS = graph.nodes.findIndex(x => x.id==s.id);\n    //       indexS === -1 ? graph.nodes.push(s) : \"\" //console.log(\"object already exists\")\n    //       var indexO = graph.nodes.findIndex(x => x.id==o.id);\n    //       indexO === -1 ? graph.nodes.push(o) : \"\" //console.log(\"object already exists\")\n    //       let edge = {from: s.id, to: o.id, label: await lastPart(p)}\n    //       var indexP = graph.edges.findIndex(x => x.from==edge.from && x.to == edge.to && x.label == edge.label);\n    //       indexP === -1 ? graph.edges.push(edge) : \"\"//console.log(\"object already exists\")\n    //     });\n    //   }\n    //   catch(e){\n    //     console.log(e)\n    //   }\n    //\n    //   console.log(graph)\n    //   return graph\n    // }\n\n    // async function parseTagsJsonld(url){\n    //   let documentLoaderType = 'xhr'\n    //   await jsonld.useDocumentLoader(documentLoaderType/*, options*/);\n    //   let doc = await jsonld.documentLoader(url, function(err) {\n    //     if(err) {\n    //       alert(err)\n    //     }\n    //   })\n    //   doc.jsonld = JSON.parse(doc.document)\n    //   doc.jsonld.forEach((t) => {\n    //     console.log(t)\n    //\n    //   });\n    //\n    //   //  delete doc.document\n    //   //  console.log(doc)\n    //   return doc\n    // }\n\n    // async function lastPart(text){\n    //   //  console.log(text, typeof text)\n    //   let wikidata = 'http://www.wikidata.org/entity/'\n    //   const API_URL = 'https://www.wikidata.org/w/api.php?action=wbgetentities&origin=*&format=json'\n    //   let language =  navigator.language.split(\"-\")[0] || 'en'\n    //   language+='|en'\n    //\n    //   if (text.startsWith(wikidata)){\n    //     let splitext = text.split(wikidata)[1]\n    //     //  console.log(splitext)\n    //     //  try{\n    //     let search_url = API_URL+\"&ids=\"+splitext+\"&props=labels&languages=\"+language\n    //     const res = await fetch(search_url)\n    //     //  console.log(res)\n    //     const json = await res.json()\n    //     let label\n    //     try{\n    //       label = json.entities[splitext].labels[language] != undefined ? json.entities[splitext].labels[language].value : json.entities[splitext].labels.en.value\n    //     }\n    //     catch(e){\n    //       console.log(e,json.entities)\n    //     }\n    //     return label\n    //     // this.items = suggestions.search\n    //     // console.log(this.items)\n    //     // }catch(e){\n    //     //   alert(e)\n    //     // }\n    //\n    //   }else if (typeof text == 'object' && text['rdfs:label'] != undefined){\n    //     return text['rdfs:label']\n    //   }else if (typeof text == 'string' && text.startsWith('http')){\n    //     var n = text.lastIndexOf('/');\n    //     return text.substring(n + 1);\n    //   }\n    //   else{\n    //     return text\n    //   }\n    // }\n\n\n  }\n}\n// Auto-install\nif (typeof window !== 'undefined' && window.Vue) {\n  window.Vue.use(plugin)\n}\n\nexport default plugin\n"]}]}