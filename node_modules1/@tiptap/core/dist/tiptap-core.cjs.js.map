{"version":3,"file":"tiptap-core.cjs.js","sources":["../src/helpers/getSchemaTypeNameByName.ts","../src/helpers/getNodeType.ts","../src/helpers/getNodeAttributes.ts","../src/helpers/getMarkType.ts","../src/helpers/getMarkAttributes.ts","../src/helpers/getAttributes.ts","../src/utilities/objectIncludes.ts","../src/helpers/isNodeActive.ts","../src/helpers/isMarkActive.ts","../src/helpers/isActive.ts","../src/utilities/removeElement.ts","../src/utilities/elementFromString.ts","../src/helpers/createNodeFromContent.ts","../src/helpers/createDocument.ts","../src/helpers/getHTMLFromFragment.ts","../src/helpers/isNodeEmpty.ts","../src/utilities/createStyleTag.ts","../src/CommandManager.ts","../src/helpers/getExtensionField.ts","../src/helpers/splitExtensions.ts","../src/helpers/getAttributesFromExtensions.ts","../src/utilities/mergeAttributes.ts","../src/helpers/getRenderedAttributes.ts","../src/utilities/isEmptyObject.ts","../src/utilities/fromString.ts","../src/helpers/injectExtensionAttributesToParseRule.ts","../src/utilities/callOrReturn.ts","../src/helpers/getSchemaByResolvedExtensions.ts","../src/helpers/getSchemaTypeByName.ts","../src/ExtensionManager.ts","../src/EventEmitter.ts","../src/utilities/isPlainObject.ts","../src/utilities/mergeDeep.ts","../src/Extension.ts","../src/extensions/clipboardTextSerializer.ts","../src/commands/blur.ts","../src/commands/clearContent.ts","../src/commands/clearNodes.ts","../src/commands/command.ts","../src/commands/createParagraphNear.ts","../src/commands/deleteRange.ts","../src/commands/deleteSelection.ts","../src/commands/enter.ts","../src/commands/exitCode.ts","../src/helpers/getMarkRange.ts","../src/commands/extendMarkRange.ts","../src/commands/first.ts","../src/utilities/minMax.ts","../src/utilities/isClass.ts","../src/utilities/isObject.ts","../src/helpers/isTextSelection.ts","../src/commands/focus.ts","../src/commands/insertContent.ts","../src/helpers/selectionToInsertionEnd.ts","../src/commands/insertContentAt.ts","../src/commands/joinBackward.ts","../src/commands/joinForward.ts","../src/commands/keyboardShortcut.ts","../src/commands/lift.ts","../src/commands/liftEmptyBlock.ts","../src/commands/liftListItem.ts","../src/commands/newlineInCode.ts","../src/commands/replace.ts","../src/commands/replaceRange.ts","../src/utilities/deleteProps.ts","../src/commands/resetAttributes.ts","../src/commands/scrollIntoView.ts","../src/commands/selectAll.ts","../src/commands/selectNodeBackward.ts","../src/commands/selectNodeForward.ts","../src/commands/selectParentNode.ts","../src/commands/setContent.ts","../src/commands/setMark.ts","../src/commands/setMeta.ts","../src/commands/setNode.ts","../src/commands/setNodeSelection.ts","../src/commands/setTextSelection.ts","../src/commands/sinkListItem.ts","../src/helpers/getSplittedAttributes.ts","../src/commands/splitBlock.ts","../src/commands/splitListItem.ts","../src/helpers/findParentNodeClosestToPos.ts","../src/helpers/findParentNode.ts","../src/helpers/isList.ts","../src/commands/toggleList.ts","../src/commands/toggleMark.ts","../src/commands/toggleNode.ts","../src/commands/toggleWrap.ts","../src/commands/undoInputRule.ts","../src/commands/unsetAllMarks.ts","../src/commands/unsetMark.ts","../src/commands/updateAttributes.ts","../src/commands/wrapIn.ts","../src/commands/wrapInList.ts","../src/extensions/commands.ts","../src/extensions/editable.ts","../src/extensions/focusEvents.ts","../src/extensions/keymap.ts","../src/style.ts","../src/Editor.ts","../src/Node.ts","../src/Mark.ts","../src/utilities/isiOS.ts","../src/NodeView.ts","../src/inputRules/nodeInputRule.ts","../src/helpers/getMarksBetween.ts","../src/inputRules/markInputRule.ts","../src/pasteRules/markPasteRule.ts","../src/helpers/findChildren.ts","../src/helpers/findChildrenInRange.ts","../src/helpers/getSchema.ts","../src/helpers/generateHTML.ts","../src/helpers/generateJSON.ts","../src/helpers/getDebugJSON.ts","../src/helpers/isNodeSelection.ts","../src/helpers/posToDOMRect.ts"],"sourcesContent":["import { Schema } from 'prosemirror-model'\n\nexport default function getSchemaTypeNameByName(name: string, schema: Schema): 'node' | 'mark' | null {\n  if (schema.nodes[name]) {\n    return 'node'\n  }\n\n  if (schema.marks[name]) {\n    return 'mark'\n  }\n\n  return null\n}\n","import { NodeType, Schema } from 'prosemirror-model'\n\nexport default function getNodeType(nameOrType: string | NodeType, schema: Schema): NodeType {\n  if (typeof nameOrType === 'string') {\n    if (!schema.nodes[nameOrType]) {\n      throw Error(`There is no node type named '${nameOrType}'. Maybe you forgot to add the extension?`)\n    }\n\n    return schema.nodes[nameOrType]\n  }\n\n  return nameOrType\n}\n","import { EditorState } from 'prosemirror-state'\nimport { Node, NodeType } from 'prosemirror-model'\nimport getNodeType from './getNodeType'\n\nexport default function getNodeAttributes(state: EditorState, typeOrName: string | NodeType): Record<string, any> {\n  const type = getNodeType(typeOrName, state.schema)\n  const { from, to } = state.selection\n  let nodes: Node[] = []\n\n  state.doc.nodesBetween(from, to, node => {\n    nodes = [...nodes, node]\n  })\n\n  const node = nodes\n    .reverse()\n    .find(nodeItem => nodeItem.type.name === type.name)\n\n  if (node) {\n    return { ...node.attrs }\n  }\n\n  return {}\n}\n","import { MarkType, Schema } from 'prosemirror-model'\n\nexport default function getMarkType(nameOrType: string | MarkType, schema: Schema): MarkType {\n  if (typeof nameOrType === 'string') {\n    if (!schema.marks[nameOrType]) {\n      throw Error(`There is no mark type named '${nameOrType}'. Maybe you forgot to add the extension?`)\n    }\n\n    return schema.marks[nameOrType]\n  }\n\n  return nameOrType\n}\n","import { EditorState } from 'prosemirror-state'\nimport { Mark, MarkType } from 'prosemirror-model'\nimport getMarkType from './getMarkType'\n\nexport default function getMarkAttributes(state: EditorState, typeOrName: string | MarkType): Record<string, any> {\n  const type = getMarkType(typeOrName, state.schema)\n  const { from, to, empty } = state.selection\n  let marks: Mark[] = []\n\n  if (empty) {\n    marks = state.selection.$head.marks()\n  } else {\n    state.doc.nodesBetween(from, to, node => {\n      marks = [...marks, ...node.marks]\n    })\n  }\n\n  const mark = marks.find(markItem => markItem.type.name === type.name)\n\n  if (mark) {\n    return { ...mark.attrs }\n  }\n\n  return {}\n}\n","import { MarkType, NodeType } from 'prosemirror-model'\nimport { EditorState } from 'prosemirror-state'\nimport getSchemaTypeNameByName from './getSchemaTypeNameByName'\nimport getNodeAttributes from './getNodeAttributes'\nimport getMarkAttributes from './getMarkAttributes'\n\nexport default function getAttributes(\n  state: EditorState,\n  typeOrName: string | NodeType | MarkType,\n): Record<string, any> {\n  const schemaType = getSchemaTypeNameByName(\n    typeof typeOrName === 'string'\n      ? typeOrName\n      : typeOrName.name,\n    state.schema,\n  )\n\n  if (schemaType === 'node') {\n    return getNodeAttributes(state, typeOrName as NodeType)\n  }\n\n  if (schemaType === 'mark') {\n    return getMarkAttributes(state, typeOrName as MarkType)\n  }\n\n  return {}\n}\n","/**\n * Check if object1 includes object2\n * @param object1 Object\n * @param object2 Object\n */\nexport default function objectIncludes(object1: Record<string, any>, object2: Record<string, any>): boolean {\n  const keys = Object.keys(object2)\n\n  if (!keys.length) {\n    return true\n  }\n\n  return !!keys\n    .filter(key => object2[key] === object1[key])\n    .length\n}\n","import { EditorState } from 'prosemirror-state'\nimport { NodeType } from 'prosemirror-model'\nimport objectIncludes from '../utilities/objectIncludes'\nimport getNodeType from './getNodeType'\nimport { NodeRange } from '../types'\n\nexport default function isNodeActive(\n  state: EditorState,\n  typeOrName: NodeType | string | null,\n  attributes: Record<string, any> = {},\n): boolean {\n  const { from, to, empty } = state.selection\n  const type = typeOrName\n    ? getNodeType(typeOrName, state.schema)\n    : null\n\n  let nodeRanges: NodeRange[] = []\n\n  state.doc.nodesBetween(from, to, (node, pos) => {\n    if (!node.isText) {\n      const relativeFrom = Math.max(from, pos)\n      const relativeTo = Math.min(to, pos + node.nodeSize)\n\n      nodeRanges = [...nodeRanges, {\n        node,\n        from: relativeFrom,\n        to: relativeTo,\n      }]\n    }\n  })\n\n  if (empty) {\n    return !!nodeRanges\n      .filter(nodeRange => {\n        if (!type) {\n          return true\n        }\n\n        return type.name === nodeRange.node.type.name\n      })\n      .find(nodeRange => objectIncludes(nodeRange.node.attrs, attributes))\n  }\n\n  const selectionRange = to - from\n\n  const range = nodeRanges\n    .filter(nodeRange => {\n      if (!type) {\n        return true\n      }\n\n      return type.name === nodeRange.node.type.name\n    })\n    .filter(nodeRange => objectIncludes(nodeRange.node.attrs, attributes))\n    .reduce((sum, nodeRange) => {\n      const size = nodeRange.to - nodeRange.from\n      return sum + size\n    }, 0)\n\n  return range >= selectionRange\n}\n","import { EditorState } from 'prosemirror-state'\nimport { MarkType } from 'prosemirror-model'\nimport objectIncludes from '../utilities/objectIncludes'\nimport getMarkType from './getMarkType'\nimport { MarkRange } from '../types'\n\nexport default function isMarkActive(\n  state: EditorState,\n  typeOrName: MarkType | string | null,\n  attributes: Record<string, any> = {},\n): boolean {\n  const { from, to, empty } = state.selection\n  const type = typeOrName\n    ? getMarkType(typeOrName, state.schema)\n    : null\n\n  if (empty) {\n    return !!(state.storedMarks || state.selection.$from.marks())\n      .filter(mark => {\n        if (!type) {\n          return true\n        }\n\n        return type.name === mark.type.name\n      })\n      .find(mark => objectIncludes(mark.attrs, attributes))\n  }\n\n  let selectionRange = 0\n  let markRanges: MarkRange[] = []\n\n  state.doc.nodesBetween(from, to, (node, pos) => {\n    if (node.isText) {\n      const relativeFrom = Math.max(from, pos)\n      const relativeTo = Math.min(to, pos + node.nodeSize)\n      const range = relativeTo - relativeFrom\n\n      selectionRange += range\n\n      markRanges = [...markRanges, ...node.marks.map(mark => ({\n        mark,\n        from: relativeFrom,\n        to: relativeTo,\n      }))]\n    }\n  })\n\n  if (selectionRange === 0) {\n    return false\n  }\n\n  // calculate range of matched mark\n  const matchedRange = markRanges\n    .filter(markRange => {\n      if (!type) {\n        return true\n      }\n\n      return type.name === markRange.mark.type.name\n    })\n    .filter(markRange => objectIncludes(markRange.mark.attrs, attributes))\n    .reduce((sum, markRange) => {\n      const size = markRange.to - markRange.from\n\n      return sum + size\n    }, 0)\n\n  // calculate range of marks that excludes the searched mark\n  // for example `code` doesn’t allow any other marks\n  const excludedRange = markRanges\n    .filter(markRange => {\n      if (!type) {\n        return true\n      }\n\n      return markRange.mark.type !== type\n        && markRange.mark.type.excludes(type)\n    })\n    .reduce((sum, markRange) => {\n      const size = markRange.to - markRange.from\n\n      return sum + size\n    }, 0)\n\n  // we only include the result of `excludedRange`\n  // if there is a match at all\n  const range = matchedRange > 0\n    ? matchedRange + excludedRange\n    : matchedRange\n\n  return range >= selectionRange\n}\n","import { EditorState } from 'prosemirror-state'\nimport isNodeActive from './isNodeActive'\nimport isMarkActive from './isMarkActive'\nimport getSchemaTypeNameByName from './getSchemaTypeNameByName'\n\nexport default function isActive(state: EditorState, name: string | null, attributes: Record<string, any> = {}): boolean {\n  if (!name) {\n    return isNodeActive(state, null, attributes) || isMarkActive(state, null, attributes)\n  }\n\n  const schemaType = getSchemaTypeNameByName(name, state.schema)\n\n  if (schemaType === 'node') {\n    return isNodeActive(state, name, attributes)\n  }\n\n  if (schemaType === 'mark') {\n    return isMarkActive(state, name, attributes)\n  }\n\n  return false\n}\n","export default function removeElement(element: HTMLElement): void {\n  if (element && element.parentNode) {\n    element.parentNode.removeChild(element)\n  }\n}\n","export default function elementFromString(value: string): HTMLElement {\n  // add a wrapper to preserve leading and trailing whitespace\n  const wrappedValue = `<body>${value}</body>`\n\n  return new window.DOMParser().parseFromString(wrappedValue, 'text/html').body\n}\n","import {\n  Schema,\n  DOMParser,\n  Node as ProseMirrorNode,\n  Fragment,\n  ParseOptions,\n} from 'prosemirror-model'\nimport elementFromString from '../utilities/elementFromString'\nimport { Content } from '../types'\n\nexport type CreateNodeFromContentOptions = {\n  slice?: boolean,\n  parseOptions?: ParseOptions,\n}\n\nexport default function createNodeFromContent(\n  content: Content,\n  schema: Schema,\n  options?: CreateNodeFromContentOptions,\n): ProseMirrorNode | Fragment {\n  options = {\n    slice: true,\n    parseOptions: {},\n    ...options,\n  }\n\n  if (typeof content === 'object' && content !== null) {\n    try {\n      if (Array.isArray(content)) {\n        return Fragment.fromArray(content.map(item => schema.nodeFromJSON(item)))\n      }\n\n      return schema.nodeFromJSON(content)\n    } catch (error) {\n      console.warn(\n        '[tiptap warn]: Invalid content.',\n        'Passed value:',\n        content,\n        'Error:',\n        error,\n      )\n\n      return createNodeFromContent('', schema, options)\n    }\n  }\n\n  if (typeof content === 'string') {\n    const parser = DOMParser.fromSchema(schema)\n\n    return options.slice\n      ? parser.parseSlice(elementFromString(content), options.parseOptions).content\n      : parser.parse(elementFromString(content), options.parseOptions)\n  }\n\n  return createNodeFromContent('', schema, options)\n}\n","import { Schema, Node as ProseMirrorNode, ParseOptions } from 'prosemirror-model'\nimport { Content } from '../types'\nimport createNodeFromContent from './createNodeFromContent'\n\nexport default function createDocument(\n  content: Content,\n  schema: Schema,\n  parseOptions: ParseOptions = {},\n): ProseMirrorNode {\n  return createNodeFromContent(content, schema, { slice: false, parseOptions }) as ProseMirrorNode\n}\n","import { Node, DOMSerializer, Schema } from 'prosemirror-model'\n\nexport default function getHTMLFromFragment(doc: Node, schema: Schema): string {\n  const fragment = DOMSerializer\n    .fromSchema(schema)\n    .serializeFragment(doc.content)\n\n  const temporaryDocument = document.implementation.createHTMLDocument()\n  const container = temporaryDocument.createElement('div')\n  container.appendChild(fragment)\n\n  return container.innerHTML\n}\n","import { Node as ProseMirrorNode } from 'prosemirror-model'\n\nexport default function isNodeEmpty(node: ProseMirrorNode): boolean {\n  const defaultContent = node.type.createAndFill()?.toJSON()\n  const content = node.toJSON()\n\n  return JSON.stringify(defaultContent) === JSON.stringify(content)\n}\n","export default function createStyleTag(style: string): HTMLStyleElement {\n  const tipTapStyleTag = (<HTMLStyleElement>document.querySelector('style[data-tiptap-style]'))\n\n  if (tipTapStyleTag !== null) {\n    return tipTapStyleTag\n  }\n\n  const styleNode = document.createElement('style')\n\n  styleNode.setAttribute('data-tiptap-style', '')\n  styleNode.innerHTML = style\n  document.getElementsByTagName('head')[0].appendChild(styleNode)\n\n  return styleNode\n}\n","import { EditorState, Transaction } from 'prosemirror-state'\nimport { Editor } from './Editor'\nimport {\n  SingleCommands,\n  ChainedCommands,\n  CanCommands,\n  RawCommands,\n  CommandProps,\n} from './types'\n\nexport default class CommandManager {\n\n  editor: Editor\n\n  commands: RawCommands\n\n  constructor(editor: Editor, commands: RawCommands) {\n    this.editor = editor\n    this.commands = commands\n  }\n\n  public createCommands(): SingleCommands {\n    const { commands, editor } = this\n    const { state, view } = editor\n    const { tr } = state\n    const props = this.buildProps(tr)\n\n    return Object.fromEntries(Object\n      .entries(commands)\n      .map(([name, command]) => {\n        const method = (...args: never[]) => {\n          const callback = command(...args)(props)\n\n          if (!tr.getMeta('preventDispatch')) {\n            view.dispatch(tr)\n          }\n\n          return callback\n        }\n\n        return [name, method]\n      })) as SingleCommands\n  }\n\n  public createChain(startTr?: Transaction, shouldDispatch = true): ChainedCommands {\n    const { commands, editor } = this\n    const { state, view } = editor\n    const callbacks: boolean[] = []\n    const hasStartTransaction = !!startTr\n    const tr = startTr || state.tr\n\n    const run = () => {\n      if (!hasStartTransaction && shouldDispatch && !tr.getMeta('preventDispatch')) {\n        view.dispatch(tr)\n      }\n\n      return callbacks.every(callback => callback === true)\n    }\n\n    const chain = {\n      ...Object.fromEntries(Object.entries(commands).map(([name, command]) => {\n        const chainedCommand = (...args: never[]) => {\n          const props = this.buildProps(tr, shouldDispatch)\n          const callback = command(...args)(props)\n\n          callbacks.push(callback)\n\n          return chain\n        }\n\n        return [name, chainedCommand]\n      })),\n      run,\n    } as unknown as ChainedCommands\n\n    return chain\n  }\n\n  public createCan(startTr?: Transaction): CanCommands {\n    const { commands, editor } = this\n    const { state } = editor\n    const dispatch = undefined\n    const tr = startTr || state.tr\n    const props = this.buildProps(tr, dispatch)\n    const formattedCommands = Object.fromEntries(Object\n      .entries(commands)\n      .map(([name, command]) => {\n        return [name, (...args: never[]) => command(...args)({ ...props, dispatch })]\n      })) as SingleCommands\n\n    return {\n      ...formattedCommands,\n      chain: () => this.createChain(tr, dispatch),\n    } as CanCommands\n  }\n\n  public buildProps(tr: Transaction, shouldDispatch = true): CommandProps {\n    const { editor, commands } = this\n    const { state, view } = editor\n\n    if (state.storedMarks) {\n      tr.setStoredMarks(state.storedMarks)\n    }\n\n    const props: CommandProps = {\n      tr,\n      editor,\n      view,\n      state: this.chainableState(tr, state),\n      dispatch: shouldDispatch\n        ? () => undefined\n        : undefined,\n      chain: () => this.createChain(tr),\n      can: () => this.createCan(tr),\n      get commands() {\n        return Object.fromEntries(Object\n          .entries(commands)\n          .map(([name, command]) => {\n            return [name, (...args: never[]) => command(...args)(props)]\n          })) as SingleCommands\n      },\n    }\n\n    return props\n  }\n\n  public chainableState(tr: Transaction, state: EditorState): EditorState {\n    let { selection } = tr\n    let { doc } = tr\n    let { storedMarks } = tr\n\n    return {\n      ...state,\n      schema: state.schema,\n      plugins: state.plugins,\n      apply: state.apply.bind(state),\n      applyTransaction: state.applyTransaction.bind(state),\n      reconfigure: state.reconfigure.bind(state),\n      toJSON: state.toJSON.bind(state),\n      get storedMarks() {\n        return storedMarks\n      },\n      get selection() {\n        return selection\n      },\n      get doc() {\n        return doc\n      },\n      get tr() {\n        selection = tr.selection\n        doc = tr.doc\n        storedMarks = tr.storedMarks\n\n        return tr\n      },\n    }\n  }\n\n}\n","import { AnyExtension, RemoveThis } from '../types'\n\nexport default function getExtensionField<T = any>(\n  extension: AnyExtension,\n  field: string,\n  context: Record<string, any> = {},\n): RemoveThis<T> {\n\n  if (extension.config[field] === undefined && extension.parent) {\n    return getExtensionField(extension.parent, field, context)\n  }\n\n  if (typeof extension.config[field] === 'function') {\n    const value = extension.config[field].bind({\n      ...context,\n      parent: extension.parent\n        ? getExtensionField(extension.parent, field, context)\n        : null,\n    })\n\n    return value\n  }\n\n  return extension.config[field]\n}\n","import { Extensions } from '../types'\nimport { Extension } from '../Extension'\nimport { Node } from '../Node'\nimport { Mark } from '../Mark'\n\nexport default function splitExtensions(extensions: Extensions) {\n  const baseExtensions = extensions.filter(extension => extension.type === 'extension') as Extension[]\n  const nodeExtensions = extensions.filter(extension => extension.type === 'node') as Node[]\n  const markExtensions = extensions.filter(extension => extension.type === 'mark') as Mark[]\n\n  return {\n    baseExtensions,\n    nodeExtensions,\n    markExtensions,\n  }\n}\n","import splitExtensions from './splitExtensions'\nimport getExtensionField from './getExtensionField'\nimport {\n  Extensions,\n  GlobalAttributes,\n  Attributes,\n  Attribute,\n  ExtensionAttribute,\n  AnyConfig,\n} from '../types'\nimport { NodeConfig, MarkConfig } from '..'\n\n/**\n * Get a list of all extension attributes defined in `addAttribute` and `addGlobalAttribute`.\n * @param extensions List of extensions\n */\nexport default function getAttributesFromExtensions(extensions: Extensions): ExtensionAttribute[] {\n  const extensionAttributes: ExtensionAttribute[] = []\n  const { nodeExtensions, markExtensions } = splitExtensions(extensions)\n  const nodeAndMarkExtensions = [...nodeExtensions, ...markExtensions]\n  const defaultAttribute: Required<Attribute> = {\n    default: null,\n    rendered: true,\n    renderHTML: null,\n    parseHTML: null,\n    keepOnSplit: true,\n  }\n\n  extensions.forEach(extension => {\n    const context = {\n      name: extension.name,\n      options: extension.options,\n    }\n\n    const addGlobalAttributes = getExtensionField<AnyConfig['addGlobalAttributes']>(\n      extension,\n      'addGlobalAttributes',\n      context,\n    )\n\n    if (!addGlobalAttributes) {\n      return\n    }\n\n    // TODO: remove `as GlobalAttributes`\n    const globalAttributes = addGlobalAttributes() as GlobalAttributes\n\n    globalAttributes.forEach(globalAttribute => {\n      globalAttribute.types.forEach(type => {\n        Object\n          .entries(globalAttribute.attributes)\n          .forEach(([name, attribute]) => {\n            extensionAttributes.push({\n              type,\n              name,\n              attribute: {\n                ...defaultAttribute,\n                ...attribute,\n              },\n            })\n          })\n      })\n    })\n  })\n\n  nodeAndMarkExtensions.forEach(extension => {\n    const context = {\n      name: extension.name,\n      options: extension.options,\n    }\n\n    const addAttributes = getExtensionField<NodeConfig['addAttributes'] | MarkConfig['addAttributes']>(\n      extension,\n      'addAttributes',\n      context,\n    )\n\n    if (!addAttributes) {\n      return\n    }\n\n    // TODO: remove `as Attributes`\n    const attributes = addAttributes() as Attributes\n\n    Object\n      .entries(attributes)\n      .forEach(([name, attribute]) => {\n        extensionAttributes.push({\n          type: extension.name,\n          name,\n          attribute: {\n            ...defaultAttribute,\n            ...attribute,\n          },\n        })\n      })\n  })\n\n  return extensionAttributes\n}\n","export default function mergeAttributes(...objects: Record<string, any>[]): Record<string, any> {\n  return objects\n    .filter(item => !!item)\n    .reduce((items, item) => {\n      const mergedAttributes = { ...items }\n\n      Object.entries(item).forEach(([key, value]) => {\n        const exists = mergedAttributes[key]\n\n        if (!exists) {\n          mergedAttributes[key] = value\n          return\n        }\n\n        if (key === 'class') {\n          mergedAttributes[key] = [mergedAttributes[key], value].join(' ')\n        } else if (key === 'style') {\n          mergedAttributes[key] = [mergedAttributes[key], value].join('; ')\n        } else {\n          mergedAttributes[key] = value\n        }\n      })\n\n      return mergedAttributes\n    }, {})\n}\n","import { Node, Mark } from 'prosemirror-model'\nimport { ExtensionAttribute } from '../types'\nimport mergeAttributes from '../utilities/mergeAttributes'\n\nexport default function getRenderedAttributes(nodeOrMark: Node | Mark, extensionAttributes: ExtensionAttribute[]): Record<string, any> {\n  return extensionAttributes\n    .filter(item => item.attribute.rendered)\n    .map(item => {\n      if (!item.attribute.renderHTML) {\n        return {\n          [item.name]: nodeOrMark.attrs[item.name],\n        }\n      }\n\n      return item.attribute.renderHTML(nodeOrMark.attrs) || {}\n    })\n    .reduce((attributes, attribute) => {\n      return mergeAttributes(attributes, attribute)\n    }, {})\n}\n","export default function isEmptyObject(object = {}): boolean {\n  return Object.keys(object).length === 0 && object.constructor === Object\n}\n","export default function fromString(value: any): any {\n  if (typeof value !== 'string') {\n    return value\n  }\n\n  if (value.match(/^\\d*(\\.\\d+)?$/)) {\n    return Number(value)\n  }\n\n  if (value === 'true') {\n    return true\n  }\n\n  if (value === 'false') {\n    return false\n  }\n\n  return value\n}\n","import { ParseRule } from 'prosemirror-model'\nimport { ExtensionAttribute } from '../types'\nimport fromString from '../utilities/fromString'\n\n/**\n * This function merges extension attributes into parserule attributes (`attrs` or `getAttrs`).\n * Cancels when `getAttrs` returned `false`.\n * @param parseRule ProseMirror ParseRule\n * @param extensionAttributes List of attributes to inject\n */\nexport default function injectExtensionAttributesToParseRule(parseRule: ParseRule, extensionAttributes: ExtensionAttribute[]): ParseRule {\n  if (parseRule.style) {\n    return parseRule\n  }\n\n  return {\n    ...parseRule,\n    getAttrs: node => {\n      const oldAttributes = parseRule.getAttrs\n        ? parseRule.getAttrs(node)\n        : parseRule.attrs\n\n      if (oldAttributes === false) {\n        return false\n      }\n\n      const newAttributes = extensionAttributes\n        .filter(item => item.attribute.rendered)\n        .reduce((items, item) => {\n          const attributes = item.attribute.parseHTML\n            ? item.attribute.parseHTML(node as HTMLElement) || {}\n            : {\n              [item.name]: fromString((node as HTMLElement).getAttribute(item.name)),\n            }\n\n          const filteredAttributes = Object.fromEntries(Object.entries(attributes)\n            .filter(([, value]) => value !== undefined && value !== null))\n\n          return {\n            ...items,\n            ...filteredAttributes,\n          }\n        }, {})\n\n      return { ...oldAttributes, ...newAttributes }\n    },\n  }\n}\n","import { MaybeReturnType } from '../types'\n\n/**\n * Optionally calls `value` as a function.\n * Otherwise it is returned directly.\n * @param value Function or any value.\n * @param context Optional context to bind to function.\n * @param props Optional props to pass to function.\n */\nexport default function callOrReturn<T>(value: T, context: any = undefined, ...props: any[]): MaybeReturnType<T> {\n  if (typeof value === 'function') {\n    if (context) {\n      return value.bind(context)(...props)\n    }\n\n    return value(...props)\n  }\n\n  return value as MaybeReturnType<T>\n}\n","import { NodeSpec, MarkSpec, Schema } from 'prosemirror-model'\nimport { AnyConfig, Extensions } from '../types'\nimport { NodeConfig, MarkConfig } from '..'\nimport splitExtensions from './splitExtensions'\nimport getAttributesFromExtensions from './getAttributesFromExtensions'\nimport getRenderedAttributes from './getRenderedAttributes'\nimport isEmptyObject from '../utilities/isEmptyObject'\nimport injectExtensionAttributesToParseRule from './injectExtensionAttributesToParseRule'\nimport callOrReturn from '../utilities/callOrReturn'\nimport getExtensionField from './getExtensionField'\n\nfunction cleanUpSchemaItem<T>(data: T) {\n  return Object.fromEntries(Object.entries(data).filter(([key, value]) => {\n    if (key === 'attrs' && isEmptyObject(value)) {\n      return false\n    }\n\n    return value !== null && value !== undefined\n  })) as T\n}\n\nexport default function getSchemaByResolvedExtensions(extensions: Extensions): Schema {\n  const allAttributes = getAttributesFromExtensions(extensions)\n  const { nodeExtensions, markExtensions } = splitExtensions(extensions)\n  const topNode = nodeExtensions.find(extension => getExtensionField(extension, 'topNode'))?.name\n\n  const nodes = Object.fromEntries(nodeExtensions.map(extension => {\n    const extensionAttributes = allAttributes.filter(attribute => attribute.type === extension.name)\n    const context = {\n      name: extension.name,\n      options: extension.options,\n    }\n\n    const extraNodeFields = extensions.reduce((fields, e) => {\n      const extendNodeSchema = getExtensionField<AnyConfig['extendNodeSchema']>(\n        e,\n        'extendNodeSchema',\n        context,\n      )\n\n      return {\n        ...fields,\n        ...(extendNodeSchema ? extendNodeSchema(extension) : {}),\n      }\n    }, {})\n\n    const schema: NodeSpec = cleanUpSchemaItem({\n      ...extraNodeFields,\n      content: callOrReturn(getExtensionField<NodeConfig['content']>(extension, 'content', context)),\n      marks: callOrReturn(getExtensionField<NodeConfig['marks']>(extension, 'marks', context)),\n      group: callOrReturn(getExtensionField<NodeConfig['group']>(extension, 'group', context)),\n      inline: callOrReturn(getExtensionField<NodeConfig['inline']>(extension, 'inline', context)),\n      atom: callOrReturn(getExtensionField<NodeConfig['atom']>(extension, 'atom', context)),\n      selectable: callOrReturn(getExtensionField<NodeConfig['selectable']>(extension, 'selectable', context)),\n      draggable: callOrReturn(getExtensionField<NodeConfig['draggable']>(extension, 'draggable', context)),\n      code: callOrReturn(getExtensionField<NodeConfig['code']>(extension, 'code', context)),\n      defining: callOrReturn(getExtensionField<NodeConfig['defining']>(extension, 'defining', context)),\n      isolating: callOrReturn(getExtensionField<NodeConfig['isolating']>(extension, 'isolating', context)),\n      attrs: Object.fromEntries(extensionAttributes.map(extensionAttribute => {\n        return [extensionAttribute.name, { default: extensionAttribute?.attribute?.default }]\n      })),\n    })\n\n    const parseHTML = callOrReturn(getExtensionField<NodeConfig['parseHTML']>(extension, 'parseHTML', context))\n\n    if (parseHTML) {\n      schema.parseDOM = parseHTML\n        .map(parseRule => injectExtensionAttributesToParseRule(parseRule, extensionAttributes))\n    }\n\n    const renderHTML = getExtensionField<NodeConfig['renderHTML']>(extension, 'renderHTML', context)\n\n    if (renderHTML) {\n      schema.toDOM = node => renderHTML({\n        node,\n        HTMLAttributes: getRenderedAttributes(node, extensionAttributes),\n      })\n    }\n\n    return [extension.name, schema]\n  }))\n\n  const marks = Object.fromEntries(markExtensions.map(extension => {\n    const extensionAttributes = allAttributes.filter(attribute => attribute.type === extension.name)\n    const context = {\n      name: extension.name,\n      options: extension.options,\n    }\n\n    const extraMarkFields = extensions.reduce((fields, e) => {\n      const extendMarkSchema = getExtensionField<AnyConfig['extendMarkSchema']>(\n        e,\n        'extendMarkSchema',\n        context,\n      )\n\n      return {\n        ...fields,\n        ...(extendMarkSchema ? extendMarkSchema(extension) : {}),\n      }\n    }, {})\n\n    const schema: MarkSpec = cleanUpSchemaItem({\n      ...extraMarkFields,\n      inclusive: callOrReturn(getExtensionField<NodeConfig['inclusive']>(extension, 'inclusive', context)),\n      excludes: callOrReturn(getExtensionField<NodeConfig['excludes']>(extension, 'excludes', context)),\n      group: callOrReturn(getExtensionField<NodeConfig['group']>(extension, 'group', context)),\n      spanning: callOrReturn(getExtensionField<NodeConfig['spanning']>(extension, 'spanning', context)),\n      attrs: Object.fromEntries(extensionAttributes.map(extensionAttribute => {\n        return [extensionAttribute.name, { default: extensionAttribute?.attribute?.default }]\n      })),\n    })\n\n    const parseHTML = callOrReturn(getExtensionField<MarkConfig['parseHTML']>(extension, 'parseHTML', context))\n\n    if (parseHTML) {\n      schema.parseDOM = parseHTML\n        .map(parseRule => injectExtensionAttributesToParseRule(parseRule, extensionAttributes))\n    }\n\n    const renderHTML = getExtensionField<MarkConfig['renderHTML']>(extension, 'renderHTML', context)\n\n    if (renderHTML) {\n      schema.toDOM = mark => renderHTML({\n        mark,\n        HTMLAttributes: getRenderedAttributes(mark, extensionAttributes),\n      })\n    }\n\n    return [extension.name, schema]\n  }))\n\n  return new Schema({\n    topNode,\n    nodes,\n    marks,\n  })\n}\n","import { MarkType, NodeType, Schema } from 'prosemirror-model'\n\nexport default function getSchemaTypeByName(name: string, schema: Schema): NodeType | MarkType | null {\n  if (schema.nodes[name]) {\n    return schema.nodes[name]\n  }\n\n  if (schema.marks[name]) {\n    return schema.marks[name]\n  }\n\n  return null\n}\n","import { keymap } from 'prosemirror-keymap'\nimport { Schema, Node as ProsemirrorNode } from 'prosemirror-model'\nimport { inputRules as inputRulesPlugin } from 'prosemirror-inputrules'\nimport { EditorView, Decoration } from 'prosemirror-view'\nimport { Plugin } from 'prosemirror-state'\nimport { Editor } from './Editor'\nimport { Extensions, RawCommands, AnyConfig } from './types'\nimport getExtensionField from './helpers/getExtensionField'\nimport getSchemaByResolvedExtensions from './helpers/getSchemaByResolvedExtensions'\nimport getSchemaTypeByName from './helpers/getSchemaTypeByName'\nimport getNodeType from './helpers/getNodeType'\nimport splitExtensions from './helpers/splitExtensions'\nimport getAttributesFromExtensions from './helpers/getAttributesFromExtensions'\nimport getRenderedAttributes from './helpers/getRenderedAttributes'\nimport callOrReturn from './utilities/callOrReturn'\nimport { NodeConfig } from '.'\n\nexport default class ExtensionManager {\n\n  editor: Editor\n\n  schema: Schema\n\n  extensions: Extensions\n\n  splittableMarks: string[] = []\n\n  constructor(extensions: Extensions, editor: Editor) {\n    this.editor = editor\n    this.extensions = ExtensionManager.resolve(extensions)\n    this.schema = getSchemaByResolvedExtensions(this.extensions)\n\n    this.extensions.forEach(extension => {\n      const context = {\n        name: extension.name,\n        options: extension.options,\n        editor: this.editor,\n        type: getSchemaTypeByName(extension.name, this.schema),\n      }\n\n      if (extension.type === 'mark') {\n        const keepOnSplit = callOrReturn(getExtensionField(extension, 'keepOnSplit', context)) ?? true\n\n        if (keepOnSplit) {\n          this.splittableMarks.push(extension.name)\n        }\n      }\n\n      const onBeforeCreate = getExtensionField<AnyConfig['onBeforeCreate']>(\n        extension,\n        'onBeforeCreate',\n        context,\n      )\n\n      if (onBeforeCreate) {\n        this.editor.on('beforeCreate', onBeforeCreate)\n      }\n\n      const onCreate = getExtensionField<AnyConfig['onCreate']>(\n        extension,\n        'onCreate',\n        context,\n      )\n\n      if (onCreate) {\n        this.editor.on('create', onCreate)\n      }\n\n      const onUpdate = getExtensionField<AnyConfig['onUpdate']>(\n        extension,\n        'onUpdate',\n        context,\n      )\n\n      if (onUpdate) {\n        this.editor.on('update', onUpdate)\n      }\n\n      const onSelectionUpdate = getExtensionField<AnyConfig['onSelectionUpdate']>(\n        extension,\n        'onSelectionUpdate',\n        context,\n      )\n\n      if (onSelectionUpdate) {\n        this.editor.on('selectionUpdate', onSelectionUpdate)\n      }\n\n      const onTransaction = getExtensionField<AnyConfig['onTransaction']>(\n        extension,\n        'onTransaction',\n        context,\n      )\n\n      if (onTransaction) {\n        this.editor.on('transaction', onTransaction)\n      }\n\n      const onFocus = getExtensionField<AnyConfig['onFocus']>(\n        extension,\n        'onFocus',\n        context,\n      )\n\n      if (onFocus) {\n        this.editor.on('focus', onFocus)\n      }\n\n      const onBlur = getExtensionField<AnyConfig['onBlur']>(\n        extension,\n        'onBlur',\n        context,\n      )\n\n      if (onBlur) {\n        this.editor.on('blur', onBlur)\n      }\n\n      const onDestroy = getExtensionField<AnyConfig['onDestroy']>(\n        extension,\n        'onDestroy',\n        context,\n      )\n\n      if (onDestroy) {\n        this.editor.on('destroy', onDestroy)\n      }\n    })\n  }\n\n  static resolve(extensions: Extensions): Extensions {\n    return ExtensionManager.sort(ExtensionManager.flatten(extensions))\n  }\n\n  static flatten(extensions: Extensions): Extensions {\n    return extensions\n      .map(extension => {\n        const context = {\n          name: extension.name,\n          options: extension.options,\n        }\n\n        const addExtensions = getExtensionField<AnyConfig['addExtensions']>(\n          extension,\n          'addExtensions',\n          context,\n        )\n\n        if (addExtensions) {\n          return [\n            extension,\n            ...this.flatten(addExtensions()),\n          ]\n        }\n\n        return extension\n      })\n      // `Infinity` will break TypeScript so we set a number that is probably high enough\n      .flat(10)\n  }\n\n  static sort(extensions: Extensions): Extensions {\n    const defaultPriority = 100\n\n    return extensions.sort((a, b) => {\n      const priorityA = getExtensionField<AnyConfig['priority']>(a, 'priority') || defaultPriority\n      const priorityB = getExtensionField<AnyConfig['priority']>(b, 'priority') || defaultPriority\n\n      if (priorityA > priorityB) {\n        return -1\n      }\n\n      if (priorityA < priorityB) {\n        return 1\n      }\n\n      return 0\n    })\n  }\n\n  get commands(): RawCommands {\n    return this.extensions.reduce((commands, extension) => {\n      const context = {\n        name: extension.name,\n        options: extension.options,\n        editor: this.editor,\n        type: getSchemaTypeByName(extension.name, this.schema),\n      }\n\n      const addCommands = getExtensionField<AnyConfig['addCommands']>(\n        extension,\n        'addCommands',\n        context,\n      )\n\n      if (!addCommands) {\n        return commands\n      }\n\n      return {\n        ...commands,\n        ...addCommands(),\n      }\n    }, {} as RawCommands)\n  }\n\n  get plugins(): Plugin[] {\n    return [...this.extensions]\n      .reverse()\n      .map(extension => {\n        const context = {\n          name: extension.name,\n          options: extension.options,\n          editor: this.editor,\n          type: getSchemaTypeByName(extension.name, this.schema),\n        }\n\n        const plugins: Plugin[] = []\n\n        const addKeyboardShortcuts = getExtensionField<AnyConfig['addKeyboardShortcuts']>(\n          extension,\n          'addKeyboardShortcuts',\n          context,\n        )\n\n        if (addKeyboardShortcuts) {\n          const bindings = Object.fromEntries(\n            Object\n              .entries(addKeyboardShortcuts())\n              .map(([shortcut, method]) => {\n                return [shortcut, () => method({ editor: this.editor })]\n              }),\n          )\n\n          const keyMapPlugin = keymap(bindings)\n\n          plugins.push(keyMapPlugin)\n        }\n\n        const addInputRules = getExtensionField<AnyConfig['addInputRules']>(\n          extension,\n          'addInputRules',\n          context,\n        )\n\n        if (this.editor.options.enableInputRules && addInputRules) {\n          const inputRules = addInputRules()\n          const inputRulePlugins = inputRules.length\n            ? [inputRulesPlugin({ rules: inputRules })]\n            : []\n\n          plugins.push(...inputRulePlugins)\n        }\n\n        const addPasteRules = getExtensionField<AnyConfig['addPasteRules']>(\n          extension,\n          'addPasteRules',\n          context,\n        )\n\n        if (this.editor.options.enablePasteRules && addPasteRules) {\n          const pasteRulePlugins = addPasteRules()\n\n          plugins.push(...pasteRulePlugins)\n        }\n\n        const addProseMirrorPlugins = getExtensionField<AnyConfig['addProseMirrorPlugins']>(\n          extension,\n          'addProseMirrorPlugins',\n          context,\n        )\n\n        if (addProseMirrorPlugins) {\n          const proseMirrorPlugins = addProseMirrorPlugins()\n\n          plugins.push(...proseMirrorPlugins)\n        }\n\n        return plugins\n      })\n      .flat()\n  }\n\n  get attributes() {\n    return getAttributesFromExtensions(this.extensions)\n  }\n\n  get nodeViews() {\n    const { editor } = this\n    const { nodeExtensions } = splitExtensions(this.extensions)\n\n    return Object.fromEntries(nodeExtensions\n      .filter(extension => !!getExtensionField(extension, 'addNodeView'))\n      .map(extension => {\n        const extensionAttributes = this.attributes.filter(attribute => attribute.type === extension.name)\n        const context = {\n          name: extension.name,\n          options: extension.options,\n          editor,\n          type: getNodeType(extension.name, this.schema),\n        }\n        const addNodeView = getExtensionField<NodeConfig['addNodeView']>(\n          extension,\n          'addNodeView',\n          context,\n        )\n\n        if (!addNodeView) {\n          return []\n        }\n\n        const nodeview = (\n          node: ProsemirrorNode,\n          view: EditorView,\n          getPos: (() => number) | boolean,\n          decorations: Decoration[],\n        ) => {\n          const HTMLAttributes = getRenderedAttributes(node, extensionAttributes)\n\n          return addNodeView()({\n            editor,\n            node,\n            getPos,\n            decorations,\n            HTMLAttributes,\n            extension,\n          })\n        }\n\n        return [extension.name, nodeview]\n      }))\n  }\n\n  get textSerializers() {\n    const { editor } = this\n    const { nodeExtensions } = splitExtensions(this.extensions)\n\n    return Object.fromEntries(nodeExtensions\n      .filter(extension => !!getExtensionField(extension, 'renderText'))\n      .map(extension => {\n        const context = {\n          name: extension.name,\n          options: extension.options,\n          editor,\n          type: getNodeType(extension.name, this.schema),\n        }\n\n        const renderText = getExtensionField<NodeConfig['renderText']>(extension, 'renderText', context)\n\n        if (!renderText) {\n          return []\n        }\n\n        const textSerializer = (props: { node: ProsemirrorNode }) => renderText(props)\n\n        return [extension.name, textSerializer]\n      }))\n  }\n\n}\n","export default class EventEmitter {\n\n  private callbacks: { [key: string]: Function[] } = {}\n\n  public on(event: string, fn: Function): this {\n    if (!this.callbacks[event]) {\n      this.callbacks[event] = []\n    }\n\n    this.callbacks[event].push(fn)\n\n    return this\n  }\n\n  protected emit(event: string, ...args: any): this {\n    const callbacks = this.callbacks[event]\n\n    if (callbacks) {\n      callbacks.forEach(callback => callback.apply(this, args))\n    }\n\n    return this\n  }\n\n  public off(event: string, fn?: Function): this {\n    const callbacks = this.callbacks[event]\n\n    if (callbacks) {\n      if (fn) {\n        this.callbacks[event] = callbacks.filter(callback => callback !== fn)\n      } else {\n        delete this.callbacks[event]\n      }\n    }\n\n    return this\n  }\n\n  protected removeAllListeners(): void {\n    this.callbacks = {}\n  }\n}\n","// see: https://github.com/mesqueeb/is-what/blob/88d6e4ca92fb2baab6003c54e02eedf4e729e5ab/src/index.ts\n\nfunction getType(payload: any): string {\n  return Object.prototype.toString.call(payload).slice(8, -1)\n}\n\nexport default function isPlainObject(payload: any): payload is Record<string, any> {\n  if (getType(payload) !== 'Object') return false\n  return payload.constructor === Object && Object.getPrototypeOf(payload) === Object.prototype\n}\n","import isPlainObject from './isPlainObject'\n\nexport default function mergeDeep(target: Record<string, any>, source: Record<string, any>): Record<string, any> {\n  const output = { ...target }\n\n  if (isPlainObject(target) && isPlainObject(source)) {\n    Object.keys(source).forEach(key => {\n      if (isPlainObject(source[key])) {\n        if (!(key in target)) {\n          Object.assign(output, { [key]: source[key] })\n        } else {\n          output[key] = mergeDeep(target[key], source[key])\n        }\n      } else {\n        Object.assign(output, { [key]: source[key] })\n      }\n    })\n  }\n\n  return output\n}\n","import { Plugin, Transaction } from 'prosemirror-state'\nimport { InputRule } from 'prosemirror-inputrules'\nimport { Editor } from './Editor'\nimport { Node } from './Node'\nimport { Mark } from './Mark'\nimport mergeDeep from './utilities/mergeDeep'\nimport {\n  Extensions,\n  GlobalAttributes,\n  RawCommands,\n  ParentConfig,\n  KeyboardShortcutCommand,\n} from './types'\nimport { ExtensionConfig } from '.'\n\ndeclare module '@tiptap/core' {\n  interface ExtensionConfig<Options = any> {\n    [key: string]: any;\n\n    /**\n     * Name\n     */\n    name: string,\n\n    /**\n     * Priority\n     */\n    priority?: number,\n\n    /**\n     * Default options\n     */\n    defaultOptions?: Options,\n\n    /**\n     * Global attributes\n     */\n    addGlobalAttributes?: (this: {\n      name: string,\n      options: Options,\n      parent: ParentConfig<ExtensionConfig<Options>>['addGlobalAttributes'],\n    }) => GlobalAttributes | {},\n\n    /**\n     * Raw\n     */\n    addCommands?: (this: {\n      name: string,\n      options: Options,\n      editor: Editor,\n      parent: ParentConfig<ExtensionConfig<Options>>['addCommands'],\n    }) => Partial<RawCommands>,\n\n    /**\n     * Keyboard shortcuts\n     */\n    addKeyboardShortcuts?: (this: {\n      name: string,\n      options: Options,\n      editor: Editor,\n      parent: ParentConfig<ExtensionConfig<Options>>['addKeyboardShortcuts'],\n    }) => {\n      [key: string]: KeyboardShortcutCommand,\n    },\n\n    /**\n     * Input rules\n     */\n    addInputRules?: (this: {\n      name: string,\n      options: Options,\n      editor: Editor,\n      parent: ParentConfig<ExtensionConfig<Options>>['addInputRules'],\n    }) => InputRule[],\n\n    /**\n     * Paste rules\n     */\n    addPasteRules?: (this: {\n      name: string,\n      options: Options,\n      editor: Editor,\n      parent: ParentConfig<ExtensionConfig<Options>>['addPasteRules'],\n    }) => Plugin[],\n\n    /**\n     * ProseMirror plugins\n     */\n    addProseMirrorPlugins?: (this: {\n      name: string,\n      options: Options,\n      editor: Editor,\n      parent: ParentConfig<ExtensionConfig<Options>>['addProseMirrorPlugins'],\n    }) => Plugin[],\n\n    /**\n     * Extensions\n     */\n    addExtensions?: (this: {\n      name: string,\n      options: Options,\n      parent: ParentConfig<ExtensionConfig<Options>>['addExtensions'],\n    }) => Extensions,\n\n    /**\n     * Extend Node Schema\n     */\n    extendNodeSchema?: ((\n      this: {\n        name: string,\n        options: Options,\n        parent: ParentConfig<ExtensionConfig<Options>>['extendNodeSchema'],\n      },\n      extension: Node,\n    ) => Record<string, any>) | null,\n\n    /**\n     * Extend Mark Schema\n     */\n    extendMarkSchema?: ((\n      this: {\n        name: string,\n        options: Options,\n        parent: ParentConfig<ExtensionConfig<Options>>['extendMarkSchema'],\n      },\n      extension: Mark,\n    ) => Record<string, any>) | null,\n\n    /**\n     * The editor is not ready yet.\n     */\n    onBeforeCreate?: ((this: {\n      name: string,\n      options: Options,\n      editor: Editor,\n      parent: ParentConfig<ExtensionConfig<Options>>['onBeforeCreate'],\n    }) => void) | null,\n\n    /**\n     * The editor is ready.\n     */\n    onCreate?: ((this: {\n      name: string,\n      options: Options,\n      editor: Editor,\n      parent: ParentConfig<ExtensionConfig<Options>>['onCreate'],\n    }) => void) | null,\n\n    /**\n     * The content has changed.\n     */\n    onUpdate?: ((this: {\n      name: string,\n      options: Options,\n      editor: Editor,\n      parent: ParentConfig<ExtensionConfig<Options>>['onUpdate'],\n    }) => void) | null,\n\n    /**\n     * The selection has changed.\n     */\n    onSelectionUpdate?: ((this: {\n      name: string,\n      options: Options,\n      editor: Editor,\n      parent: ParentConfig<ExtensionConfig<Options>>['onSelectionUpdate'],\n    }) => void) | null,\n\n    /**\n     * The editor state has changed.\n     */\n    onTransaction?: ((\n      this: {\n        name: string,\n        options: Options,\n        editor: Editor,\n        parent: ParentConfig<ExtensionConfig<Options>>['onTransaction'],\n      },\n      props: {\n        transaction: Transaction,\n      },\n    ) => void) | null,\n\n    /**\n     * The editor is focused.\n     */\n    onFocus?: ((\n      this: {\n        name: string,\n        options: Options,\n        editor: Editor,\n        parent: ParentConfig<ExtensionConfig<Options>>['onFocus'],\n      },\n      props: {\n        event: FocusEvent,\n      },\n    ) => void) | null,\n\n    /**\n     * The editor isn’t focused anymore.\n     */\n    onBlur?: ((\n      this: {\n        name: string,\n        options: Options,\n        editor: Editor,\n        parent: ParentConfig<ExtensionConfig<Options>>['onBlur'],\n      },\n      props: {\n        event: FocusEvent,\n      },\n    ) => void) | null,\n\n    /**\n     * The editor is destroyed.\n     */\n    onDestroy?: ((this: {\n      name: string,\n      options: Options,\n      editor: Editor,\n      parent: ParentConfig<ExtensionConfig<Options>>['onDestroy'],\n    }) => void) | null,\n  }\n}\n\nexport class Extension<Options = any> {\n  type = 'extension'\n\n  name = 'extension'\n\n  parent: Extension | null = null\n\n  child: Extension | null = null\n\n  options: Options\n\n  config: ExtensionConfig = {\n    name: this.name,\n    defaultOptions: {},\n  }\n\n  constructor(config: Partial<ExtensionConfig<Options>> = {}) {\n    this.config = {\n      ...this.config,\n      ...config,\n    }\n\n    this.name = this.config.name\n    this.options = this.config.defaultOptions\n  }\n\n  static create<O>(config: Partial<ExtensionConfig<O>> = {}) {\n    return new Extension<O>(config)\n  }\n\n  configure(options: Partial<Options> = {}) {\n    // return a new instance so we can use the same extension\n    // with different calls of `configure`\n    const extension = this.extend()\n\n    extension.options = mergeDeep(this.options, options) as Options\n\n    return extension\n  }\n\n  extend<ExtendedOptions = Options>(extendedConfig: Partial<ExtensionConfig<ExtendedOptions>> = {}) {\n    const extension = new Extension<ExtendedOptions>(extendedConfig)\n\n    extension.parent = this\n\n    this.child = extension\n\n    extension.name = extendedConfig.name\n      ? extendedConfig.name\n      : extension.parent.name\n\n    extension.options = extendedConfig.defaultOptions\n      ? extendedConfig.defaultOptions\n      : extension.parent.options\n\n    return extension\n  }\n}\n","import { Editor } from '@tiptap/core'\nimport { Plugin, PluginKey } from 'prosemirror-state'\nimport { Extension } from '../Extension'\n\nconst textBetween = (\n  editor: Editor,\n  from: number,\n  to: number,\n  blockSeparator?: string,\n  leafText?: string,\n): string => {\n  let text = ''\n  let separated = true\n\n  editor.state.doc.nodesBetween(from, to, (node, pos) => {\n    const textSerializer = editor.extensionManager.textSerializers[node.type.name]\n\n    if (textSerializer) {\n      text += textSerializer({ node })\n      separated = !blockSeparator\n    } else if (node.isText) {\n      text += node?.text?.slice(Math.max(from, pos) - pos, to - pos)\n      separated = !blockSeparator\n    } else if (node.isLeaf && leafText) {\n      text += leafText\n      separated = !blockSeparator\n    } else if (!separated && node.isBlock) {\n      text += blockSeparator\n      separated = true\n    }\n  }, 0)\n\n  return text\n}\n\nexport const ClipboardTextSerializer = Extension.create({\n  name: 'editable',\n\n  addProseMirrorPlugins() {\n    return [\n      new Plugin({\n        key: new PluginKey('clipboardTextSerializer'),\n        props: {\n          clipboardTextSerializer: () => {\n            const { editor } = this\n            const { from, to } = editor.state.selection\n\n            return textBetween(editor, from, to, '\\n')\n          },\n        },\n      }),\n    ]\n  },\n})\n","import { Command, RawCommands } from '../types'\n\ndeclare module '@tiptap/core' {\n  interface Commands {\n    blur: {\n      /**\n       * Removes focus from the editor.\n       */\n      blur: () => Command,\n    }\n  }\n}\n\nexport const blur: RawCommands['blur'] = () => ({ view }) => {\n  const element = view.dom as HTMLElement\n\n  element.blur()\n\n  return true\n}\n","import { Command, RawCommands } from '../types'\n\ndeclare module '@tiptap/core' {\n  interface Commands {\n    clearContent: {\n      /**\n       * Clear the whole document.\n       */\n      clearContent: (emitUpdate?: boolean) => Command,\n    }\n  }\n}\n\nexport const clearContent: RawCommands['clearContent'] = (emitUpdate = false) => ({ commands }) => {\n  return commands.setContent('', emitUpdate)\n}\n","import { liftTarget } from 'prosemirror-transform'\nimport { Command, RawCommands } from '../types'\n\ndeclare module '@tiptap/core' {\n  interface Commands {\n    clearNodes: {\n      /**\n       * Normalize nodes to a simple paragraph.\n       */\n      clearNodes: () => Command,\n    }\n  }\n}\n\nexport const clearNodes: RawCommands['clearNodes'] = () => ({ state, tr, dispatch }) => {\n  const { selection } = tr\n  const { ranges } = selection\n\n  ranges.forEach(range => {\n    state.doc.nodesBetween(range.$from.pos, range.$to.pos, (node, pos) => {\n      if (node.type.isText) {\n        return\n      }\n\n      const $fromPos = tr.doc.resolve(tr.mapping.map(pos))\n      const $toPos = tr.doc.resolve(tr.mapping.map(pos + node.nodeSize))\n      const nodeRange = $fromPos.blockRange($toPos)\n\n      if (!nodeRange) {\n        return\n      }\n\n      const targetLiftDepth = liftTarget(nodeRange)\n\n      if (node.type.isTextblock && dispatch) {\n        const { defaultType } = $fromPos.parent.contentMatchAt($fromPos.index())\n\n        tr.setNodeMarkup(nodeRange.start, defaultType)\n      }\n\n      if ((targetLiftDepth || targetLiftDepth === 0) && dispatch) {\n        tr.lift(nodeRange, targetLiftDepth)\n      }\n    })\n  })\n\n  return true\n}\n","import { Command, RawCommands } from '../types'\n\ndeclare module '@tiptap/core' {\n  interface Commands {\n    command: {\n      /**\n       * Define a command inline.\n       */\n      command: (fn: (props: Parameters<Command>[0]) => boolean) => Command,\n    }\n  }\n}\n\nexport const command: RawCommands['command'] = fn => props => {\n  return fn(props)\n}\n","import { createParagraphNear as originalCreateParagraphNear } from 'prosemirror-commands'\nimport { Command, RawCommands } from '../types'\n\ndeclare module '@tiptap/core' {\n  interface Commands {\n    createParagraphNear: {\n      /**\n       * Create a paragraph nearby.\n       */\n      createParagraphNear: () => Command,\n    }\n  }\n}\n\nexport const createParagraphNear: RawCommands['createParagraphNear'] = () => ({ state, dispatch }) => {\n  return originalCreateParagraphNear(state, dispatch)\n}\n","import { Command, RawCommands, Range } from '../types'\n\ndeclare module '@tiptap/core' {\n  interface Commands {\n    deleteRange: {\n      /**\n       * Delete a given range.\n       */\n      deleteRange: (range: Range) => Command,\n    }\n  }\n}\n\nexport const deleteRange: RawCommands['deleteRange'] = range => ({ tr, dispatch }) => {\n  const { from, to } = range\n\n  if (dispatch) {\n    tr.delete(from, to)\n  }\n\n  return true\n}\n","import { deleteSelection as originalDeleteSelection } from 'prosemirror-commands'\nimport { Command, RawCommands } from '../types'\n\ndeclare module '@tiptap/core' {\n  interface Commands {\n    deleteSelection: {\n      /**\n       * Delete the selection, if there is one.\n       */\n      deleteSelection: () => Command,\n    }\n  }\n}\n\nexport const deleteSelection: RawCommands['deleteSelection'] = () => ({ state, dispatch }) => {\n  return originalDeleteSelection(state, dispatch)\n}\n","import { Command, RawCommands } from '../types'\n\ndeclare module '@tiptap/core' {\n  interface Commands {\n    enter: {\n      /**\n       * Trigger enter.\n       */\n      enter: () => Command,\n    }\n  }\n}\n\nexport const enter: RawCommands['enter'] = () => ({ commands }) => {\n  return commands.keyboardShortcut('Enter')\n}\n","import { exitCode as originalExitCode } from 'prosemirror-commands'\nimport { Command, RawCommands } from '../types'\n\ndeclare module '@tiptap/core' {\n  interface Commands {\n    exitCode: {\n      /**\n       * Exit from a code block.\n       */\n      exitCode: () => Command,\n    }\n  }\n}\n\nexport const exitCode: RawCommands['exitCode'] = () => ({ state, dispatch }) => {\n  return originalExitCode(state, dispatch)\n}\n","import { Mark as ProseMirrorMark, MarkType, ResolvedPos } from 'prosemirror-model'\nimport objectIncludes from '../utilities/objectIncludes'\nimport { Range } from '../types'\n\nfunction findMarkInSet(\n  marks: ProseMirrorMark[],\n  type: MarkType,\n  attributes: Record<string, any> = {},\n): ProseMirrorMark | undefined {\n  return marks.find(item => {\n    return item.type === type && objectIncludes(item.attrs, attributes)\n  })\n}\n\nfunction isMarkInSet(\n  marks: ProseMirrorMark[],\n  type: MarkType,\n  attributes: Record<string, any> = {},\n): boolean {\n  return !!findMarkInSet(marks, type, attributes)\n}\n\nexport default function getMarkRange(\n  $pos: ResolvedPos,\n  type: MarkType,\n  attributes: Record<string, any> = {},\n): Range | void {\n  if (!$pos || !type) {\n    return\n  }\n\n  const start = $pos.parent.childAfter($pos.parentOffset)\n\n  if (!start.node) {\n    return\n  }\n\n  const mark = findMarkInSet(start.node.marks, type, attributes)\n\n  if (!mark) {\n    return\n  }\n\n  let startIndex = $pos.index()\n  let startPos = $pos.start() + start.offset\n  let endIndex = startIndex + 1\n  let endPos = startPos + start.node.nodeSize\n\n  findMarkInSet(start.node.marks, type, attributes)\n\n  while (startIndex > 0 && mark.isInSet($pos.parent.child(startIndex - 1).marks)) {\n    startIndex -= 1\n    startPos -= $pos.parent.child(startIndex).nodeSize\n  }\n\n  while (\n    endIndex < $pos.parent.childCount\n    && isMarkInSet($pos.parent.child(endIndex).marks, type, attributes)\n  ) {\n    endPos += $pos.parent.child(endIndex).nodeSize\n    endIndex += 1\n  }\n\n  return {\n    from: startPos,\n    to: endPos,\n  }\n}\n","import { TextSelection } from 'prosemirror-state'\nimport { MarkType } from 'prosemirror-model'\nimport { Command, RawCommands } from '../types'\nimport getMarkType from '../helpers/getMarkType'\nimport getMarkRange from '../helpers/getMarkRange'\n\ndeclare module '@tiptap/core' {\n  interface Commands {\n    extendMarkRange: {\n      /**\n       * Extends the text selection to the current mark.\n       */\n      extendMarkRange: (typeOrName: string | MarkType, attributes?: Record<string, any>) => Command,\n    }\n  }\n}\n\nexport const extendMarkRange: RawCommands['extendMarkRange'] = (typeOrName, attributes = {}) => ({ tr, state, dispatch }) => {\n  const type = getMarkType(typeOrName, state.schema)\n  const { doc, selection } = tr\n  const { $from, from, to } = selection\n\n  if (dispatch) {\n    const range = getMarkRange($from, type, attributes)\n\n    if (range && range.from <= from && range.to >= to) {\n      const newSelection = TextSelection.create(doc, range.from, range.to)\n\n      tr.setSelection(newSelection)\n    }\n  }\n\n  return true\n}\n","import { Command, RawCommands } from '../types'\n\ndeclare module '@tiptap/core' {\n  interface Commands {\n    first: {\n      /**\n       * Runs one command after the other and stops at the first which returns true.\n       */\n      first: (commands: Command[] | ((props: Parameters<Command>[0]) => Command[])) => Command,\n    }\n  }\n}\n\nexport const first: RawCommands['first'] = commands => props => {\n  const items = typeof commands === 'function'\n    ? commands(props)\n    : commands\n\n  for (let i = 0; i < items.length; i += 1) {\n    if (items[i](props)) {\n      return true\n    }\n  }\n\n  return false\n}\n","export default function minMax(value = 0, min = 0, max = 0): number {\n  return Math.min(Math.max(value, min), max)\n}\n","export default function isClass(item: any): boolean {\n  if (item.constructor?.toString().substring(0, 5) !== 'class') {\n    return false\n  }\n\n  return true\n}\n","import isClass from './isClass'\n\nexport default function isObject(item: any): boolean {\n  return (\n    item\n    && typeof item === 'object'\n    && !Array.isArray(item)\n    && !isClass(item)\n  )\n}\n","import { TextSelection } from 'prosemirror-state'\nimport isObject from '../utilities/isObject'\n\nexport default function isTextSelection(value: unknown): value is TextSelection {\n  return isObject(value) && value instanceof TextSelection\n}\n","import { EditorState, TextSelection } from 'prosemirror-state'\nimport { Command, RawCommands, FocusPosition } from '../types'\nimport minMax from '../utilities/minMax'\nimport isTextSelection from '../helpers/isTextSelection'\n\nfunction resolveSelection(state: EditorState, position: FocusPosition = null) {\n  if (!position) {\n    return null\n  }\n\n  if (position === 'start' || position === true) {\n    return {\n      from: 0,\n      to: 0,\n    }\n  }\n\n  if (position === 'end') {\n    const { size } = state.doc.content\n\n    return {\n      from: size,\n      to: size,\n    }\n  }\n\n  return {\n    from: position,\n    to: position,\n  }\n}\n\ndeclare module '@tiptap/core' {\n  interface Commands {\n    focus: {\n      /**\n       * Focus the editor at the given position.\n       */\n      focus: (position?: FocusPosition) => Command,\n    }\n  }\n}\n\nexport const focus: RawCommands['focus'] = (position = null) => ({\n  editor,\n  view,\n  tr,\n  dispatch,\n}) => {\n  if ((view.hasFocus() && position === null) || position === false) {\n    return true\n  }\n\n  // we don’t try to resolve a NodeSelection or CellSelection\n  if (dispatch && position === null && !isTextSelection(editor.state.selection)) {\n    view.focus()\n    return true\n  }\n\n  const { from, to } = resolveSelection(editor.state, position) || editor.state.selection\n  const { doc, storedMarks } = tr\n  const resolvedFrom = minMax(from, 0, doc.content.size)\n  const resolvedEnd = minMax(to, 0, doc.content.size)\n  const selection = TextSelection.create(doc, resolvedFrom, resolvedEnd)\n  const isSameSelection = editor.state.selection.eq(selection)\n\n  if (dispatch) {\n    tr.setSelection(selection)\n\n    // `tr.setSelection` resets the stored marks\n    // so we’ll restore them if the selection is the same as before\n    if (isSameSelection && storedMarks) {\n      tr.setStoredMarks(storedMarks)\n    }\n\n    view.focus()\n  }\n\n  return true\n}\n","import { Command, RawCommands, Content } from '../types'\n\ndeclare module '@tiptap/core' {\n  interface Commands {\n    insertContent: {\n      /**\n       * Insert a node or string of HTML at the current position.\n       */\n      insertContent: (value: Content) => Command,\n    }\n  }\n}\n\nexport const insertContent: RawCommands['insertContent'] = value => ({ tr, commands }) => {\n  return commands.insertContentAt({ from: tr.selection.from, to: tr.selection.to }, value)\n}\n","import { Selection, Transaction } from 'prosemirror-state'\nimport { ReplaceStep, ReplaceAroundStep } from 'prosemirror-transform'\n\n// source: https://github.com/ProseMirror/prosemirror-state/blob/master/src/selection.js#L466\nexport default function selectionToInsertionEnd(tr: Transaction, startLen: number, bias: number) {\n  const last = tr.steps.length - 1\n\n  if (last < startLen) {\n    return\n  }\n\n  const step = tr.steps[last]\n\n  if (!(step instanceof ReplaceStep || step instanceof ReplaceAroundStep)) {\n    return\n  }\n\n  const map = tr.mapping.maps[last]\n  let end = 0\n\n  map.forEach((_from, _to, _newFrom, newTo) => {\n    if (end === 0) {\n      end = newTo\n    }\n  })\n\n  tr.setSelection(Selection.near(tr.doc.resolve(end), bias))\n}\n","import createNodeFromContent from '../helpers/createNodeFromContent'\nimport selectionToInsertionEnd from '../helpers/selectionToInsertionEnd'\nimport {\n  Command,\n  RawCommands,\n  Content,\n  Range,\n} from '../types'\n\ndeclare module '@tiptap/core' {\n  interface Commands {\n    insertContentAt: {\n      /**\n       * Insert a node or string of HTML at a specific position.\n       */\n      insertContentAt: (position: number | Range, value: Content) => Command,\n    }\n  }\n}\n\nexport const insertContentAt: RawCommands['insertContentAt'] = (position, value) => ({ tr, dispatch, editor }) => {\n  if (dispatch) {\n    const content = createNodeFromContent(value, editor.schema, {\n      parseOptions: {\n        preserveWhitespace: 'full',\n      },\n    })\n\n    // don’t dispatch an empty fragment because this can lead to strange errors\n    if (content.toString() === '<>') {\n      return true\n    }\n\n    const { from, to } = typeof position === 'number'\n      ? { from: position, to: position }\n      : position\n\n    tr.replaceWith(from, to, content)\n\n    // set cursor at end of inserted content\n    selectionToInsertionEnd(tr, tr.steps.length - 1, 1)\n  }\n\n  return true\n}\n","import { joinBackward as originalJoinBackward } from 'prosemirror-commands'\nimport { Command, RawCommands } from '../types'\n\ndeclare module '@tiptap/core' {\n  interface Commands {\n    joinBackward: {\n      /**\n       * Join two nodes backward.\n       */\n      joinBackward: () => Command,\n    }\n  }\n}\n\nexport const joinBackward: RawCommands['joinBackward'] = () => ({ state, dispatch }) => {\n  return originalJoinBackward(state, dispatch)\n}\n","import { joinForward as originalJoinForward } from 'prosemirror-commands'\nimport { Command, RawCommands } from '../types'\n\ndeclare module '@tiptap/core' {\n  interface Commands {\n    joinForward: {\n      /**\n       * Join two nodes forward.\n       */\n      joinForward: () => Command,\n    }\n  }\n}\n\nexport const joinForward: RawCommands['joinForward'] = () => ({ state, dispatch }) => {\n  return originalJoinForward(state, dispatch)\n}\n","import { Command, RawCommands } from '../types'\n\nconst mac = typeof navigator !== 'undefined' ? /Mac/.test(navigator.platform) : false\n\nfunction normalizeKeyName(name: string) {\n  const parts = name.split(/-(?!$)/)\n  let result = parts[parts.length - 1]\n\n  if (result === 'Space') {\n    result = ' '\n  }\n\n  let alt\n  let ctrl\n  let shift\n  let meta\n\n  for (let i = 0; i < parts.length - 1; i += 1) {\n    const mod = parts[i]\n\n    if (/^(cmd|meta|m)$/i.test(mod)) {\n      meta = true\n    } else if (/^a(lt)?$/i.test(mod)) {\n      alt = true\n    } else if (/^(c|ctrl|control)$/i.test(mod)) {\n      ctrl = true\n    } else if (/^s(hift)?$/i.test(mod)) {\n      shift = true\n    } else if (/^mod$/i.test(mod)) {\n      if (mac) {\n        meta = true\n      } else {\n        ctrl = true\n      }\n    } else {\n      throw new Error(`Unrecognized modifier name: ${mod}`)\n    }\n  }\n\n  if (alt) {\n    result = `Alt-${result}`\n  }\n\n  if (ctrl) {\n    result = `Ctrl-${result}`\n  }\n\n  if (meta) {\n    result = `Meta-${result}`\n  }\n\n  if (shift) {\n    result = `Shift-${result}`\n  }\n\n  return result\n}\n\ndeclare module '@tiptap/core' {\n  interface Commands {\n    keyboardShortcut: {\n      /**\n       * Trigger a keyboard shortcut.\n       */\n      keyboardShortcut: (name: string) => Command,\n    }\n  }\n}\n\nexport const keyboardShortcut: RawCommands['keyboardShortcut'] = name => ({\n  editor,\n  view,\n  tr,\n  dispatch,\n}) => {\n  const keys = normalizeKeyName(name).split(/-(?!$)/)\n  const key = keys.find(item => !['Alt', 'Ctrl', 'Meta', 'Shift'].includes(item))\n  const event = new KeyboardEvent('keydown', {\n    key: key === 'Space'\n      ? ' '\n      : key,\n    altKey: keys.includes('Alt'),\n    ctrlKey: keys.includes('Ctrl'),\n    metaKey: keys.includes('Meta'),\n    shiftKey: keys.includes('Shift'),\n    bubbles: true,\n    cancelable: true,\n  })\n\n  const capturedTransaction = editor.captureTransaction(() => {\n    view.someProp('handleKeyDown', f => f(view, event))\n  })\n\n  capturedTransaction?.steps.forEach(step => {\n    const newStep = step.map(tr.mapping)\n\n    if (newStep && dispatch) {\n      tr.maybeStep(newStep)\n    }\n  })\n\n  return true\n}\n","import { lift as originalLift } from 'prosemirror-commands'\nimport { NodeType } from 'prosemirror-model'\nimport { Command, RawCommands } from '../types'\nimport isNodeActive from '../helpers/isNodeActive'\nimport getNodeType from '../helpers/getNodeType'\n\ndeclare module '@tiptap/core' {\n  interface Commands {\n    lift: {\n      /**\n       * Removes an existing wrap.\n       */\n      lift: (typeOrName: string | NodeType, attributes?: Record<string, any>) => Command,\n    }\n  }\n}\n\nexport const lift: RawCommands['lift'] = (typeOrName, attributes = {}) => ({ state, dispatch }) => {\n  const type = getNodeType(typeOrName, state.schema)\n  const isActive = isNodeActive(state, type, attributes)\n\n  if (!isActive) {\n    return false\n  }\n\n  return originalLift(state, dispatch)\n}\n","import { liftEmptyBlock as originalLiftEmptyBlock } from 'prosemirror-commands'\nimport { Command, RawCommands } from '../types'\n\ndeclare module '@tiptap/core' {\n  interface Commands {\n    liftEmptyBlock: {\n      /**\n       * Lift block if empty.\n       */\n      liftEmptyBlock: () => Command,\n    }\n  }\n}\n\nexport const liftEmptyBlock: RawCommands['liftEmptyBlock'] = () => ({ state, dispatch }) => {\n  return originalLiftEmptyBlock(state, dispatch)\n}\n","import { liftListItem as originalLiftListItem } from 'prosemirror-schema-list'\nimport { NodeType } from 'prosemirror-model'\nimport { Command, RawCommands } from '../types'\nimport getNodeType from '../helpers/getNodeType'\n\ndeclare module '@tiptap/core' {\n  interface Commands {\n    liftListItem: {\n      /**\n       * Lift the list item into a wrapping list.\n       */\n      liftListItem: (typeOrName: string | NodeType) => Command,\n    }\n  }\n}\n\nexport const liftListItem: RawCommands['liftListItem'] = typeOrName => ({ state, dispatch }) => {\n  const type = getNodeType(typeOrName, state.schema)\n\n  return originalLiftListItem(type)(state, dispatch)\n}\n","import { newlineInCode as originalNewlineInCode } from 'prosemirror-commands'\nimport { Command, RawCommands } from '../types'\n\ndeclare module '@tiptap/core' {\n  interface Commands {\n    newlineInCode: {\n      /**\n       * Add a newline character in code.\n       */\n      newlineInCode: () => Command,\n    }\n  }\n}\n\nexport const newlineInCode: RawCommands['newlineInCode'] = () => ({ state, dispatch }) => {\n  return originalNewlineInCode(state, dispatch)\n}\n","import { NodeType } from 'prosemirror-model'\nimport { Command, RawCommands } from '../types'\n\ndeclare module '@tiptap/core' {\n  interface Commands {\n    replace: {\n      /**\n       * Replaces text with a node.\n       */\n      replace: (typeOrName: string | NodeType, attributes?: Record<string, any>) => Command,\n    }\n  }\n}\n\nexport const replace: RawCommands['replace'] = (typeOrName, attributes = {}) => ({ state, commands }) => {\n  console.warn('[tiptap warn]: replace() is deprecated. please use insertContent() instead.')\n\n  const { from, to } = state.selection\n  const range = { from, to }\n\n  return commands.replaceRange(range, typeOrName, attributes)\n}\n","import { NodeType } from 'prosemirror-model'\nimport getNodeType from '../helpers/getNodeType'\nimport { Command, RawCommands, Range } from '../types'\n\ndeclare module '@tiptap/core' {\n  interface Commands {\n    replaceRange: {\n      /**\n       * Replaces text with a node within a range.\n       */\n      replaceRange: (range: Range, typeOrName: string | NodeType, attributes?: Record<string, any>) => Command,\n    }\n  }\n}\n\nexport const replaceRange: RawCommands['replaceRange'] = (range, typeOrName, attributes = {}) => ({ tr, state, dispatch }) => {\n  console.warn('[tiptap warn]: replaceRange() is deprecated. please use insertContent() instead.')\n\n  const type = getNodeType(typeOrName, state.schema)\n  const { from, to } = range\n  // const $from = tr.doc.resolve(from)\n  // const index = $from.index()\n\n  // if (!$from.parent.canReplaceWith(index, index, type)) {\n  //   return false\n  // }\n\n  if (dispatch) {\n    tr.replaceRangeWith(from, to, type.create(attributes))\n  }\n\n  return true\n}\n","/**\n * Remove a property or an array of properties from an object\n * @param obj Object\n * @param key Key to remove\n */\nexport default function deleteProps(obj: Record<string, any>, propOrProps: string | string[]): Record<string, any> {\n  const props = typeof propOrProps === 'string'\n    ? [propOrProps]\n    : propOrProps\n\n  return Object\n    .keys(obj)\n    .reduce((newObj: Record<string, any>, prop) => {\n      if (!props.includes(prop)) {\n        newObj[prop] = obj[prop]\n      }\n\n      return newObj\n    }, {})\n}\n","import { NodeType, MarkType } from 'prosemirror-model'\nimport getNodeType from '../helpers/getNodeType'\nimport getMarkType from '../helpers/getMarkType'\nimport getSchemaTypeNameByName from '../helpers/getSchemaTypeNameByName'\nimport deleteProps from '../utilities/deleteProps'\nimport { Command, RawCommands } from '../types'\n\ndeclare module '@tiptap/core' {\n  interface Commands {\n    resetAttributes: {\n      /**\n       * Resets some node attributes to the default value.\n       */\n      resetAttributes: (typeOrName: string | NodeType | MarkType, attributes: string | string[]) => Command,\n    }\n  }\n}\n\nexport const resetAttributes: RawCommands['resetAttributes'] = (typeOrName, attributes) => ({ tr, state, dispatch }) => {\n  let nodeType: NodeType | null = null\n  let markType: MarkType | null = null\n\n  const schemaType = getSchemaTypeNameByName(\n    typeof typeOrName === 'string'\n      ? typeOrName\n      : typeOrName.name,\n    state.schema,\n  )\n\n  if (!schemaType) {\n    return false\n  }\n\n  if (schemaType === 'node') {\n    nodeType = getNodeType(typeOrName as NodeType, state.schema)\n  }\n\n  if (schemaType === 'mark') {\n    markType = getMarkType(typeOrName as MarkType, state.schema)\n  }\n\n  if (dispatch) {\n    tr.selection.ranges.forEach(range => {\n      state.doc.nodesBetween(range.$from.pos, range.$to.pos, (node, pos) => {\n        if (nodeType && nodeType === node.type) {\n          tr.setNodeMarkup(pos, undefined, deleteProps(node.attrs, attributes))\n        }\n\n        if (markType && node.marks.length) {\n          node.marks.forEach(mark => {\n            if (markType === mark.type) {\n              tr.addMark(pos, pos + node.nodeSize, markType.create(deleteProps(mark.attrs, attributes)))\n            }\n          })\n        }\n      })\n    })\n  }\n\n  return true\n}\n","import { Command, RawCommands } from '../types'\n\ndeclare module '@tiptap/core' {\n  interface Commands {\n    scrollIntoView: {\n      /**\n       * Scroll the selection into view.\n       */\n      scrollIntoView: () => Command,\n    }\n  }\n}\n\nexport const scrollIntoView: RawCommands['scrollIntoView'] = () => ({ tr, dispatch }) => {\n  if (dispatch) {\n    tr.scrollIntoView()\n  }\n\n  return true\n}\n","import { selectAll as originalSelectAll } from 'prosemirror-commands'\nimport { Command, RawCommands } from '../types'\n\ndeclare module '@tiptap/core' {\n  interface Commands {\n    selectAll: {\n      /**\n       * Select the whole document.\n       */\n      selectAll: () => Command,\n    }\n  }\n}\n\nexport const selectAll: RawCommands['selectAll'] = () => ({ state, dispatch }) => {\n  return originalSelectAll(state, dispatch)\n}\n","import { selectNodeBackward as originalSelectNodeBackward } from 'prosemirror-commands'\nimport { Command, RawCommands } from '../types'\n\ndeclare module '@tiptap/core' {\n  interface Commands {\n    selectNodeBackward: {\n      /**\n       * Select a node backward.\n       */\n      selectNodeBackward: () => Command,\n    }\n  }\n}\n\nexport const selectNodeBackward: RawCommands['selectNodeBackward'] = () => ({ state, dispatch }) => {\n  return originalSelectNodeBackward(state, dispatch)\n}\n","import { selectNodeForward as originalSelectNodeForward } from 'prosemirror-commands'\nimport { Command, RawCommands } from '../types'\n\ndeclare module '@tiptap/core' {\n  interface Commands {\n    selectNodeForward: {\n      /**\n       * Select a node forward.\n       */\n      selectNodeForward: () => Command,\n    }\n  }\n}\n\nexport const selectNodeForward: RawCommands['selectNodeForward'] = () => ({ state, dispatch }) => {\n  return originalSelectNodeForward(state, dispatch)\n}\n","import { selectParentNode as originalSelectParentNode } from 'prosemirror-commands'\nimport { Command, RawCommands } from '../types'\n\ndeclare module '@tiptap/core' {\n  interface Commands {\n    selectParentNode: {\n      /**\n       * Select the parent node.\n       */\n      selectParentNode: () => Command,\n    }\n  }\n}\n\nexport const selectParentNode: RawCommands['selectParentNode'] = () => ({ state, dispatch }) => {\n  return originalSelectParentNode(state, dispatch)\n}\n","import { TextSelection } from 'prosemirror-state'\nimport { ParseOptions } from 'prosemirror-model'\nimport createDocument from '../helpers/createDocument'\nimport { Command, RawCommands, Content } from '../types'\n\ndeclare module '@tiptap/core' {\n  interface Commands {\n    setContent: {\n      /**\n       * Replace the whole document with new content.\n       */\n      setContent: (\n        content: Content,\n        emitUpdate?: boolean,\n        parseOptions?: ParseOptions,\n      ) => Command,\n    }\n  }\n}\n\nexport const setContent: RawCommands['setContent'] = (content, emitUpdate = false, parseOptions = {}) => ({ tr, editor, dispatch }) => {\n  const { doc } = tr\n  const document = createDocument(content, editor.schema, parseOptions)\n  const selection = TextSelection.create(doc, 0, doc.content.size)\n\n  if (dispatch) {\n    tr.setSelection(selection)\n      .replaceSelectionWith(document, false)\n      .setMeta('preventUpdate', !emitUpdate)\n  }\n\n  return true\n}\n","import { MarkType } from 'prosemirror-model'\nimport { Command, RawCommands } from '../types'\nimport getMarkType from '../helpers/getMarkType'\nimport getMarkAttributes from '../helpers/getMarkAttributes'\n\ndeclare module '@tiptap/core' {\n  interface Commands {\n    setMark: {\n      /**\n       * Add a mark with new attributes.\n       */\n      setMark: (typeOrName: string | MarkType, attributes?: Record<string, any>) => Command,\n    }\n  }\n}\n\nexport const setMark: RawCommands['setMark'] = (typeOrName, attributes = {}) => ({ tr, state, dispatch }) => {\n  const { selection } = tr\n  const { empty, ranges } = selection\n  const type = getMarkType(typeOrName, state.schema)\n\n  if (dispatch) {\n    if (empty) {\n      const oldAttributes = getMarkAttributes(state, type)\n\n      tr.addStoredMark(type.create({\n        ...oldAttributes,\n        ...attributes,\n      }))\n    } else {\n      ranges.forEach(range => {\n        const from = range.$from.pos\n        const to = range.$to.pos\n\n        state.doc.nodesBetween(from, to, (node, pos) => {\n          const trimmedFrom = Math.max(pos, from)\n          const trimmedTo = Math.min(pos + node.nodeSize, to)\n          const someHasMark = node.marks.find(mark => mark.type === type)\n\n          // if there is already a mark of this type\n          // we know that we have to merge its attributes\n          // otherwise we add a fresh new mark\n          if (someHasMark) {\n            node.marks.forEach(mark => {\n              if (type === mark.type) {\n                tr.addMark(trimmedFrom, trimmedTo, type.create({\n                  ...mark.attrs,\n                  ...attributes,\n                }))\n              }\n            })\n          } else {\n            tr.addMark(trimmedFrom, trimmedTo, type.create(attributes))\n          }\n        })\n      })\n    }\n  }\n\n  return true\n}\n","import { Command, RawCommands } from '../types'\n\ndeclare module '@tiptap/core' {\n  interface Commands {\n    setMeta: {\n      /**\n       * Store a metadata property in the current transaction.\n       */\n      setMeta: (key: string, value: any) => Command,\n    }\n  }\n}\n\nexport const setMeta: RawCommands['setMeta'] = (key, value) => ({ tr }) => {\n  tr.setMeta(key, value)\n\n  return true\n}\n","import { NodeType } from 'prosemirror-model'\nimport { setBlockType } from 'prosemirror-commands'\nimport { Command, RawCommands } from '../types'\nimport getNodeType from '../helpers/getNodeType'\n\ndeclare module '@tiptap/core' {\n  interface Commands {\n    setNode: {\n      /**\n       * Replace a given range with a node.\n       */\n      setNode: (typeOrName: string | NodeType, attributes?: Record<string, any>) => Command,\n    }\n  }\n}\n\nexport const setNode: RawCommands['setNode'] = (typeOrName, attributes = {}) => ({ state, dispatch }) => {\n  const type = getNodeType(typeOrName, state.schema)\n\n  return setBlockType(type, attributes)(state, dispatch)\n}\n","import { NodeSelection } from 'prosemirror-state'\nimport minMax from '../utilities/minMax'\nimport { Command, RawCommands } from '../types'\n\ndeclare module '@tiptap/core' {\n  interface Commands {\n    setNodeSelection: {\n      /**\n       * Creates a NodeSelection.\n       */\n      setNodeSelection: (position: number) => Command,\n    }\n  }\n}\n\nexport const setNodeSelection: RawCommands['setNodeSelection'] = position => ({ tr, dispatch }) => {\n  if (dispatch) {\n    const { doc } = tr\n    const from = minMax(position, 0, doc.content.size)\n    const selection = NodeSelection.create(doc, from)\n\n    tr.setSelection(selection)\n  }\n\n  return true\n}\n","import { TextSelection } from 'prosemirror-state'\nimport minMax from '../utilities/minMax'\nimport { Command, RawCommands, Range } from '../types'\n\ndeclare module '@tiptap/core' {\n  interface Commands {\n    setTextSelection: {\n      /**\n       * Creates a TextSelection.\n       */\n      setTextSelection: (position: number | Range) => Command,\n    }\n  }\n}\n\nexport const setTextSelection: RawCommands['setTextSelection'] = position => ({ tr, dispatch }) => {\n  if (dispatch) {\n    const { doc } = tr\n    const { from, to } = typeof position === 'number'\n      ? { from: position, to: position }\n      : position\n    const boundedFrom = minMax(from, 0, doc.content.size)\n    const boundedTo = minMax(to, 0, doc.content.size)\n    const selection = TextSelection.create(doc, boundedFrom, boundedTo)\n\n    tr.setSelection(selection)\n  }\n\n  return true\n}\n","import { sinkListItem as originalSinkListItem } from 'prosemirror-schema-list'\nimport { NodeType } from 'prosemirror-model'\nimport { Command, RawCommands } from '../types'\nimport getNodeType from '../helpers/getNodeType'\n\ndeclare module '@tiptap/core' {\n  interface Commands {\n    sinkListItem: {\n      /**\n       * Sink the list item down into an inner list.\n       */\n      sinkListItem: (typeOrName: string | NodeType) => Command,\n    }\n  }\n}\n\nexport const sinkListItem: RawCommands['sinkListItem'] = typeOrName => ({ state, dispatch }) => {\n  const type = getNodeType(typeOrName, state.schema)\n\n  return originalSinkListItem(type)(state, dispatch)\n}\n","import { ExtensionAttribute } from '../types'\n\nexport default function getSplittedAttributes(\n  extensionAttributes: ExtensionAttribute[],\n  typeName: string,\n  attributes: Record<string, any>,\n): Record<string, any> {\n  return Object.fromEntries(Object\n    .entries(attributes)\n    .filter(([name]) => {\n      const extensionAttribute = extensionAttributes.find(item => {\n        return item.type === typeName && item.name === name\n      })\n\n      if (!extensionAttribute) {\n        return false\n      }\n\n      return extensionAttribute.attribute.keepOnSplit\n    }))\n}\n","import { canSplit } from 'prosemirror-transform'\nimport { ContentMatch } from 'prosemirror-model'\nimport { EditorState, NodeSelection, TextSelection } from 'prosemirror-state'\nimport { Command, RawCommands } from '../types'\nimport getSplittedAttributes from '../helpers/getSplittedAttributes'\n\nfunction defaultBlockAt(match: ContentMatch) {\n  for (let i = 0; i < match.edgeCount; i += 1) {\n    const { type } = match.edge(i)\n\n    if (type.isTextblock && !type.hasRequiredAttrs()) {\n      return type\n    }\n  }\n  return null\n}\n\nfunction ensureMarks(state: EditorState, splittableMarks?: string[]) {\n  const marks = state.storedMarks\n    || (state.selection.$to.parentOffset && state.selection.$from.marks())\n\n  if (marks) {\n    const filteredMarks = marks.filter(mark => splittableMarks?.includes(mark.type.name))\n\n    state.tr.ensureMarks(filteredMarks)\n  }\n}\n\ndeclare module '@tiptap/core' {\n  interface Commands {\n    splitBlock: {\n      /**\n       * Forks a new node from an existing node.\n       */\n      splitBlock: (options?: { keepMarks?: boolean }) => Command,\n    }\n  }\n}\n\nexport const splitBlock: RawCommands['splitBlock'] = ({ keepMarks = true } = {}) => ({\n  tr,\n  state,\n  dispatch,\n  editor,\n}) => {\n  const { selection, doc } = tr\n  const { $from, $to } = selection\n  const extensionAttributes = editor.extensionManager.attributes\n  const newAttributes = getSplittedAttributes(\n    extensionAttributes,\n    $from.node().type.name,\n    $from.node().attrs,\n  )\n\n  if (selection instanceof NodeSelection && selection.node.isBlock) {\n    if (!$from.parentOffset || !canSplit(doc, $from.pos)) {\n      return false\n    }\n\n    if (dispatch) {\n      if (keepMarks) {\n        ensureMarks(state, editor.extensionManager.splittableMarks)\n      }\n\n      tr.split($from.pos).scrollIntoView()\n    }\n\n    return true\n  }\n\n  if (!$from.parent.isBlock) {\n    return false\n  }\n\n  if (dispatch) {\n    const atEnd = $to.parentOffset === $to.parent.content.size\n\n    if (selection instanceof TextSelection) {\n      tr.deleteSelection()\n    }\n\n    const deflt = $from.depth === 0\n      ? undefined\n      : defaultBlockAt($from.node(-1).contentMatchAt($from.indexAfter(-1)))\n\n    let types = atEnd && deflt\n      ? [{\n        type: deflt,\n        attrs: newAttributes,\n      }]\n      : undefined\n\n    let can = canSplit(tr.doc, tr.mapping.map($from.pos), 1, types)\n\n    if (\n      !types\n      && !can\n      && canSplit(tr.doc, tr.mapping.map($from.pos), 1, deflt ? [{ type: deflt }] : undefined)\n    ) {\n      can = true\n      types = deflt\n        ? [{\n          type: deflt,\n          attrs: newAttributes,\n        }]\n        : undefined\n    }\n\n    if (can) {\n      tr.split(tr.mapping.map($from.pos), 1, types)\n\n      if (\n        deflt\n        && !atEnd\n        && !$from.parentOffset\n        && $from.parent.type !== deflt\n      ) {\n        const first = tr.mapping.map($from.before())\n        const $first = tr.doc.resolve(first)\n\n        if ($from.parent.canReplaceWith($first.index(), $first.index() + 1, deflt)) {\n          tr.setNodeMarkup(tr.mapping.map($from.before()), deflt)\n        }\n      }\n    }\n\n    if (keepMarks) {\n      ensureMarks(state, editor.extensionManager.splittableMarks)\n    }\n\n    tr.scrollIntoView()\n  }\n\n  return true\n}\n","import {\n  NodeType,\n  Node as ProseMirrorNode,\n  Fragment,\n  Slice,\n} from 'prosemirror-model'\nimport { canSplit } from 'prosemirror-transform'\nimport { TextSelection } from 'prosemirror-state'\nimport { Command, RawCommands } from '../types'\nimport getNodeType from '../helpers/getNodeType'\nimport getSplittedAttributes from '../helpers/getSplittedAttributes'\n\ndeclare module '@tiptap/core' {\n  interface Commands {\n    splitListItem: {\n      /**\n       * Splits one list item into two list items.\n       */\n      splitListItem: (typeOrName: string | NodeType) => Command,\n    }\n  }\n}\n\nexport const splitListItem: RawCommands['splitListItem'] = typeOrName => ({\n  tr, state, dispatch, editor,\n}) => {\n  const type = getNodeType(typeOrName, state.schema)\n  const { $from, $to } = state.selection\n\n  // @ts-ignore\n  // eslint-disable-next-line\n  const node: ProseMirrorNode = state.selection.node\n\n  if ((node && node.isBlock) || $from.depth < 2 || !$from.sameParent($to)) {\n    return false\n  }\n\n  const grandParent = $from.node(-1)\n\n  if (grandParent.type !== type) {\n    return false\n  }\n\n  const extensionAttributes = editor.extensionManager.attributes\n\n  if ($from.parent.content.size === 0 && $from.node(-1).childCount === $from.indexAfter(-1)) {\n    // In an empty block. If this is a nested list, the wrapping\n    // list item should be split. Otherwise, bail out and let next\n    // command handle lifting.\n    if (\n      $from.depth === 2\n      || $from.node(-3).type !== type\n      || $from.index(-2) !== $from.node(-2).childCount - 1\n    ) {\n      return false\n    }\n\n    if (dispatch) {\n      let wrap = Fragment.empty\n      const keepItem = $from.index(-1) > 0\n\n      // Build a fragment containing empty versions of the structure\n      // from the outer list item to the parent node of the cursor\n      for (let d = $from.depth - (keepItem ? 1 : 2); d >= $from.depth - 3; d -= 1) {\n        wrap = Fragment.from($from.node(d).copy(wrap))\n      }\n\n      // Add a second list item with an empty default start node\n      const newNextTypeAttributes = getSplittedAttributes(\n        extensionAttributes,\n        $from.node().type.name,\n        $from.node().attrs,\n      )\n      const nextType = type.contentMatch.defaultType?.createAndFill(newNextTypeAttributes) || undefined\n      wrap = wrap.append(Fragment.from(type.createAndFill(null, nextType) || undefined))\n\n      tr\n        .replace(\n          $from.before(keepItem ? undefined : -1),\n          $from.after(-3),\n          new Slice(wrap, keepItem ? 3 : 2, 2),\n        )\n        .setSelection(TextSelection.near(tr.doc.resolve($from.pos + (keepItem ? 3 : 2))))\n        .scrollIntoView()\n    }\n\n    return true\n  }\n\n  const nextType = $to.pos === $from.end()\n    ? grandParent.contentMatchAt(0).defaultType\n    : null\n\n  const newTypeAttributes = getSplittedAttributes(\n    extensionAttributes,\n    grandParent.type.name,\n    grandParent.attrs,\n  )\n  const newNextTypeAttributes = getSplittedAttributes(\n    extensionAttributes,\n    $from.node().type.name,\n    $from.node().attrs,\n  )\n\n  tr.delete($from.pos, $to.pos)\n\n  const types = nextType\n    ? [{ type, attrs: newTypeAttributes }, { type: nextType, attrs: newNextTypeAttributes }]\n    : [{ type, attrs: newTypeAttributes }]\n\n  if (!canSplit(tr.doc, $from.pos, 2)) {\n    return false\n  }\n\n  if (dispatch) {\n    tr.split($from.pos, 2, types).scrollIntoView()\n  }\n\n  return true\n}\n","import { ResolvedPos, Node as ProseMirrorNode } from 'prosemirror-model'\nimport { Predicate } from '../types'\n\nexport default function findParentNodeClosestToPos($pos: ResolvedPos, predicate: Predicate): ({\n  pos: number,\n  start: number,\n  depth: number,\n  node: ProseMirrorNode,\n} | undefined) {\n  for (let i = $pos.depth; i > 0; i -= 1) {\n    const node = $pos.node(i)\n\n    if (predicate(node)) {\n      return {\n        pos: i > 0 ? $pos.before(i) : 0,\n        start: $pos.start(i),\n        depth: i,\n        node,\n      }\n    }\n  }\n}\n","import { Selection } from 'prosemirror-state'\nimport findParentNodeClosestToPos from './findParentNodeClosestToPos'\nimport { Predicate } from '../types'\n\nexport default function findParentNode(predicate: Predicate) {\n  return (selection: Selection) => findParentNodeClosestToPos(selection.$from, predicate)\n}\n","import { Extensions } from '../types'\nimport { NodeConfig } from '..'\nimport splitExtensions from './splitExtensions'\nimport callOrReturn from '../utilities/callOrReturn'\nimport getExtensionField from '../helpers/getExtensionField'\n\nexport default function isList(name: string, extensions: Extensions): boolean {\n  const { nodeExtensions } = splitExtensions(extensions)\n  const extension = nodeExtensions.find(item => item.name === name)\n\n  if (!extension) {\n    return false\n  }\n\n  const context = {\n    name: extension.name,\n    options: extension.options,\n  }\n  const group = callOrReturn(getExtensionField<NodeConfig['group']>(extension, 'group', context))\n\n  if (typeof group !== 'string') {\n    return false\n  }\n\n  return group.split(' ').includes('list')\n}\n","import { NodeType } from 'prosemirror-model'\nimport { Command, RawCommands } from '../types'\nimport getNodeType from '../helpers/getNodeType'\nimport findParentNode from '../helpers/findParentNode'\nimport isList from '../helpers/isList'\n\ndeclare module '@tiptap/core' {\n  interface Commands {\n    toggleList: {\n      /**\n       * Toggle between different list types.\n       */\n      toggleList: (listTypeOrName: string | NodeType, itemTypeOrName: string | NodeType) => Command,\n    }\n  }\n}\n\nexport const toggleList: RawCommands['toggleList'] = (listTypeOrName, itemTypeOrName) => ({\n  editor, tr, state, dispatch, chain, commands, can,\n}) => {\n  const { extensions } = editor.extensionManager\n  const listType = getNodeType(listTypeOrName, state.schema)\n  const itemType = getNodeType(itemTypeOrName, state.schema)\n  const { selection } = state\n  const { $from, $to } = selection\n  const range = $from.blockRange($to)\n\n  if (!range) {\n    return false\n  }\n\n  const parentList = findParentNode(node => isList(node.type.name, extensions))(selection)\n\n  if (range.depth >= 1 && parentList && range.depth - parentList.depth <= 1) {\n    // remove list\n    if (parentList.node.type === listType) {\n      return commands.liftListItem(itemType)\n    }\n\n    // change list type\n    if (\n      isList(parentList.node.type.name, extensions)\n      && listType.validContent(parentList.node.content)\n      && dispatch\n    ) {\n      tr.setNodeMarkup(parentList.pos, listType)\n\n      return true\n    }\n  }\n\n  const canWrapInList = can().wrapInList(listType)\n\n  // try to convert node to paragraph if needed\n  if (!canWrapInList) {\n    return chain()\n      .clearNodes()\n      .wrapInList(listType)\n      .run()\n  }\n\n  return commands.wrapInList(listType)\n}\n","import { MarkType } from 'prosemirror-model'\nimport { Command, RawCommands } from '../types'\nimport getMarkType from '../helpers/getMarkType'\nimport isMarkActive from '../helpers/isMarkActive'\n\ndeclare module '@tiptap/core' {\n  interface Commands {\n    toggleMark: {\n      /**\n       * Toggle a mark on and off.\n       */\n      toggleMark: (typeOrName: string | MarkType, attributes?: Record<string, any>) => Command,\n    }\n  }\n}\n\nexport const toggleMark: RawCommands['toggleMark'] = (typeOrName, attributes = {}) => ({ state, commands }) => {\n  const type = getMarkType(typeOrName, state.schema)\n  const isActive = isMarkActive(state, type, attributes)\n\n  if (isActive) {\n    return commands.unsetMark(type)\n  }\n\n  return commands.setMark(type, attributes)\n}\n","import { NodeType } from 'prosemirror-model'\nimport { Command, RawCommands } from '../types'\nimport isNodeActive from '../helpers/isNodeActive'\nimport getNodeType from '../helpers/getNodeType'\n\ndeclare module '@tiptap/core' {\n  interface Commands {\n    toggleNode: {\n      /**\n       * Toggle a node with another node.\n       */\n      toggleNode: (typeOrName: string | NodeType, toggleTypeOrName: string | NodeType, attributes?: Record<string, any>) => Command,\n    }\n  }\n}\n\nexport const toggleNode: RawCommands['toggleNode'] = (typeOrName, toggleTypeOrName, attributes = {}) => ({ state, commands }) => {\n  const type = getNodeType(typeOrName, state.schema)\n  const toggleType = getNodeType(toggleTypeOrName, state.schema)\n  const isActive = isNodeActive(state, type, attributes)\n\n  if (isActive) {\n    return commands.setNode(toggleType)\n  }\n\n  return commands.setNode(type, attributes)\n}\n","import { wrapIn, lift } from 'prosemirror-commands'\nimport { NodeType } from 'prosemirror-model'\nimport { Command, RawCommands } from '../types'\nimport isNodeActive from '../helpers/isNodeActive'\nimport getNodeType from '../helpers/getNodeType'\n\ndeclare module '@tiptap/core' {\n  interface Commands {\n    toggleWrap: {\n      /**\n       * Wraps nodes in another node, or removes an existing wrap.\n       */\n      toggleWrap: (typeOrName: string | NodeType, attributes?: Record<string, any>) => Command,\n    }\n  }\n}\n\nexport const toggleWrap: RawCommands['toggleWrap'] = (typeOrName, attributes = {}) => ({ state, dispatch }) => {\n  const type = getNodeType(typeOrName, state.schema)\n  const isActive = isNodeActive(state, type, attributes)\n\n  if (isActive) {\n    return lift(state, dispatch)\n  }\n\n  return wrapIn(type, attributes)(state, dispatch)\n}\n","import { undoInputRule as originalUndoInputRule } from 'prosemirror-inputrules'\nimport { Command, RawCommands } from '../types'\n\ndeclare module '@tiptap/core' {\n  interface Commands {\n    undoInputRule: {\n      /**\n       * Undo an input rule.\n       */\n      undoInputRule: () => Command,\n    }\n  }\n}\n\nexport const undoInputRule: RawCommands['undoInputRule'] = () => ({ state, dispatch }) => {\n  return originalUndoInputRule(state, dispatch)\n}\n","import { Command, RawCommands } from '../types'\n\ndeclare module '@tiptap/core' {\n  interface Commands {\n    unsetAllMarks: {\n      /**\n       * Remove all marks in the current selection.\n       */\n      unsetAllMarks: () => Command,\n    }\n  }\n}\n\nexport const unsetAllMarks: RawCommands['unsetAllMarks'] = () => ({ tr, state, dispatch }) => {\n  const { selection } = tr\n  const { empty, ranges } = selection\n\n  if (empty) {\n    return true\n  }\n\n  if (dispatch) {\n    Object\n      .entries(state.schema.marks)\n      .forEach(([, mark]) => {\n        ranges.forEach(range => {\n          tr.removeMark(range.$from.pos, range.$to.pos, mark as any)\n        })\n      })\n  }\n\n  return true\n}\n","import { MarkType } from 'prosemirror-model'\nimport { Command, RawCommands } from '../types'\nimport getMarkType from '../helpers/getMarkType'\nimport getMarkRange from '../helpers/getMarkRange'\n\ndeclare module '@tiptap/core' {\n  interface Commands {\n    unsetMark: {\n      /**\n       * Remove all marks in the current selection.\n       */\n      unsetMark: (typeOrName: string | MarkType) => Command,\n    }\n  }\n}\n\nexport const unsetMark: RawCommands['unsetMark'] = typeOrName => ({ tr, state, dispatch }) => {\n  const { selection } = tr\n  const type = getMarkType(typeOrName, state.schema)\n  const { $from, empty, ranges } = selection\n\n  if (dispatch) {\n    if (empty) {\n      let { from, to } = selection\n      const range = getMarkRange($from, type)\n\n      if (range) {\n        from = range.from\n        to = range.to\n      }\n\n      tr.removeMark(from, to, type)\n    } else {\n      ranges.forEach(range => {\n        tr.removeMark(range.$from.pos, range.$to.pos, type)\n      })\n    }\n\n    tr.removeStoredMark(type)\n  }\n\n  return true\n}\n","import { NodeType, MarkType } from 'prosemirror-model'\nimport getNodeType from '../helpers/getNodeType'\nimport getMarkType from '../helpers/getMarkType'\nimport getSchemaTypeNameByName from '../helpers/getSchemaTypeNameByName'\nimport { Command, RawCommands } from '../types'\n\ndeclare module '@tiptap/core' {\n  interface Commands {\n    updateAttributes: {\n      /**\n       * Update attributes of a node or mark.\n       */\n      updateAttributes: (typeOrName: string | NodeType | MarkType, attributes: Record<string, any>) => Command,\n    }\n  }\n}\n\nexport const updateAttributes: RawCommands['updateAttributes'] = (typeOrName, attributes = {}) => ({ tr, state, dispatch }) => {\n  let nodeType: NodeType | null = null\n  let markType: MarkType | null = null\n\n  const schemaType = getSchemaTypeNameByName(\n    typeof typeOrName === 'string'\n      ? typeOrName\n      : typeOrName.name,\n    state.schema,\n  )\n\n  if (!schemaType) {\n    return false\n  }\n\n  if (schemaType === 'node') {\n    nodeType = getNodeType(typeOrName as NodeType, state.schema)\n  }\n\n  if (schemaType === 'mark') {\n    markType = getMarkType(typeOrName as MarkType, state.schema)\n  }\n\n  if (dispatch) {\n    tr.selection.ranges.forEach(range => {\n      const from = range.$from.pos\n      const to = range.$to.pos\n\n      state.doc.nodesBetween(from, to, (node, pos) => {\n        if (nodeType && nodeType === node.type) {\n          tr.setNodeMarkup(pos, undefined, {\n            ...node.attrs,\n            ...attributes,\n          })\n        }\n\n        if (markType && node.marks.length) {\n          node.marks.forEach(mark => {\n            if (markType === mark.type) {\n              const trimmedFrom = Math.max(pos, from)\n              const trimmedTo = Math.min(pos + node.nodeSize, to)\n\n              tr.addMark(trimmedFrom, trimmedTo, markType.create({\n                ...mark.attrs,\n                ...attributes,\n              }))\n            }\n          })\n        }\n      })\n    })\n  }\n\n  return true\n}\n","import { wrapIn as originalWrapIn } from 'prosemirror-commands'\nimport { NodeType } from 'prosemirror-model'\nimport { Command, RawCommands } from '../types'\nimport isNodeActive from '../helpers/isNodeActive'\nimport getNodeType from '../helpers/getNodeType'\n\ndeclare module '@tiptap/core' {\n  interface Commands {\n    wrapIn: {\n      /**\n       * Wraps nodes in another node.\n       */\n      wrapIn: (typeOrName: string | NodeType, attributes?: Record<string, any>) => Command,\n    }\n  }\n}\n\nexport const wrapIn: RawCommands['wrapIn'] = (typeOrName, attributes = {}) => ({ state, dispatch }) => {\n  const type = getNodeType(typeOrName, state.schema)\n  const isActive = isNodeActive(state, type, attributes)\n\n  if (isActive) {\n    return false\n  }\n\n  return originalWrapIn(type, attributes)(state, dispatch)\n}\n","import { wrapInList as originalWrapInList } from 'prosemirror-schema-list'\nimport { NodeType } from 'prosemirror-model'\nimport { Command, RawCommands } from '../types'\nimport getNodeType from '../helpers/getNodeType'\n\ndeclare module '@tiptap/core' {\n  interface Commands {\n    wrapInList: {\n      /**\n       * Wrap a node in a list.\n       */\n      wrapInList: (typeOrName: string | NodeType, attributes?: Record<string, any>) => Command,\n    }\n  }\n}\n\nexport const wrapInList: RawCommands['wrapInList'] = (typeOrName, attributes = {}) => ({ state, dispatch }) => {\n  const type = getNodeType(typeOrName, state.schema)\n\n  return originalWrapInList(type, attributes)(state, dispatch)\n}\n","import { Extension } from '../Extension'\nimport * as blur from '../commands/blur'\nimport * as clearContent from '../commands/clearContent'\nimport * as clearNodes from '../commands/clearNodes'\nimport * as command from '../commands/command'\nimport * as createParagraphNear from '../commands/createParagraphNear'\nimport * as deleteRange from '../commands/deleteRange'\nimport * as deleteSelection from '../commands/deleteSelection'\nimport * as enter from '../commands/enter'\nimport * as exitCode from '../commands/exitCode'\nimport * as extendMarkRange from '../commands/extendMarkRange'\nimport * as first from '../commands/first'\nimport * as focus from '../commands/focus'\nimport * as insertContent from '../commands/insertContent'\nimport * as insertContentAt from '../commands/insertContentAt'\nimport * as joinBackward from '../commands/joinBackward'\nimport * as joinForward from '../commands/joinForward'\nimport * as keyboardShortcut from '../commands/keyboardShortcut'\nimport * as lift from '../commands/lift'\nimport * as liftEmptyBlock from '../commands/liftEmptyBlock'\nimport * as liftListItem from '../commands/liftListItem'\nimport * as newlineInCode from '../commands/newlineInCode'\nimport * as replace from '../commands/replace'\nimport * as replaceRange from '../commands/replaceRange'\nimport * as resetAttributes from '../commands/resetAttributes'\nimport * as scrollIntoView from '../commands/scrollIntoView'\nimport * as selectAll from '../commands/selectAll'\nimport * as selectNodeBackward from '../commands/selectNodeBackward'\nimport * as selectNodeForward from '../commands/selectNodeForward'\nimport * as selectParentNode from '../commands/selectParentNode'\nimport * as setContent from '../commands/setContent'\nimport * as setMark from '../commands/setMark'\nimport * as setMeta from '../commands/setMeta'\nimport * as setNode from '../commands/setNode'\nimport * as setNodeSelection from '../commands/setNodeSelection'\nimport * as setTextSelection from '../commands/setTextSelection'\nimport * as sinkListItem from '../commands/sinkListItem'\nimport * as splitBlock from '../commands/splitBlock'\nimport * as splitListItem from '../commands/splitListItem'\nimport * as toggleList from '../commands/toggleList'\nimport * as toggleMark from '../commands/toggleMark'\nimport * as toggleNode from '../commands/toggleNode'\nimport * as toggleWrap from '../commands/toggleWrap'\nimport * as undoInputRule from '../commands/undoInputRule'\nimport * as unsetAllMarks from '../commands/unsetAllMarks'\nimport * as unsetMark from '../commands/unsetMark'\nimport * as updateAttributes from '../commands/updateAttributes'\nimport * as wrapIn from '../commands/wrapIn'\nimport * as wrapInList from '../commands/wrapInList'\n\nexport { blur }\nexport { clearContent }\nexport { clearNodes }\nexport { command }\nexport { createParagraphNear }\nexport { deleteRange }\nexport { deleteSelection }\nexport { enter }\nexport { exitCode }\nexport { extendMarkRange }\nexport { first }\nexport { focus }\nexport { insertContent }\nexport { insertContentAt }\nexport { joinBackward }\nexport { joinForward }\nexport { keyboardShortcut }\nexport { lift }\nexport { liftEmptyBlock }\nexport { liftListItem }\nexport { newlineInCode }\nexport { replace }\nexport { replaceRange }\nexport { resetAttributes }\nexport { scrollIntoView }\nexport { selectAll }\nexport { selectNodeBackward }\nexport { selectNodeForward }\nexport { selectParentNode }\nexport { setContent }\nexport { setMark }\nexport { setMeta }\nexport { setNode }\nexport { setNodeSelection }\nexport { setTextSelection }\nexport { sinkListItem }\nexport { splitBlock }\nexport { splitListItem }\nexport { toggleList }\nexport { toggleMark }\nexport { toggleNode }\nexport { toggleWrap }\nexport { undoInputRule }\nexport { unsetAllMarks }\nexport { unsetMark }\nexport { updateAttributes }\nexport { wrapIn }\nexport { wrapInList }\n\nexport const Commands = Extension.create({\n  name: 'commands',\n\n  addCommands() {\n    return {\n      ...blur,\n      ...clearContent,\n      ...clearNodes,\n      ...command,\n      ...createParagraphNear,\n      ...deleteRange,\n      ...deleteSelection,\n      ...enter,\n      ...exitCode,\n      ...extendMarkRange,\n      ...first,\n      ...focus,\n      ...insertContent,\n      ...insertContentAt,\n      ...joinBackward,\n      ...joinForward,\n      ...keyboardShortcut,\n      ...lift,\n      ...liftEmptyBlock,\n      ...liftListItem,\n      ...newlineInCode,\n      ...replace,\n      ...replaceRange,\n      ...resetAttributes,\n      ...scrollIntoView,\n      ...selectAll,\n      ...selectNodeBackward,\n      ...selectNodeForward,\n      ...selectParentNode,\n      ...setContent,\n      ...setMark,\n      ...setMeta,\n      ...setNode,\n      ...setNodeSelection,\n      ...setTextSelection,\n      ...sinkListItem,\n      ...splitBlock,\n      ...splitListItem,\n      ...toggleList,\n      ...toggleMark,\n      ...toggleNode,\n      ...toggleWrap,\n      ...undoInputRule,\n      ...unsetAllMarks,\n      ...unsetMark,\n      ...updateAttributes,\n      ...wrapIn,\n      ...wrapInList,\n    }\n  },\n})\n","import { Plugin, PluginKey } from 'prosemirror-state'\nimport { Extension } from '../Extension'\n\nexport const Editable = Extension.create({\n  name: 'editable',\n\n  addProseMirrorPlugins() {\n    return [\n      new Plugin({\n        key: new PluginKey('editable'),\n        props: {\n          editable: () => this.editor.options.editable,\n        },\n      }),\n    ]\n  },\n})\n","import { Plugin, PluginKey } from 'prosemirror-state'\nimport { Extension } from '../Extension'\n\nexport const FocusEvents = Extension.create({\n  name: 'focusEvents',\n\n  addProseMirrorPlugins() {\n    const { editor } = this\n\n    return [\n      new Plugin({\n        key: new PluginKey('focusEvents'),\n        props: {\n          attributes: {\n            tabindex: '0',\n          },\n          handleDOMEvents: {\n            focus: (view, event) => {\n              editor.isFocused = true\n\n              const transaction = editor.state.tr\n                .setMeta('focus', { event })\n                .setMeta('addToHistory', false)\n\n              view.dispatch(transaction)\n\n              return false\n            },\n            blur: (view, event) => {\n              editor.isFocused = false\n\n              const transaction = editor.state.tr\n                .setMeta('blur', { event })\n                .setMeta('addToHistory', false)\n\n              view.dispatch(transaction)\n\n              return false\n            },\n          },\n        },\n      }),\n    ]\n  },\n})\n","import { Extension } from '../Extension'\n\nexport const Keymap = Extension.create({\n  name: 'keymap',\n\n  addKeyboardShortcuts() {\n    const handleBackspace = () => this.editor.commands.first(({ commands }) => [\n      () => commands.undoInputRule(),\n      () => commands.deleteSelection(),\n      () => commands.joinBackward(),\n      () => commands.selectNodeBackward(),\n    ])\n\n    const handleDelete = () => this.editor.commands.first(({ commands }) => [\n      () => commands.deleteSelection(),\n      () => commands.joinForward(),\n      () => commands.selectNodeForward(),\n    ])\n\n    return {\n      Enter: () => this.editor.commands.first(({ commands }) => [\n        () => commands.newlineInCode(),\n        () => commands.createParagraphNear(),\n        () => commands.liftEmptyBlock(),\n        () => commands.splitBlock(),\n      ]),\n      'Mod-Enter': () => this.editor.commands.exitCode(),\n      Backspace: () => handleBackspace(),\n      'Mod-Backspace': () => handleBackspace(),\n      Delete: () => handleDelete(),\n      'Mod-Delete': () => handleDelete(),\n      // we don’t need a custom `selectAll` for now\n      // 'Mod-a': () => this.editor.commands.selectAll(),\n    }\n  },\n})\n","const style = `.ProseMirror {\n  position: relative;\n}\n\n.ProseMirror {\n  word-wrap: break-word;\n  white-space: pre-wrap;\n  -webkit-font-variant-ligatures: none;\n  font-variant-ligatures: none;\n}\n\n.ProseMirror [contenteditable=\"false\"] {\n  white-space: normal;\n}\n\n.ProseMirror [contenteditable=\"false\"] [contenteditable=\"true\"] {\n  white-space: pre-wrap;\n}\n\n.ProseMirror pre {\n  white-space: pre-wrap;\n}\n\n.ProseMirror-gapcursor {\n  display: none;\n  pointer-events: none;\n  position: absolute;\n}\n\n.ProseMirror-gapcursor:after {\n  content: \"\";\n  display: block;\n  position: absolute;\n  top: -2px;\n  width: 20px;\n  border-top: 1px solid black;\n  animation: ProseMirror-cursor-blink 1.1s steps(2, start) infinite;\n}\n\n@keyframes ProseMirror-cursor-blink {\n  to {\n    visibility: hidden;\n  }\n}\n\n.ProseMirror-hideselection *::selection {\n  background: transparent;\n}\n\n.ProseMirror-hideselection *::-moz-selection {\n  background: transparent;\n}\n\n.ProseMirror-hideselection * {\n  caret-color: transparent;\n}\n\n.ProseMirror-focused .ProseMirror-gapcursor {\n  display: block;\n}\n\n.tippy-box[data-animation=fade][data-state=hidden] {\n  opacity: 0\n}`\n\nexport default style\n","import {\n  EditorState,\n  Plugin,\n  PluginKey,\n  Transaction,\n} from 'prosemirror-state'\nimport { EditorView } from 'prosemirror-view'\nimport { Schema, MarkType, NodeType } from 'prosemirror-model'\nimport getAttributes from './helpers/getAttributes'\nimport getNodeAttributes from './helpers/getNodeAttributes'\nimport getMarkAttributes from './helpers/getMarkAttributes'\nimport isActive from './helpers/isActive'\nimport removeElement from './utilities/removeElement'\nimport createDocument from './helpers/createDocument'\nimport getHTMLFromFragment from './helpers/getHTMLFromFragment'\nimport isNodeEmpty from './helpers/isNodeEmpty'\nimport createStyleTag from './utilities/createStyleTag'\nimport CommandManager from './CommandManager'\nimport ExtensionManager from './ExtensionManager'\nimport EventEmitter from './EventEmitter'\nimport {\n  EditorOptions,\n  CanCommands,\n  ChainedCommands,\n  SingleCommands,\n} from './types'\nimport * as extensions from './extensions'\nimport style from './style'\n\nexport { extensions }\n\nexport interface HTMLElement {\n  editor?: Editor\n}\n\nexport class Editor extends EventEmitter {\n\n  private commandManager!: CommandManager\n\n  public extensionManager!: ExtensionManager\n\n  private css!: HTMLStyleElement\n\n  public schema!: Schema\n\n  public view!: EditorView\n\n  public isFocused = false\n\n  public options: EditorOptions = {\n    element: document.createElement('div'),\n    content: '',\n    injectCSS: true,\n    extensions: [],\n    autofocus: false,\n    editable: true,\n    editorProps: {},\n    parseOptions: {},\n    enableInputRules: true,\n    enablePasteRules: true,\n    onBeforeCreate: () => null,\n    onCreate: () => null,\n    onUpdate: () => null,\n    onSelectionUpdate: () => null,\n    onTransaction: () => null,\n    onFocus: () => null,\n    onBlur: () => null,\n    onDestroy: () => null,\n  }\n\n  constructor(options: Partial<EditorOptions> = {}) {\n    super()\n    this.setOptions(options)\n    this.createExtensionManager()\n    this.createCommandManager()\n    this.createSchema()\n    this.on('beforeCreate', this.options.onBeforeCreate)\n    this.emit('beforeCreate', { editor: this })\n    this.createView()\n    this.injectCSS()\n    this.on('create', this.options.onCreate)\n    this.on('update', this.options.onUpdate)\n    this.on('selectionUpdate', this.options.onSelectionUpdate)\n    this.on('transaction', this.options.onTransaction)\n    this.on('focus', this.options.onFocus)\n    this.on('blur', this.options.onBlur)\n    this.on('destroy', this.options.onDestroy)\n\n    window.setTimeout(() => {\n      if (this.isDestroyed) {\n        return\n      }\n\n      this.commands.focus(this.options.autofocus)\n      this.emit('create', { editor: this })\n    }, 0)\n  }\n\n  /**\n   * An object of all registered commands.\n   */\n  public get commands(): SingleCommands {\n    return this.commandManager.createCommands()\n  }\n\n  /**\n   * Create a command chain to call multiple commands at once.\n   */\n  public chain(): ChainedCommands {\n    return this.commandManager.createChain()\n  }\n\n  /**\n   * Check if a command or a command chain can be executed. Without executing it.\n   */\n  public can(): CanCommands {\n    return this.commandManager.createCan()\n  }\n\n  /**\n   * Inject CSS styles.\n   */\n  private injectCSS(): void {\n    if (this.options.injectCSS && document) {\n      this.css = createStyleTag(style)\n    }\n  }\n\n  /**\n   * Update editor options.\n   *\n   * @param options A list of options\n   */\n  public setOptions(options: Partial<EditorOptions> = {}): void {\n    this.options = { ...this.options, ...options }\n  }\n\n  /**\n   * Update editable state of the editor.\n   */\n  public setEditable(editable: boolean): void {\n    this.setOptions({ editable })\n\n    if (this.view && this.state && !this.isDestroyed) {\n      this.view.updateState(this.state)\n    }\n  }\n\n  /**\n   * Returns whether the editor is editable.\n   */\n  public get isEditable(): boolean {\n    return this.view && this.view.editable\n  }\n\n  /**\n   * Returns the editor state.\n   */\n  public get state(): EditorState {\n    return this.view.state\n  }\n\n  /**\n   * Register a ProseMirror plugin.\n   *\n   * @param plugin A ProseMirror plugin\n   * @param handlePlugins Control how to merge the plugin into the existing plugins.\n   */\n  public registerPlugin(plugin: Plugin, handlePlugins?: (newPlugin: Plugin, plugins: Plugin[]) => Plugin[]): void {\n    const plugins = typeof handlePlugins === 'function'\n      ? handlePlugins(plugin, this.state.plugins)\n      : [...this.state.plugins, plugin]\n\n    const state = this.state.reconfigure({ plugins })\n\n    this.view.updateState(state)\n  }\n\n  /**\n   * Unregister a ProseMirror plugin.\n   *\n   * @param name The plugins name\n   */\n  public unregisterPlugin(nameOrPluginKey: string | PluginKey): void {\n    if (this.isDestroyed) {\n      return\n    }\n\n    const name = typeof nameOrPluginKey === 'string'\n      ? `${nameOrPluginKey}$`\n      // @ts-ignore\n      : nameOrPluginKey.key\n\n    const state = this.state.reconfigure({\n      // @ts-ignore\n      plugins: this.state.plugins.filter(plugin => !plugin.key.startsWith(name)),\n    })\n\n    this.view.updateState(state)\n  }\n\n  /**\n   * Creates an extension manager.\n   */\n  private createExtensionManager(): void {\n    const coreExtensions = Object.entries(extensions).map(([, extension]) => extension)\n    const allExtensions = [...coreExtensions, ...this.options.extensions].filter(extension => {\n      return ['extension', 'node', 'mark'].includes(extension?.type)\n    })\n\n    this.extensionManager = new ExtensionManager(allExtensions, this)\n  }\n\n  /**\n   * Creates an command manager.\n   */\n  private createCommandManager(): void {\n    this.commandManager = new CommandManager(this, this.extensionManager.commands)\n  }\n\n  /**\n   * Creates a ProseMirror schema.\n   */\n  private createSchema(): void {\n    this.schema = this.extensionManager.schema\n  }\n\n  /**\n   * Creates a ProseMirror view.\n   */\n  private createView(): void {\n    this.view = new EditorView(this.options.element, {\n      ...this.options.editorProps,\n      dispatchTransaction: this.dispatchTransaction.bind(this),\n      state: EditorState.create({\n        doc: createDocument(this.options.content, this.schema, this.options.parseOptions),\n      }),\n    })\n\n    // `editor.view` is not yet available at this time.\n    // Therefore we will add all plugins and node views directly afterwards.\n    const newState = this.state.reconfigure({\n      plugins: this.extensionManager.plugins,\n    })\n\n    this.view.updateState(newState)\n\n    this.createNodeViews()\n\n    // Let’s store the editor instance in the DOM element.\n    // So we’ll have access to it for tests.\n    const dom = this.view.dom as HTMLElement\n    dom.editor = this\n  }\n\n  /**\n   * Creates all node views.\n   */\n  public createNodeViews(): void {\n    this.view.setProps({\n      nodeViews: this.extensionManager.nodeViews,\n    })\n  }\n\n  public isCapturingTransaction = false\n\n  private capturedTransaction: Transaction | null = null\n\n  public captureTransaction(fn: Function) {\n    this.isCapturingTransaction = true\n    fn()\n    this.isCapturingTransaction = false\n\n    const tr = this.capturedTransaction\n\n    this.capturedTransaction = null\n\n    return tr\n  }\n\n  /**\n   * The callback over which to send transactions (state updates) produced by the view.\n   *\n   * @param transaction An editor state transaction\n   */\n  private dispatchTransaction(transaction: Transaction): void {\n    if (this.isCapturingTransaction) {\n      if (!this.capturedTransaction) {\n        this.capturedTransaction = transaction\n\n        return\n      }\n\n      transaction.steps.forEach(step => this.capturedTransaction?.step(step))\n\n      return\n    }\n\n    const state = this.state.apply(transaction)\n    const selectionHasChanged = !this.state.selection.eq(state.selection)\n\n    this.view.updateState(state)\n    this.emit('transaction', {\n      editor: this,\n      transaction,\n    })\n\n    if (selectionHasChanged) {\n      this.emit('selectionUpdate', {\n        editor: this,\n      })\n    }\n\n    const focus = transaction.getMeta('focus')\n    const blur = transaction.getMeta('blur')\n\n    if (focus) {\n      this.emit('focus', {\n        editor: this,\n        event: focus.event,\n      })\n    }\n\n    if (blur) {\n      this.emit('blur', {\n        editor: this,\n        event: blur.event,\n      })\n    }\n\n    if (!transaction.docChanged || transaction.getMeta('preventUpdate')) {\n      return\n    }\n\n    this.emit('update', {\n      editor: this,\n      transaction,\n    })\n  }\n\n  /**\n   * Get attributes of the currently selected node or mark.\n   */\n  public getAttributes(nameOrType: string | NodeType | MarkType): Record<string, any> {\n    return getAttributes(this.state, nameOrType)\n  }\n\n  /**\n   * Get attributes of the currently selected node.\n   *\n   * @param name Name of the node\n   */\n  public getNodeAttributes(name: string): Record<string, any> {\n    console.warn('[tiptap warn]: editor.getNodeAttributes() is deprecated. please use editor.getAttributes() instead.')\n\n    return getNodeAttributes(this.state, name)\n  }\n\n  /**\n   * Get attributes of the currently selected mark.\n   *\n   * @param name Name of the mark\n   */\n  public getMarkAttributes(name: string): Record<string, any> {\n    console.warn('[tiptap warn]: editor.getMarkAttributes() is deprecated. please use editor.getAttributes() instead.')\n\n    return getMarkAttributes(this.state, name)\n  }\n\n  /**\n   * Returns if the currently selected node or mark is active.\n   *\n   * @param name Name of the node or mark\n   * @param attributes Attributes of the node or mark\n   */\n  public isActive(name: string, attributes?: {}): boolean;\n  public isActive(attributes: {}): boolean;\n  public isActive(nameOrAttributes: string, attributesOrUndefined?: {}): boolean {\n    const name = typeof nameOrAttributes === 'string'\n      ? nameOrAttributes\n      : null\n\n    const attributes = typeof nameOrAttributes === 'string'\n      ? attributesOrUndefined\n      : nameOrAttributes\n\n    return isActive(this.state, name, attributes)\n  }\n\n  /**\n   * Get the document as JSON.\n   */\n  public getJSON(): Record<string, any> {\n    return this.state.doc.toJSON()\n  }\n\n  /**\n   * Get the document as HTML.\n   */\n  public getHTML(): string {\n    return getHTMLFromFragment(this.state.doc, this.schema)\n  }\n\n  /**\n   * Check if there is no content.\n   */\n  public get isEmpty(): boolean {\n    return isNodeEmpty(this.state.doc)\n  }\n\n  /**\n   * Get the number of characters for the current document.\n   */\n  public getCharacterCount(): number {\n    return this.state.doc.content.size - 2\n  }\n\n  /**\n   * Destroy the editor.\n   */\n  public destroy(): void {\n    this.emit('destroy')\n\n    if (this.view) {\n      this.view.destroy()\n    }\n\n    this.removeAllListeners()\n    removeElement(this.css)\n  }\n\n  /**\n   * Check if the editor is already destroyed.\n   */\n  public get isDestroyed(): boolean {\n    // @ts-ignore\n    return !this.view?.docView\n  }\n\n}\n","import {\n  DOMOutputSpec,\n  NodeSpec,\n  Node as ProseMirrorNode,\n  NodeType,\n} from 'prosemirror-model'\nimport { Plugin, Transaction } from 'prosemirror-state'\nimport { InputRule } from 'prosemirror-inputrules'\nimport mergeDeep from './utilities/mergeDeep'\nimport {\n  Extensions,\n  Attributes,\n  NodeViewRenderer,\n  GlobalAttributes,\n  RawCommands,\n  ParentConfig,\n  KeyboardShortcutCommand,\n} from './types'\nimport { NodeConfig } from '.'\nimport { Editor } from './Editor'\n\ndeclare module '@tiptap/core' {\n  interface NodeConfig<Options = any> {\n    [key: string]: any;\n\n    /**\n     * Name\n     */\n    name: string,\n\n    /**\n     * Priority\n     */\n    priority?: number,\n\n    /**\n     * Default options\n     */\n    defaultOptions?: Options,\n\n    /**\n     * Global attributes\n     */\n    addGlobalAttributes?: (this: {\n      name: string,\n      options: Options,\n      parent: ParentConfig<NodeConfig<Options>>['addGlobalAttributes'],\n    }) => GlobalAttributes | {},\n\n    /**\n     * Raw\n     */\n    addCommands?: (this: {\n      name: string,\n      options: Options,\n      editor: Editor,\n      type: NodeType,\n      parent: ParentConfig<NodeConfig<Options>>['addCommands'],\n    }) => Partial<RawCommands>,\n\n    /**\n     * Keyboard shortcuts\n     */\n    addKeyboardShortcuts?: (this: {\n      name: string,\n      options: Options,\n      editor: Editor,\n      type: NodeType,\n      parent: ParentConfig<NodeConfig<Options>>['addKeyboardShortcuts'],\n    }) => {\n      [key: string]: KeyboardShortcutCommand,\n    },\n\n    /**\n     * Input rules\n     */\n    addInputRules?: (this: {\n      name: string,\n      options: Options,\n      editor: Editor,\n      type: NodeType,\n      parent: ParentConfig<NodeConfig<Options>>['addInputRules'],\n    }) => InputRule[],\n\n    /**\n     * Paste rules\n     */\n    addPasteRules?: (this: {\n      name: string,\n      options: Options,\n      editor: Editor,\n      type: NodeType,\n      parent: ParentConfig<NodeConfig<Options>>['addPasteRules'],\n    }) => Plugin[],\n\n    /**\n     * ProseMirror plugins\n     */\n    addProseMirrorPlugins?: (this: {\n      name: string,\n      options: Options,\n      editor: Editor,\n      type: NodeType,\n      parent: ParentConfig<NodeConfig<Options>>['addProseMirrorPlugins'],\n    }) => Plugin[],\n\n    /**\n     * Extensions\n     */\n    addExtensions?: (this: {\n      name: string,\n      options: Options,\n      parent: ParentConfig<NodeConfig<Options>>['addExtensions'],\n    }) => Extensions,\n\n    /**\n     * Extend Node Schema\n     */\n    extendNodeSchema?: ((\n      this: {\n        name: string,\n        options: Options,\n        parent: ParentConfig<NodeConfig<Options>>['extendNodeSchema'],\n      },\n      extension: Node,\n    ) => Record<string, any>) | null,\n\n    /**\n     * Extend Mark Schema\n     */\n    extendMarkSchema?: ((\n      this: {\n        name: string,\n        options: Options,\n        parent: ParentConfig<NodeConfig<Options>>['extendMarkSchema'],\n      },\n      extension: Node,\n    ) => Record<string, any>) | null,\n\n    /**\n     * The editor is not ready yet.\n     */\n    onBeforeCreate?: ((this: {\n      name: string,\n      options: Options,\n      editor: Editor,\n      type: NodeType,\n      parent: ParentConfig<NodeConfig<Options>>['onBeforeCreate'],\n    }) => void) | null,\n\n    /**\n     * The editor is ready.\n     */\n    onCreate?: ((this: {\n      name: string,\n      options: Options,\n      editor: Editor,\n      type: NodeType,\n      parent: ParentConfig<NodeConfig<Options>>['onCreate'],\n    }) => void) | null,\n\n    /**\n     * The content has changed.\n     */\n    onUpdate?: ((this: {\n      name: string,\n      options: Options,\n      editor: Editor,\n      type: NodeType,\n      parent: ParentConfig<NodeConfig<Options>>['onUpdate'],\n    }) => void) | null,\n\n    /**\n     * The selection has changed.\n     */\n    onSelectionUpdate?: ((this: {\n      name: string,\n      options: Options,\n      editor: Editor,\n      type: NodeType,\n      parent: ParentConfig<NodeConfig<Options>>['onSelectionUpdate'],\n    }) => void) | null,\n\n    /**\n     * The editor state has changed.\n     */\n    onTransaction?: ((\n      this: {\n        name: string,\n        options: Options,\n        editor: Editor,\n        type: NodeType,\n        parent: ParentConfig<NodeConfig<Options>>['onTransaction'],\n      },\n      props: {\n        transaction: Transaction,\n      },\n    ) => void) | null,\n\n    /**\n     * The editor is focused.\n     */\n    onFocus?: ((\n      this: {\n        name: string,\n        options: Options,\n        editor: Editor,\n        type: NodeType,\n        parent: ParentConfig<NodeConfig<Options>>['onFocus'],\n      },\n      props: {\n        event: FocusEvent,\n      },\n    ) => void) | null,\n\n    /**\n     * The editor isn’t focused anymore.\n     */\n    onBlur?: ((\n      this: {\n        name: string,\n        options: Options,\n        editor: Editor,\n        type: NodeType,\n        parent: ParentConfig<NodeConfig<Options>>['onBlur'],\n      },\n      props: {\n        event: FocusEvent,\n      },\n    ) => void) | null,\n\n    /**\n     * The editor is destroyed.\n     */\n    onDestroy?: ((this: {\n      name: string,\n      options: Options,\n      editor: Editor,\n      type: NodeType,\n      parent: ParentConfig<NodeConfig<Options>>['onDestroy'],\n    }) => void) | null,\n\n    /**\n     * Node View\n     */\n    addNodeView?: ((this: {\n      name: string,\n      options: Options,\n      editor: Editor,\n      type: NodeType,\n      parent: ParentConfig<NodeConfig<Options>>['addNodeView'],\n    }) => NodeViewRenderer) | null,\n\n    /**\n     * TopNode\n     */\n    topNode?: boolean,\n\n    /**\n     * Content\n     */\n    content?: NodeSpec['content'] | ((this: {\n      name: string,\n      options: Options,\n      parent: ParentConfig<NodeConfig<Options>>['content'],\n    }) => NodeSpec['content']),\n\n    /**\n     * Marks\n     */\n    marks?: NodeSpec['marks'] | ((this: {\n      name: string,\n      options: Options,\n      parent: ParentConfig<NodeConfig<Options>>['marks'],\n    }) => NodeSpec['marks']),\n\n    /**\n     * Group\n     */\n    group?: NodeSpec['group'] | ((this: {\n      name: string,\n      options: Options,\n      parent: ParentConfig<NodeConfig<Options>>['group'],\n    }) => NodeSpec['group']),\n\n    /**\n     * Inline\n     */\n    inline?: NodeSpec['inline'] | ((this: {\n      name: string,\n      options: Options,\n      parent: ParentConfig<NodeConfig<Options>>['inline'],\n    }) => NodeSpec['inline']),\n\n    /**\n     * Atom\n     */\n    atom?: NodeSpec['atom'] | ((this: {\n      name: string,\n      options: Options,\n      parent: ParentConfig<NodeConfig<Options>>['atom'],\n    }) => NodeSpec['atom']),\n\n    /**\n     * Selectable\n     */\n    selectable?: NodeSpec['selectable'] | ((this: {\n      name: string,\n      options: Options,\n      parent: ParentConfig<NodeConfig<Options>>['selectable'],\n    }) => NodeSpec['selectable']),\n\n    /**\n     * Draggable\n     */\n    draggable?: NodeSpec['draggable'] | ((this: {\n      name: string,\n      options: Options,\n      parent: ParentConfig<NodeConfig<Options>>['draggable'],\n    }) => NodeSpec['draggable']),\n\n    /**\n     * Code\n     */\n    code?: NodeSpec['code'] | ((this: {\n      name: string,\n      options: Options,\n      parent: ParentConfig<NodeConfig<Options>>['code'],\n    }) => NodeSpec['code']),\n\n    /**\n     * Defining\n     */\n    defining?: NodeSpec['defining'] | ((this: {\n      name: string,\n      options: Options,\n      parent: ParentConfig<NodeConfig<Options>>['defining'],\n    }) => NodeSpec['defining']),\n\n    /**\n     * Isolating\n     */\n    isolating?: NodeSpec['isolating'] | ((this: {\n      name: string,\n      options: Options,\n      parent: ParentConfig<NodeConfig<Options>>['isolating'],\n    }) => NodeSpec['isolating']),\n\n    /**\n     * Parse HTML\n     */\n    parseHTML?: (\n      this: {\n        name: string,\n        options: Options,\n        parent: ParentConfig<NodeConfig<Options>>['parseHTML'],\n      },\n    ) => NodeSpec['parseDOM'],\n\n    /**\n     * Render HTML\n     */\n    renderHTML?: ((\n      this: {\n        name: string,\n        options: Options,\n        parent: ParentConfig<NodeConfig<Options>>['renderHTML'],\n      },\n      props: {\n        node: ProseMirrorNode,\n        HTMLAttributes: Record<string, any>,\n      }\n    ) => DOMOutputSpec) | null,\n\n    /**\n     * Render Text\n     */\n    renderText?: ((\n      this: {\n        name: string,\n        options: Options,\n        editor: Editor,\n        type: NodeType,\n        parent: ParentConfig<NodeConfig<Options>>['renderText'],\n      },\n      props: {\n        node: ProseMirrorNode,\n      }\n    ) => string) | null,\n\n    /**\n     * Add Attributes\n     */\n    addAttributes?: (\n      this: {\n        name: string,\n        options: Options,\n        parent: ParentConfig<NodeConfig<Options>>['addAttributes'],\n      },\n    ) => Attributes | {},\n  }\n}\n\nexport class Node<Options = any> {\n  type = 'node'\n\n  name = 'node'\n\n  parent: Node | null = null\n\n  child: Node | null = null\n\n  options: Options\n\n  config: NodeConfig = {\n    name: this.name,\n    defaultOptions: {},\n  }\n\n  constructor(config: Partial<NodeConfig<Options>> = {}) {\n    this.config = {\n      ...this.config,\n      ...config,\n    }\n\n    this.name = this.config.name\n    this.options = this.config.defaultOptions\n  }\n\n  static create<O>(config: Partial<NodeConfig<O>> = {}) {\n    return new Node<O>(config)\n  }\n\n  configure(options: Partial<Options> = {}) {\n    // return a new instance so we can use the same extension\n    // with different calls of `configure`\n    const extension = this.extend()\n\n    extension.options = mergeDeep(this.options, options) as Options\n\n    return extension\n  }\n\n  extend<ExtendedOptions = Options>(extendedConfig: Partial<NodeConfig<ExtendedOptions>> = {}) {\n    const extension = new Node<ExtendedOptions>(extendedConfig)\n\n    extension.parent = this\n\n    this.child = extension\n\n    extension.name = extendedConfig.name\n      ? extendedConfig.name\n      : extension.parent.name\n\n    extension.options = extendedConfig.defaultOptions\n      ? extendedConfig.defaultOptions\n      : extension.parent.options\n\n    return extension\n  }\n}\n","import {\n  DOMOutputSpec,\n  MarkSpec,\n  Mark as ProseMirrorMark,\n  MarkType,\n} from 'prosemirror-model'\nimport { Plugin, Transaction } from 'prosemirror-state'\nimport { InputRule } from 'prosemirror-inputrules'\nimport mergeDeep from './utilities/mergeDeep'\nimport {\n  Extensions,\n  Attributes,\n  RawCommands,\n  GlobalAttributes,\n  ParentConfig,\n  KeyboardShortcutCommand,\n} from './types'\nimport { Node } from './Node'\nimport { MarkConfig } from '.'\nimport { Editor } from './Editor'\n\ndeclare module '@tiptap/core' {\n  export interface MarkConfig<Options = any> {\n    [key: string]: any;\n\n    /**\n     * Name\n     */\n    name: string,\n\n    /**\n     * Priority\n     */\n    priority?: number,\n\n    /**\n     * Default options\n     */\n    defaultOptions?: Options,\n\n    /**\n     * Global attributes\n     */\n    addGlobalAttributes?: (this: {\n      name: string,\n      options: Options,\n      parent: ParentConfig<MarkConfig<Options>>['addGlobalAttributes'],\n    }) => GlobalAttributes | {},\n\n    /**\n     * Raw\n     */\n    addCommands?: (this: {\n      name: string,\n      options: Options,\n      editor: Editor,\n      type: MarkType,\n      parent: ParentConfig<MarkConfig<Options>>['addCommands'],\n    }) => Partial<RawCommands>,\n\n    /**\n     * Keyboard shortcuts\n     */\n    addKeyboardShortcuts?: (this: {\n      name: string,\n      options: Options,\n      editor: Editor,\n      type: MarkType,\n      parent: ParentConfig<MarkConfig<Options>>['addKeyboardShortcuts'],\n    }) => {\n      [key: string]: KeyboardShortcutCommand,\n    },\n\n    /**\n     * Input rules\n     */\n    addInputRules?: (this: {\n      name: string,\n      options: Options,\n      editor: Editor,\n      type: MarkType,\n      parent: ParentConfig<MarkConfig<Options>>['addInputRules'],\n    }) => InputRule[],\n\n    /**\n     * Paste rules\n     */\n    addPasteRules?: (this: {\n      name: string,\n      options: Options,\n      editor: Editor,\n      type: MarkType,\n      parent: ParentConfig<MarkConfig<Options>>['addPasteRules'],\n    }) => Plugin[],\n\n    /**\n     * ProseMirror plugins\n     */\n    addProseMirrorPlugins?: (this: {\n      name: string,\n      options: Options,\n      editor: Editor,\n      type: MarkType,\n      parent: ParentConfig<MarkConfig<Options>>['addProseMirrorPlugins'],\n    }) => Plugin[],\n\n    /**\n     * Extensions\n     */\n    addExtensions?: (this: {\n      name: string,\n      options: Options,\n      parent: ParentConfig<MarkConfig<Options>>['addExtensions'],\n    }) => Extensions,\n\n    /**\n     * Extend Node Schema\n     */\n    extendNodeSchema?: ((\n      this: {\n        name: string,\n        options: Options,\n        parent: ParentConfig<MarkConfig<Options>>['extendNodeSchema'],\n      },\n      extension: Node,\n    ) => Record<string, any>) | null,\n\n    /**\n     * Extend Mark Schema\n     */\n    extendMarkSchema?: ((\n      this: {\n        name: string,\n        options: Options,\n        parent: ParentConfig<MarkConfig<Options>>['extendMarkSchema'],\n      },\n      extension: Mark,\n    ) => Record<string, any>) | null,\n\n    /**\n     * The editor is not ready yet.\n     */\n    onBeforeCreate?: ((this: {\n      name: string,\n      options: Options,\n      editor: Editor,\n      type: MarkType,\n      parent: ParentConfig<MarkConfig<Options>>['onBeforeCreate'],\n    }) => void) | null,\n\n    /**\n     * The editor is ready.\n     */\n    onCreate?: ((this: {\n      name: string,\n      options: Options,\n      editor: Editor,\n      type: MarkType,\n      parent: ParentConfig<MarkConfig<Options>>['onCreate'],\n    }) => void) | null,\n\n    /**\n     * The content has changed.\n     */\n    onUpdate?: ((this: {\n      name: string,\n      options: Options,\n      editor: Editor,\n      type: MarkType,\n      parent: ParentConfig<MarkConfig<Options>>['onUpdate'],\n    }) => void) | null,\n\n    /**\n     * The selection has changed.\n     */\n    onSelectionUpdate?: ((this: {\n      name: string,\n      options: Options,\n      editor: Editor,\n      type: MarkType,\n      parent: ParentConfig<MarkConfig<Options>>['onSelectionUpdate'],\n    }) => void) | null,\n\n    /**\n     * The editor state has changed.\n     */\n    onTransaction?: ((\n      this: {\n        name: string,\n        options: Options,\n        editor: Editor,\n        type: MarkType,\n        parent: ParentConfig<MarkConfig<Options>>['onTransaction'],\n      },\n      props: {\n        transaction: Transaction,\n      },\n    ) => void) | null,\n\n    /**\n     * The editor is focused.\n     */\n    onFocus?: ((\n      this: {\n        name: string,\n        options: Options,\n        editor: Editor,\n        type: MarkType,\n        parent: ParentConfig<MarkConfig<Options>>['onFocus'],\n      },\n      props: {\n        event: FocusEvent,\n      },\n    ) => void) | null,\n\n    /**\n     * The editor isn’t focused anymore.\n     */\n    onBlur?: ((\n      this: {\n        name: string,\n        options: Options,\n        editor: Editor,\n        type: MarkType,\n        parent: ParentConfig<MarkConfig<Options>>['onBlur'],\n      },\n      props: {\n        event: FocusEvent,\n      },\n    ) => void) | null,\n\n    /**\n     * The editor is destroyed.\n     */\n    onDestroy?: ((this: {\n      name: string,\n      options: Options,\n      editor: Editor,\n      type: MarkType,\n      parent: ParentConfig<MarkConfig<Options>>['onDestroy'],\n    }) => void) | null,\n\n    /**\n     * Keep mark after split node\n     */\n    keepOnSplit?: boolean | (() => boolean),\n\n    /**\n     * Inclusive\n     */\n    inclusive?: MarkSpec['inclusive'] | ((this: {\n      name: string,\n      options: Options,\n      parent: ParentConfig<MarkConfig<Options>>['inclusive'],\n    }) => MarkSpec['inclusive']),\n\n    /**\n     * Excludes\n     */\n    excludes?: MarkSpec['excludes'] | ((this: {\n      name: string,\n      options: Options,\n      parent: ParentConfig<MarkConfig<Options>>['excludes'],\n    }) => MarkSpec['excludes']),\n\n    /**\n     * Group\n     */\n    group?: MarkSpec['group'] | ((this: {\n      name: string,\n      options: Options,\n      parent: ParentConfig<MarkConfig<Options>>['group'],\n    }) => MarkSpec['group']),\n\n    /**\n     * Spanning\n     */\n    spanning?: MarkSpec['spanning'] | ((this: {\n      name: string,\n      options: Options,\n      parent: ParentConfig<MarkConfig<Options>>['spanning'],\n    }) => MarkSpec['spanning']),\n\n    /**\n     * Parse HTML\n     */\n    parseHTML?: (\n      this: {\n        name: string,\n        options: Options,\n        parent: ParentConfig<MarkConfig<Options>>['parseHTML'],\n      },\n    ) => MarkSpec['parseDOM'],\n\n    /**\n     * Render HTML\n     */\n    renderHTML?: ((\n      this: {\n        name: string,\n        options: Options,\n        parent: ParentConfig<MarkConfig<Options>>['renderHTML'],\n      },\n      props: {\n        mark: ProseMirrorMark,\n        HTMLAttributes: Record<string, any>,\n      },\n    ) => DOMOutputSpec) | null,\n\n    /**\n     * Attributes\n     */\n    addAttributes?: (\n      this: {\n        name: string,\n        options: Options,\n        parent: ParentConfig<MarkConfig<Options>>['addAttributes'],\n      },\n    ) => Attributes | {},\n  }\n}\n\nexport class Mark<Options = any> {\n  type = 'mark'\n\n  name = 'mark'\n\n  parent: Mark | null = null\n\n  child: Mark | null = null\n\n  options: Options\n\n  config: MarkConfig = {\n    name: this.name,\n    defaultOptions: {},\n  }\n\n  constructor(config: Partial<MarkConfig<Options>> = {}) {\n    this.config = {\n      ...this.config,\n      ...config,\n    }\n\n    this.name = this.config.name\n    this.options = this.config.defaultOptions\n  }\n\n  static create<O>(config: Partial<MarkConfig<O>> = {}) {\n    return new Mark<O>(config)\n  }\n\n  configure(options: Partial<Options> = {}) {\n    // return a new instance so we can use the same extension\n    // with different calls of `configure`\n    const extension = this.extend()\n\n    extension.options = mergeDeep(this.options, options) as Options\n\n    return extension\n  }\n\n  extend<ExtendedOptions = Options>(extendedConfig: Partial<MarkConfig<ExtendedOptions>> = {}) {\n    const extension = new Mark<ExtendedOptions>(extendedConfig)\n\n    extension.parent = this\n\n    this.child = extension\n\n    extension.name = extendedConfig.name\n      ? extendedConfig.name\n      : extension.parent.name\n\n    extension.options = extendedConfig.defaultOptions\n      ? extendedConfig.defaultOptions\n      : extension.parent.options\n\n    return extension\n  }\n}\n","export default function isiOS(): boolean {\n  return [\n    'iPad Simulator',\n    'iPhone Simulator',\n    'iPod Simulator',\n    'iPad',\n    'iPhone',\n    'iPod',\n  ].includes(navigator.platform)\n  // iPad on iOS 13 detection\n  || (navigator.userAgent.includes('Mac') && 'ontouchend' in document)\n}\n","import { Decoration, NodeView as ProseMirrorNodeView } from 'prosemirror-view'\nimport { NodeSelection } from 'prosemirror-state'\nimport { Node as ProseMirrorNode } from 'prosemirror-model'\nimport { Editor as CoreEditor } from './Editor'\nimport { Node } from './Node'\nimport isiOS from './utilities/isiOS'\nimport { NodeViewRendererProps } from './types'\n\ninterface NodeViewRendererOptions {\n  stopEvent: ((event: Event) => boolean) | null,\n  update: ((node: ProseMirrorNode, decorations: Decoration[]) => boolean) | null,\n}\n\nexport class NodeView<Component, Editor extends CoreEditor = CoreEditor> implements ProseMirrorNodeView {\n\n  component: Component\n\n  editor: Editor\n\n  extension: Node\n\n  node: ProseMirrorNode\n\n  decorations: Decoration[]\n\n  getPos: any\n\n  isDragging = false\n\n  options: NodeViewRendererOptions = {\n    stopEvent: null,\n    update: null,\n  }\n\n  constructor(component: Component, props: NodeViewRendererProps, options?: Partial<NodeViewRendererOptions>) {\n    this.component = component\n    this.options = { ...this.options, ...options }\n    this.editor = props.editor as Editor\n    this.extension = props.extension\n    this.node = props.node\n    this.decorations = props.decorations\n    this.getPos = props.getPos\n    this.mount()\n  }\n\n  mount() {\n    // eslint-disable-next-line\n    return\n  }\n\n  get dom(): Element | null {\n    return null\n  }\n\n  get contentDOM(): Element | null {\n    return null\n  }\n\n  onDragStart(event: DragEvent) {\n    const { view } = this.editor\n    const target = (event.target as HTMLElement)\n\n    // get the drag handle element\n    // `closest` is not available for text nodes so we may have to use its parent\n    const dragHandle = target.nodeType === 3\n      ? target.parentElement?.closest('[data-drag-handle]')\n      : target.closest('[data-drag-handle]')\n\n    if (\n      !this.dom\n      || this.contentDOM?.contains(target)\n      || !dragHandle\n    ) {\n      return\n    }\n\n    let x = 0\n    let y = 0\n\n    // calculate offset for drag element if we use a different drag handle element\n    if (this.dom !== dragHandle) {\n      const domBox = this.dom.getBoundingClientRect()\n      const handleBox = dragHandle.getBoundingClientRect()\n\n      x = handleBox.x - domBox.x + event.offsetX\n      y = handleBox.y - domBox.y + event.offsetY\n    }\n\n    event.dataTransfer?.setDragImage(this.dom, x, y)\n\n    // we need to tell ProseMirror that we want to move the whole node\n    // so we create a NodeSelection\n    const selection = NodeSelection.create(view.state.doc, this.getPos())\n    const transaction = view.state.tr.setSelection(selection)\n\n    view.dispatch(transaction)\n  }\n\n  stopEvent(event: Event) {\n    if (!this.dom) {\n      return false\n    }\n\n    if (typeof this.options.stopEvent === 'function') {\n      return this.options.stopEvent(event)\n    }\n\n    const target = (event.target as HTMLElement)\n    const isInElement = this.dom.contains(target) && !this.contentDOM?.contains(target)\n\n    // any event from child nodes should be handled by ProseMirror\n    if (!isInElement) {\n      return false\n    }\n\n    const isInput = ['INPUT', 'BUTTON', 'SELECT', 'TEXTAREA'].includes(target.tagName)\n      || target.isContentEditable\n\n    // any input event within node views should be ignored by ProseMirror\n    if (isInput) {\n      return true\n    }\n\n    const { isEditable } = this.editor\n    const { isDragging } = this\n    const isDraggable = !!this.node.type.spec.draggable\n    const isSelectable = NodeSelection.isSelectable(this.node)\n    const isCopyEvent = event.type === 'copy'\n    const isPasteEvent = event.type === 'paste'\n    const isCutEvent = event.type === 'cut'\n    const isClickEvent = event.type === 'mousedown'\n    const isDragEvent = event.type.startsWith('drag') || event.type === 'drop'\n\n    // ProseMirror tries to drag selectable nodes\n    // even if `draggable` is set to `false`\n    // this fix prevents that\n    if (!isDraggable && isSelectable && isDragEvent) {\n      event.preventDefault()\n    }\n\n    if (isDraggable && isDragEvent && !isDragging) {\n      event.preventDefault()\n      return false\n    }\n\n    // we have to store that dragging started\n    if (isDraggable && isEditable && !isDragging && isClickEvent) {\n      const dragHandle = target.closest('[data-drag-handle]')\n      const isValidDragHandle = dragHandle\n        && (this.dom === dragHandle || (this.dom.contains(dragHandle)))\n\n      if (isValidDragHandle) {\n        this.isDragging = true\n\n        document.addEventListener('dragend', () => {\n          this.isDragging = false\n        }, { once: true })\n\n        document.addEventListener('mouseup', () => {\n          this.isDragging = false\n        }, { once: true })\n      }\n    }\n\n    // these events are handled by prosemirror\n    if (\n      isDragging\n      || isCopyEvent\n      || isPasteEvent\n      || isCutEvent\n      || (isClickEvent && isSelectable)\n    ) {\n      return false\n    }\n\n    return true\n  }\n\n  ignoreMutation(mutation: MutationRecord | { type: 'selection', target: Element }) {\n    if (!this.dom || !this.contentDOM) {\n      return true\n    }\n\n    // a leaf/atom node is like a black box for ProseMirror\n    // and should be fully handled by the node view\n    if (this.node.isLeaf) {\n      return true\n    }\n\n    // ProseMirror should handle any selections\n    if (mutation.type === 'selection') {\n      return false\n    }\n\n    // try to prevent a bug on iOS that will break node views on enter\n    // this is because ProseMirror can’t preventDispatch on enter\n    // this will lead to a re-render of the node view on enter\n    // see: https://github.com/ueberdosis/tiptap/issues/1214\n    if (this.dom.contains(mutation.target) && mutation.type === 'childList' && isiOS()) {\n      const changedNodes = [\n        ...Array.from(mutation.addedNodes),\n        ...Array.from(mutation.removedNodes),\n      ] as HTMLElement[]\n\n      // we’ll check if every changed node is contentEditable\n      // to make sure it’s probably mutated by ProseMirror\n      if (changedNodes.every(node => node.isContentEditable)) {\n        return false\n      }\n    }\n\n    // we will allow mutation contentDOM with attributes\n    // so we can for example adding classes within our node view\n    if (this.contentDOM === mutation.target && mutation.type === 'attributes') {\n      return true\n    }\n\n    // ProseMirror should handle any changes within contentDOM\n    if (this.contentDOM.contains(mutation.target)) {\n      return false\n    }\n\n    return true\n  }\n\n  updateAttributes(attributes: {}) {\n    if (!this.editor.view.editable) {\n      return\n    }\n\n    const { state } = this.editor.view\n    const pos = this.getPos()\n    const transaction = state.tr.setNodeMarkup(pos, undefined, {\n      ...this.node.attrs,\n      ...attributes,\n    })\n\n    this.editor.view.dispatch(transaction)\n  }\n\n  deleteNode(): void {\n    const from = this.getPos()\n    const to = from + this.node.nodeSize\n\n    this.editor.commands.deleteRange({ from, to })\n  }\n}\n","import { InputRule } from 'prosemirror-inputrules'\nimport { NodeType } from 'prosemirror-model'\n\nexport default function (regexp: RegExp, type: NodeType, getAttributes?: (match: any) => any): InputRule {\n  return new InputRule(regexp, (state, match, start, end) => {\n    const attributes = getAttributes instanceof Function\n      ? getAttributes(match)\n      : getAttributes\n    const { tr } = state\n\n    if (match[0]) {\n      tr.replaceWith(start - 1, end, type.create(attributes))\n    }\n\n    return tr\n  })\n}\n","import { EditorState } from 'prosemirror-state'\nimport { MarkRange } from '../types'\n\nexport default function getMarksBetween(from: number, to: number, state: EditorState): MarkRange[] {\n  let marks: MarkRange[] = []\n\n  state.doc.nodesBetween(from, to, (node, pos) => {\n    marks = [...marks, ...node.marks.map(mark => ({\n      from: pos,\n      to: pos + node.nodeSize,\n      mark,\n    }))]\n  })\n\n  return marks\n}\n","import { InputRule } from 'prosemirror-inputrules'\nimport { MarkType } from 'prosemirror-model'\nimport getMarksBetween from '../helpers/getMarksBetween'\n\nexport default function (regexp: RegExp, markType: MarkType, getAttributes?: Function): InputRule {\n  return new InputRule(regexp, (state, match, start, end) => {\n    const attributes = getAttributes instanceof Function\n      ? getAttributes(match)\n      : getAttributes\n    const { tr } = state\n    const captureGroup = match[match.length - 1]\n    const fullMatch = match[0]\n    let markEnd = end\n\n    if (captureGroup) {\n      const startSpaces = fullMatch.search(/\\S/)\n      const textStart = start + fullMatch.indexOf(captureGroup)\n      const textEnd = textStart + captureGroup.length\n\n      const excludedMarks = getMarksBetween(start, end, state)\n        .filter(item => {\n          // TODO: PR to add excluded to MarkType\n          // @ts-ignore\n          const { excluded } = item.mark.type\n          return excluded.find((type: MarkType) => type.name === markType.name)\n        })\n        .filter(item => item.to > textStart)\n\n      if (excludedMarks.length) {\n        return null\n      }\n\n      if (textEnd < end) {\n        tr.delete(textEnd, end)\n      }\n\n      if (textStart > start) {\n        tr.delete(start + startSpaces, textStart)\n      }\n\n      markEnd = start + startSpaces + captureGroup.length\n\n      tr.addMark(start + startSpaces, markEnd, markType.create(attributes))\n\n      tr.removeStoredMark(markType)\n    }\n\n    return tr\n  })\n}\n","import { Plugin, PluginKey } from 'prosemirror-state'\nimport { Slice, Fragment, MarkType } from 'prosemirror-model'\n\nexport default function (\n  regexp: RegExp,\n  type: MarkType,\n  getAttributes?: Record<string, any> | ((match: RegExpExecArray) => Record<string, any>),\n): Plugin {\n  const handler = (fragment: Fragment, parent?: any) => {\n    const nodes: any[] = []\n\n    fragment.forEach(child => {\n      if (child.isText && child.text) {\n        const { text } = child\n        let pos = 0\n        let match\n\n        // eslint-disable-next-line\n        while ((match = regexp.exec(text)) !== null) {\n          const outerMatch = Math.max(match.length - 2, 0)\n          const innerMatch = Math.max(match.length - 1, 0)\n\n          if (parent?.type.allowsMarkType(type)) {\n            const start = match.index\n            const matchStart = start + match[0].indexOf(match[outerMatch])\n            const matchEnd = matchStart + match[outerMatch].length\n            const textStart = matchStart + match[outerMatch].lastIndexOf(match[innerMatch])\n            const textEnd = textStart + match[innerMatch].length\n            const attrs = getAttributes instanceof Function\n              ? getAttributes(match)\n              : getAttributes\n\n            // adding text before markdown to nodes\n            if (matchStart > 0) {\n              nodes.push(child.cut(pos, matchStart))\n            }\n\n            // adding the markdown part to nodes\n            nodes.push(child\n              .cut(textStart, textEnd)\n              .mark(type.create(attrs).addToSet(child.marks)))\n\n            pos = matchEnd\n          }\n        }\n\n        // adding rest of text to nodes\n        if (pos < text.length) {\n          nodes.push(child.cut(pos))\n        }\n      } else {\n        nodes.push(child.copy(handler(child.content, child)))\n      }\n    })\n\n    return Fragment.fromArray(nodes)\n  }\n\n  return new Plugin({\n    key: new PluginKey('markPasteRule'),\n    props: {\n      transformPasted: slice => {\n        return new Slice(handler(slice.content), slice.openStart, slice.openEnd)\n      },\n    },\n  })\n}\n","import { Node as ProseMirrorNode } from 'prosemirror-model'\nimport { Predicate, NodeWithPos } from '../types'\n\nexport default function findChildren(node: ProseMirrorNode, predicate: Predicate): NodeWithPos[] {\n  const nodesWithPos: NodeWithPos[] = []\n\n  node.descendants((child, pos) => {\n    if (predicate(child)) {\n      nodesWithPos.push({\n        node: child,\n        pos,\n      })\n    }\n  })\n\n  return nodesWithPos\n}\n","import { Node as ProseMirrorNode } from 'prosemirror-model'\nimport { Predicate, Range, NodeWithPos } from '../types'\n\n/**\n * Same as `findChildren` but searches only within a `range`.\n */\nexport default function findChildrenInRange(node: ProseMirrorNode, range: Range, predicate: Predicate): NodeWithPos[] {\n  const nodesWithPos: NodeWithPos[] = []\n\n  // if (range.from === range.to) {\n  //   const nodeAt = node.nodeAt(range.from)\n\n  //   if (nodeAt) {\n  //     nodesWithPos.push({\n  //       node: nodeAt,\n  //       pos: range.from,\n  //     })\n  //   }\n  // }\n\n  node.nodesBetween(range.from, range.to, (child, pos) => {\n    if (predicate(child)) {\n      nodesWithPos.push({\n        node: child,\n        pos,\n      })\n    }\n  })\n\n  return nodesWithPos\n}\n","import { Schema } from 'prosemirror-model'\nimport getSchemaByResolvedExtensions from './getSchemaByResolvedExtensions'\nimport ExtensionManager from '../ExtensionManager'\nimport { Extensions } from '../types'\n\nexport default function getSchema(extensions: Extensions): Schema {\n  const resolvedExtensions = ExtensionManager.resolve(extensions)\n\n  return getSchemaByResolvedExtensions(resolvedExtensions)\n}\n","import { Node } from 'prosemirror-model'\nimport getSchema from './getSchema'\nimport getHTMLFromFragment from './getHTMLFromFragment'\nimport { Extensions } from '../types'\n\nexport default function generateHTML(doc: object, extensions: Extensions): string {\n  const schema = getSchema(extensions)\n  const contentNode = Node.fromJSON(schema, doc)\n\n  return getHTMLFromFragment(contentNode, schema)\n}\n","import { DOMParser } from 'prosemirror-model'\nimport getSchema from './getSchema'\nimport elementFromString from '../utilities/elementFromString'\nimport { Extensions } from '../types'\n\nexport default function generateJSON(html: string, extensions: Extensions): Record<string, any> {\n  const schema = getSchema(extensions)\n  const dom = elementFromString(html)\n\n  return DOMParser.fromSchema(schema)\n    .parse(dom)\n    .toJSON()\n}\n","import { Node as ProseMirrorNode } from 'prosemirror-model'\nimport { JSONContent } from '../types'\n\ninterface DebugJSONContent extends JSONContent {\n  from: number,\n  to: number,\n}\n\n/**\n * Returns a node tree with node positions.\n */\nexport default function getDebugJSON(node: ProseMirrorNode, startOffset = 0) {\n  const nodes: DebugJSONContent[] = []\n\n  node.forEach((n, offset) => {\n    const from = startOffset + offset\n    const to = from + n.nodeSize\n    const marks = n.marks.map(mark => ({\n      type: mark.type.name,\n      attrs: { ...mark.attrs },\n    }))\n    const attrs = { ...n.attrs }\n    const content = getDebugJSON(n, from + 1)\n    const output: DebugJSONContent = {\n      type: n.type.name,\n      from,\n      to,\n    }\n\n    if (Object.keys(attrs).length) {\n      output.attrs = attrs\n    }\n\n    if (marks.length) {\n      output.marks = marks\n    }\n\n    if (content.length) {\n      output.content = content\n    }\n\n    if (n.text) {\n      output.text = n.text\n    }\n\n    nodes.push(output)\n  })\n\n  return nodes\n}\n","import { NodeSelection } from 'prosemirror-state'\nimport isObject from '../utilities/isObject'\n\nexport default function isNodeSelection(value: unknown): value is NodeSelection {\n  return isObject(value) && value instanceof NodeSelection\n}\n","import { EditorView } from 'prosemirror-view'\n\nexport default function posToDOMRect(view: EditorView, from: number, to: number): DOMRect {\n  const start = view.coordsAtPos(from)\n  const end = view.coordsAtPos(to, -1)\n  const top = Math.min(start.top, end.top)\n  const bottom = Math.max(start.bottom, end.bottom)\n  const left = Math.min(start.left, end.left)\n  const right = Math.max(start.right, end.right)\n  const width = right - left\n  const height = bottom - top\n  const x = left\n  const y = top\n  const data = {\n    top,\n    bottom,\n    left,\n    right,\n    width,\n    height,\n    x,\n    y,\n  }\n\n  return {\n    ...data,\n    toJSON: () => data,\n  }\n}\n"],"names":["Fragment","DOMParser","DOMSerializer","Schema","keymap","inputRulesPlugin","Plugin","PluginKey","liftTarget","originalCreateParagraphNear","originalDeleteSelection","originalExitCode","TextSelection","ReplaceStep","ReplaceAroundStep","Selection","originalJoinBackward","originalJoinForward","originalLift","originalLiftEmptyBlock","originalLiftListItem","originalNewlineInCode","originalSelectAll","originalSelectNodeBackward","originalSelectNodeForward","originalSelectParentNode","setBlockType","NodeSelection","originalSinkListItem","canSplit","Slice","lift","wrapIn","originalUndoInputRule","originalWrapIn","originalWrapInList","blur","clearContent","clearNodes","command","createParagraphNear","deleteRange","deleteSelection","enter","exitCode","extendMarkRange","first","focus","insertContent","insertContentAt","joinBackward","joinForward","keyboardShortcut","liftEmptyBlock","liftListItem","newlineInCode","replace","replaceRange","resetAttributes","scrollIntoView","selectAll","selectNodeBackward","selectNodeForward","selectParentNode","setContent","setMark","setMeta","setNode","setNodeSelection","setTextSelection","sinkListItem","splitBlock","splitListItem","toggleList","toggleMark","toggleNode","toggleWrap","undoInputRule","unsetAllMarks","unsetMark","updateAttributes","wrapInList","EditorView","EditorState","InputRule","Node"],"mappings":"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"}