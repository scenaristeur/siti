/**
 * MIT License
 * 
 * Copyright 2020 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the &quot;Software&quot;), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

/**
 * Generated by the artifact generator [@inrupt/lit-artifact-generator], version [0.13.4]
 * as part of artifact: [vocab-common-rdf], version: [0.7.4]
 * on 'Monday, April 5, 2021 9:51 PM'.
 *
 * Vocabulary built from vocab list file: [common-rdf/Common/Vocab-List-Common-Rdf.yml].
 *
 * The Hydra Core Vocabulary is a lightweight vocabulary to create hypermedia-driven Web APIs. By specifying a number of concepts commonly used in Web APIs it enables the creation of generic API clients.
 */

import { DataFactory } from 'rdf-data-factory';
import * as RdfTypes from 'rdf-js';

const rdfFactory: RdfTypes.DataFactory = new DataFactory();

function _NS(localName: string): RdfTypes.NamedNode {
  return rdfFactory.namedNode(`http://www.w3.org/ns/hydra/core#${localName}`);
}

// Add 'any' type annotation in case this vocab includes 'NamedNode' instances,
// for example instances of Constant IRIs (TypeScript compiler will complain of
// "semantic error TS2742" otherwise).
/**
 * The Hydra Core Vocabulary is a lightweight vocabulary to create hypermedia-driven Web APIs. By specifying a number of concepts commonly used in Web APIs it enables the creation of generic API clients.
 */
const HYDRA: any = {
  PREFIX: "hydra",
  NAMESPACE: "http://www.w3.org/ns/hydra/core#",
  PREFIX_AND_NAMESPACE: { "hydra": "http://www.w3.org/ns/hydra/core#" },
  NS: _NS,

  // *****************
  // All the Classes.
  // *****************

  /**
   * The class of Hydra classes.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/hydra/core
   */
  Class: _NS("Class"),

  /**
   * The class of properties representing links.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/hydra/core
   */
  Link: _NS("Link"),

  /**
   * The Hydra API documentation class
   *
   * Defined by the vocabulary: http://www.w3.org/ns/hydra/core
   */
  ApiDocumentation: _NS("ApiDocumentation"),

  /**
   * A templated link.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/hydra/core
   */
  TemplatedLink: _NS("TemplatedLink"),

  /**
   * A runtime error, used to report information beyond the returned status code.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/hydra/core
   */
  Error: _NS("Error"),

  /**
   * A collection holding references to a number of related resources.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/hydra/core
   */
  Collection: _NS("Collection"),

  /**
   * A PartialCollectionView describes a partial view of a Collection. Multiple PartialCollectionViews can be connected with the the next/previous properties to allow a client to retrieve all members of the collection.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/hydra/core
   */
  PartialCollectionView: _NS("PartialCollectionView"),

  /**
   * Provides a base abstract for base Uri source for Iri template resolution.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/hydra/core
   */
  BaseUriSource: _NS("BaseUriSource"),

  /**
   * Specifies a possible either expected or returned header values
   *
   * Defined by the vocabulary: http://www.w3.org/ns/hydra/core
   */
  HeaderSpecification: _NS("HeaderSpecification"),


  // *******************
  // All the Properties.
  // *******************

  /**
   * A property
   *
   * Defined by the vocabulary: http://www.w3.org/ns/hydra/core
   */
  property: _NS("property"),

  /**
   * True if the property is required, false otherwise.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/hydra/core
   */
  required: _NS("required"),

  /**
   * True if the client can retrieve the property's value, false otherwise.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/hydra/core
   */
  readable: _NS("readable"),

  /**
   * True if the client can change the property's value, false otherwise.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/hydra/core
   */
  writable: _NS("writable"),

  /**
   * This property is left for compatibility purposes and hydra:writable should be used instead.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/hydra/core
   */
  writeable: _NS("writeable"),

  /**
   * The HTTP method.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/hydra/core
   */
  method: _NS("method"),

  /**
   * The HTTP status code. Please note it may happen this value will be different to actual status code received.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/hydra/core
   */
  statusCode: _NS("statusCode"),

  /**
   * A title, often used along with a description.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/hydra/core
   */
  title: _NS("title"),

  /**
   * A description.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/hydra/core
   */
  description: _NS("description"),

  /**
   * This predicate is left for compatibility purposes and hydra:memberAssertion should be used instead.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/hydra/core
   */
  manages: _NS("manages"),

  /**
   * The total number of items referenced by a collection.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/hydra/core
   */
  totalItems: _NS("totalItems"),

  /**
   * A property representing a freetext query.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/hydra/core
   */
  freetextQuery: _NS("freetextQuery"),

  /**
   * A templated string with placeholders. The literal's datatype indicates the template syntax; if not specified, hydra:Rfc6570Template is assumed.
   *
   * See also:
   *  - http://www.w3.org/ns/hydra/core#Rfc6570Template
   *
   * Defined by the vocabulary: http://www.w3.org/ns/hydra/core
   */
  template: _NS("template"),

  /**
   * An IRI template as defined by RFC6570.
   *
   * See also:
   *  - http://tools.ietf.org/html/rfc6570
   *
   * Defined by the vocabulary: http://www.w3.org/ns/hydra/core
   */
  Rfc6570Template: _NS("Rfc6570Template"),

  /**
   * The representation format to use when expanding the IRI template.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/hydra/core
   */
  variableRepresentation: _NS("variableRepresentation"),

  /**
   * A variable-to-property mapping of the IRI template.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/hydra/core
   */
  mapping: _NS("mapping"),

  /**
   * An IRI template variable
   *
   * Defined by the vocabulary: http://www.w3.org/ns/hydra/core
   */
  variable: _NS("variable"),

  /**
   * relative Uri resolution
   *
   * Defined by the vocabulary: http://www.w3.org/ns/hydra/core
   */
  resolveRelativeUsing: _NS("resolveRelativeUsing"),

  /**
   * Instructs to skip N elements of the set.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/hydra/core
   */
  offset: _NS("offset"),

  /**
   * Instructs to limit set only to N elements.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/hydra/core
   */
  limit: _NS("limit"),

  /**
   * Instructs to provide a specific page of the collection at a given index.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/hydra/core
   */
  pageIndex: _NS("pageIndex"),

  /**
   * Instructs to provide a specific page reference of the collection.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/hydra/core
   */
  pageReference: _NS("pageReference"),

  /**
   * Name of the header returned by the operation.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/hydra/core
   */
  returnsHeader: _NS("returnsHeader"),

  /**
   * Specification of the header expected by the operation.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/hydra/core
   */
  expectsHeader: _NS("expectsHeader"),

  /**
   * Name of the header.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/hydra/core
   */
  headerName: _NS("headerName"),

  /**
   * Possible value of the header.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/hydra/core
   */
  possibleValue: _NS("possibleValue"),

  /**
   * Determines whether the provided set of header values is closed or not.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/hydra/core
   */
  closedSet: _NS("closedSet"),

  /**
   * Hint on what kind of extensions are in use.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/hydra/core
   */
  extension: _NS("extension"),
 }

export default HYDRA;
