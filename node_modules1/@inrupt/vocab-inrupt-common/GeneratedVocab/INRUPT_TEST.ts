/**
 * MIT License
 * 
 * Copyright 2020 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the &quot;Software&quot;), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

/**
  Generated by the artifact generator [@inrupt/lit-artifact-generator], version [0.13.4]
  as part of artifact: [vocab-inrupt-common], version: [0.7.4]
  on 'Monday, April 5, 2021 9:51 PM'.

  Vocabulary built from vocab list file: [inrupt-rdf/Common/Vocab-List-Inrupt-Common.yml].

  The Inrupt test vocabulary - just commonly used terms
 across all Inrupt tests.
 */

import { VocabTerm, getLocalStore } from "@inrupt/solid-common-vocab";

import { DataFactory } from 'rdf-data-factory';
import * as RDF from 'rdf-js';

const rdfFactory: RDF.DataFactory = new DataFactory();

function _NS(localName: string): RDF.NamedNode {
  return rdfFactory.namedNode(`https://inrupt.com/vocab/test#${localName}`);
}

// Add 'any' type annotation in case this vocab includes 'NamedNode' instances,
// for example instances of Constant IRIs (TypeScript compiler will complain of
// "semantic error TS2742" otherwise).
/**
 * The Inrupt test vocabulary - just commonly used terms
 across all Inrupt tests.
 */
const INRUPT_TEST: any = {
  PREFIX: "inrupt_test",
  NAMESPACE: "https://inrupt.com/vocab/test#",
  PREFIX_AND_NAMESPACE: { "inrupt_test": "https://inrupt.com/vocab/test#" },
  NS: _NS,

  // *******************
  // All the Properties.
  // *******************

  /**
   * Some predicate.
   */
  somePredicate: new VocabTerm(
    _NS("somePredicate"),
    rdfFactory,
    getLocalStore(),
    false
  )
    .addLabel(`Some predicate`, "en")
    .addComment(`Some predicate.`, "en"),

  /**
   * Some object as an IRI.
   */
  someObject: new VocabTerm(
    _NS("someObject"),
    rdfFactory,
    getLocalStore(),
    false
  )
    .addLabel(`Some object as an IRI`, "en")
    .addComment(`Some object as an IRI.`, "en"),

  /**
   * Some *other* predicate.
   */
  someOtherPredicate: new VocabTerm(
    _NS("someOtherPredicate"),
    rdfFactory,
    getLocalStore(),
    false
  )
    .addLabel(`Some *other* predicate`, "en")
    .addComment(`Some *other* predicate.`, "en"),

  /**
   * Some *other* object value as an IRI.
   */
  someOtherObject: new VocabTerm(
    _NS("someOtherObject"),
    rdfFactory,
    getLocalStore(),
    false
  )
    .addLabel(`Some *other* object value as an IRI`, "en")
    .addComment(`Some *other* object value as an IRI.`, "en"),


  // **************************
  // All the constant strings.
  // **************************

  /**
   * Hash fragment used to identify a some Subject.
   */
  hashSomeSubject: "some-subject",

  /**
   * Hash fragment used to identify a some Object.
   */
  hashSomeObject: "some-object",

  /**
   * Relative path to some Pod container ACL.
   */
  somePodContainerAclRelativePath: ".acl",

  /**
   * Relative path to some Pod resource ACL.
   */
  somePodResourceAclRelativePath: "Resource1.acl",


  // ***********************
  // All the constant IRIs.
  // ***********************

  /**
   * Root of some Pod.
   */
  somePodRoot: _NS("https://some.pod/"),

  /**
   * Container in some Pod.
   */
  somePodContainer: _NS("https://some.pod/rootContainer/container/"),

  /**
   * Container in some *other* Pod.
   */
  someOtherPodContainer: _NS("https://some.other.pod.com/canBeAnywhere/rootContainer/otherContainer"),

  /**
   * Some resource in a Pod.
   */
  somePodResource: _NS("https://some.pod/rootContainer/container/Resource1"),

  /**
   * ACL for some resource.
   */
  somePodResourceAcl: _NS("https://some.pod/rootContainer/container/Resource1.acl"),

  /**
   * Some *other* resource in another Pod.
   */
  someOtherPodResource: _NS("https://some.other.pod.com/OtherResource"),

  /**
   * Some Pod resource with a hash fragment identifying a Subject.
   */
  somePodResourceHashSomeSubject: _NS("https://some.pod/rootContainer/container/Resource1#some-subject"),

  /**
   * Some Pod resource with a hash fragment identifying an Object.
   */
  somePodResourceHashSomeObject: _NS("https://some.pod/rootContainer/container/Resource1#some-object"),

  /**
   * Some Pod root ACL.
   */
  somePodRootAcl: _NS("https://some.pod/.acl"),

  /**
   * Some Pod container ACL.
   */
  somePodContainerAcl: _NS("https://some.pod/rootContainer/container/.acl"),

  /**
   * Some Pod Group ID.
   */
  somePodGroupId: _NS("https://some.pod/group#id"),

  /**
   * Some *other* Pod Group ID.
   */
  somePodOtherGroupId: _NS("https://some.other.pod/otherGroup#other-id"),

  /**
   * Some Pod WebID.
   */
  somePodWebId: _NS("https://some.pod/somePodWebId/profile/card#me"),

  /**
   * Some *other* Pod WebID.
   */
  someOtherPodWebId: _NS("https://some.other.pod.com#i"),

  /**
   * Some Named Graph.
   */
  someNamedGraph: _NS("https://some.pod/someNamedGraph"),

  /**
   * Some *other* Named Graph.
   */
  someOtherNamedGraph: _NS("https://some.other.pod.com/someOtherNamedGraph"),

  /**
   * Some non-RDF resource.
   */
  someNonRdfResource: _NS("https://some.pod/someNonRdfResource"),

  /**
   * Some subject.
   */
  someSubject: _NS("https://some.pod/resource#subject"),

  /**
   * Some *other* subject.
   */
  someOtherSubject: _NS("https://some.other.pod/resource#other-subject"),
 };

export default INRUPT_TEST;
