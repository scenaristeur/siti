/**
 * MIT License
 * 
 * Copyright 2020 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the &quot;Software&quot;), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

/**
 * Generated by the artifact generator [@inrupt/lit-artifact-generator], version [0.13.4]
 * as part of artifact: [vocab-common-rdf], version: [0.7.4]
 * on 'Monday, April 5, 2021 9:51 PM'.
 *
 * Vocabulary built from vocab list file: [common-rdf/Common/Vocab-List-Common-Rdf.yml].
 *
 * [Generator provided] - Time Ontology in OWL
 */

import { DataFactory } from 'rdf-data-factory';
import * as RdfTypes from 'rdf-js';

const rdfFactory: RdfTypes.DataFactory = new DataFactory();

function _NS(localName: string): RdfTypes.NamedNode {
  return rdfFactory.namedNode(`http://www.w3.org/2006/time#${localName}`);
}

// Add 'any' type annotation in case this vocab includes 'NamedNode' instances,
// for example instances of Constant IRIs (TypeScript compiler will complain of
// "semantic error TS2742" otherwise).
/**
 * [Generator provided] - Time Ontology in OWL
 */
const TIME: any = {
  PREFIX: "time",
  NAMESPACE: "http://www.w3.org/2006/time#",
  PREFIX_AND_NAMESPACE: { "time": "http://www.w3.org/2006/time#" },
  NS: _NS,

  // *****************
  // All the Classes.
  // *****************

  /**
   * Description of date and time structured with separate values for the various elements of a calendar-clock system. The temporal reference system is fixed to Gregorian Calendar, and the range of year, month, day properties restricted to corresponding XML Schema types xsd:gYear, xsd:gMonth and xsd:gDay, respectively.
   *
   * This term has [1] label and comment, in the language [es].
   */
  DateTimeDescription: _NS("DateTimeDescription"),

  /**
   * Description of date and time structured with separate values for the various elements of a calendar-clock system
   *
   * This term has [1] label and comment, in the language [es].
   */
  GeneralDateTimeDescription: _NS("GeneralDateTimeDescription"),

  /**
   * DateTimeInterval is a subclass of ProperInterval, defined using the multi-element DateTimeDescription.
   *
   * This term has [1] label and comment, in the language [es].
   */
  DateTimeInterval: _NS("DateTimeInterval"),

  /**
   * A temporal entity with non-zero extent or duration, i.e. for which the value of the beginning and end are different
   *
   * This term has [1] label and comment, in the language [es].
   */
  ProperInterval: _NS("ProperInterval"),

  /**
   * The day of week
   *
   * This term has [1] label and comment, in the language [es].
   */
  DayOfWeek: _NS("DayOfWeek"),

  /**
   * Duration of a temporal extent expressed as a number scaled by a temporal unit
   *
   * This term provides non-English descriptions, but a mismatch between labels and comments, with [0] labels, but [1] comment in the language [es].
   */
  Duration: _NS("Duration"),

  /**
   * Time extent; duration of a time interval separate from its particular start position
   *
   * This term has [1] label and comment, in the language [es].
   */
  TemporalDuration: _NS("TemporalDuration"),

  /**
   * Description of temporal extent structured with separate values for the various elements of a calendar-clock system. The temporal reference system is fixed to Gregorian Calendar, and the range of each of the numeric properties is restricted to xsd:decimal
   *
   * This term has [1] label and comment, in the language [es].
   */
  DurationDescription: _NS("DurationDescription"),

  /**
   * Description of temporal extent structured with separate values for the various elements of a calendar-clock system.
   *
   * This term has [1] label and comment, in the language [es].
   */
  GeneralDurationDescription: _NS("GeneralDurationDescription"),

  /**
   * A position on a time-line
   *
   * This term has [1] label and comment, in the language [es].
   */
  TemporalPosition: _NS("TemporalPosition"),

  /**
   * A temporal entity with zero extent or duration
   *
   * This term has [1] label and comment, in the language [es].
   */
  Instant: _NS("Instant"),

  /**
   * A temporal interval or instant.
   *
   * This term has [1] label and comment, in the language [es].
   */
  TemporalEntity: _NS("TemporalEntity"),

  /**
   * A temporal entity with an extent or duration
   *
   * This term has [1] label and comment, in the language [es].
   */
  Interval: _NS("Interval"),

  /**
   * January
   */
  January: _NS("January"),

  /**
   * The month of the year
   *
   * This term has [1] label and comment, in the language [es].
   */
  MonthOfYear: _NS("MonthOfYear"),

  /**
   * A temporal reference system, such as a temporal coordinate system (with an origin, direction, and scale), a calendar-clock combination, or a (possibly hierarchical) ordinal system. 

This is a stub class, representing the set of all temporal reference systems.
   *
   * This term has [1] label and comment, in the language [es].
   */
  TRS: _NS("TRS"),

  /**
   * A standard duration, which provides a scale factor for a time extent, or the granularity or precision for a time position.
   *
   * This term has [1] label and comment, in the language [es].
   */
  TemporalUnit: _NS("TemporalUnit"),

  /**
   * A temporal position described using either a (nominal) value from an ordinal reference system, or a (numeric) value in a temporal coordinate system. 
   *
   * This term has [1] label and comment, in the language [es].
   */
  TimePosition: _NS("TimePosition"),

  /**
   * A Time Zone specifies the amount by which the local time is offset from UTC. 
	A time zone is usually denoted geographically (e.g. Australian Eastern Daylight Time), with a constant value in a given region. 
The region where it applies and the offset from UTC are specified by a locally recognised governing authority.
   *
   * This term has [1] label and comment, in the language [es].
   */
  TimeZone: _NS("TimeZone"),

  /**
   * Year duration
   */
  Year: _NS("Year"),


  // *******************
  // All the Properties.
  // *******************

  /**
   * Day position in a calendar-clock system.

The range of this property is not specified, so can be replaced by any specific representation of a calendar day from any calendar. 
   *
   * This term has [1] label and comment, in the language [es].
   */
  day: _NS("day"),

  /**
   * Month position in a calendar-clock system.

The range of this property is not specified, so can be replaced by any specific representation of a calendar month from any calendar. 
   *
   * This term has [1] label and comment, in the language [es].
   */
  month: _NS("month"),

  /**
   * Year position in a calendar-clock system.

The range of this property is not specified, so can be replaced by any specific representation of a calendar year from any calendar. 
   *
   * This term provides non-English descriptions, but a mismatch between labels and comments, with [0] labels, but [1] comment in the language [es].
   */
  year: _NS("year"),

  /**
   * The temporal reference system used by a temporal position or extent description. 
   *
   * This term has [1] label and comment, in the language [es].
   */
  hasTRS: _NS("hasTRS"),

  /**
   * Value of a temporal extent expressed as a decimal number scaled by a temporal unit
   *
   * This term has [1] label and comment, in the language [es].
   */
  numericDuration: _NS("numericDuration"),

  /**
   * The temporal unit which provides the precision of a date-time value or scale of a temporal extent
   *
   * This term has [1] label and comment, in the language [es].
   */
  unitType: _NS("unitType"),

  /**
   * length of, or element of the length of, a temporal extent expressed in days
   *
   * This term has [1] label and comment, in the language [es].
   */
  days: _NS("days"),

  /**
   * length of, or element of the length of, a temporal extent expressed in hours
   *
   * This term has [1] label and comment, in the language [es].
   */
  hours: _NS("hours"),

  /**
   * length, or element of, a temporal extent expressed in minutes
   *
   * This term has [1] label and comment, in the language [es].
   */
  minutes: _NS("minutes"),

  /**
   * length of, or element of the length of, a temporal extent expressed in months
   *
   * This term has [1] label and comment, in the language [es].
   */
  months: _NS("months"),

  /**
   * length of, or element of the length of, a temporal extent expressed in seconds
   *
   * This term has [1] label and comment, in the language [es].
   *
   * See also:
   *  - http://www.bipm.org/en/publications/si-brochure/second.html
   */
  seconds: _NS("seconds"),

  /**
   * length of, or element of the length of, a temporal extent expressed in weeks
   *
   * This term has [1] label and comment, in the language [es].
   */
  weeks: _NS("weeks"),

  /**
   * length of, or element of the length of, a temporal extent expressed in years
   *
   * This term has [1] label and comment, in the language [es].
   */
  years: _NS("years"),

  /**
   * The day of week, whose value is a member of the class time:DayOfWeek
   *
   * This term provides non-English descriptions, but a mismatch between labels and comments, with [1] label in the language [es], but [0] comments.
   */
  dayOfWeek: _NS("dayOfWeek"),

  /**
   * The number of the day within the year
   *
   * This term has [1] label and comment, in the language [es].
   */
  dayOfYear: _NS("dayOfYear"),

  /**
   * Hour position in a calendar-clock system.
   *
   * This term has [1] label and comment, in the language [es].
   */
  hour: _NS("hour"),

  /**
   * Minute position in a calendar-clock system.
   *
   * This term has [1] label and comment, in the language [es].
   */
  minute: _NS("minute"),

  /**
   * The month of the year, whose value is a member of the class time:MonthOfYear
   *
   * This term has [1] label and comment, in the language [es].
   */
  monthOfYear: _NS("monthOfYear"),

  /**
   * Second position in a calendar-clock system.
   *
   * This term has [1] label and comment, in the language [es].
   */
  second: _NS("second"),

  /**
   * The time zone for clock elements in the temporal position
   *
   * This term provides non-English descriptions, but a mismatch between labels and comments, with [1] label in the language [es], but [0] comments.
   */
  timeZone: _NS("timeZone"),

  /**
   * Week number within the year.
   *
   * This term has [1] label and comment, in the language [es].
   */
  week: _NS("week"),

  /**
   * The (numeric) value indicating position within a temporal coordinate system 
   *
   * This term has [1] label and comment, in the language [es].
   */
  numericPosition: _NS("numericPosition"),

  /**
   * The (nominal) value indicating temporal position in an ordinal reference system 
   *
   * This term has [1] label and comment, in the language [es].
   */
  nominalPosition: _NS("nominalPosition"),

  /**
   * Gives directionality to time. If a temporal entity T1 is after another temporal entity T2, then the beginning of T1 is after the end of T2.
   *
   * This term has [1] label and comment, in the language [es].
   */
  after: _NS("after"),

  /**
   * Gives directionality to time. If a temporal entity T1 is before another temporal entity T2, then the end of T1 is before the beginning of T2. Thus, "before" can be considered to be basic to instants and derived for intervals.
   *
   * This term has [1] label and comment, in the language [es].
   */
  before: _NS("before"),

  /**
   * Day of month - formulated as a text string with a pattern constraint to reproduce the same lexical form as gDay, except that values up to 99 are permitted, in order to support calendars with more than 31 days in a month. 
Note that the value-space is not defined, so a generic OWL2 processor cannot compute ordering relationships of values of this type.
   *
   * This term has [1] label and comment, in the language [es].
   */
  generalDay: _NS("generalDay"),

  /**
   * Month of year - formulated as a text string with a pattern constraint to reproduce the same lexical form as gMonth, except that values up to 20 are permitted, in order to support calendars with more than 12 months in the year. 
Note that the value-space is not defined, so a generic OWL2 processor cannot compute ordering relationships of values of this type.
   *
   * This term has [1] label and comment, in the language [es].
   */
  generalMonth: _NS("generalMonth"),

  /**
   * Year number - formulated as a text string with a pattern constraint to reproduce the same lexical form as gYear, but not restricted to values from the Gregorian calendar. 
Note that the value-space is not defined, so a generic OWL2 processor cannot compute ordering relationships of values of this type.
   *
   * This term has [1] label and comment, in the language [es].
   */
  generalYear: _NS("generalYear"),

  /**
   * Beginning of a temporal entity
   *
   * This term has [1] label and comment, in the language [es].
   */
  hasBeginning: _NS("hasBeginning"),

  /**
   * Supports the association of a temporal entity (instant or interval) to any thing
   *
   * This term has [1] label and comment, in the language [es].
   */
  hasTime: _NS("hasTime"),

  /**
   * Value of DateTimeInterval expressed as a structured value. The beginning and end of the interval coincide with the limits of the shortest element in the description.
   *
   * This term has [1] label and comment, in the language [es].
   */
  hasDateTimeDescription: _NS("hasDateTimeDescription"),

  /**
   * Duration of a temporal entity, expressed as a scaled value or nominal value
   *
   * This term has [1] label and comment, in the language [es].
   */
  hasDuration: _NS("hasDuration"),

  /**
   * Duration of a temporal entity.
   *
   * This term has [1] label and comment, in the language [es].
   */
  hasTemporalDuration: _NS("hasTemporalDuration"),

  /**
   * Duration of a temporal entity, expressed using a structured description
   *
   * This term has [1] label and comment, in the language [es].
   */
  hasDurationDescription: _NS("hasDurationDescription"),

  /**
   * End of a temporal entity.
   *
   * This term has [1] label and comment, in the language [es].
   */
  hasEnd: _NS("hasEnd"),

  /**
   * Extent of a temporal entity, expressed using xsd:duration
   *
   * This term has [1] label and comment, in the language [es].
   */
  hasXSDDuration: _NS("hasXSDDuration"),

  /**
   * Position of an instant, expressed using a structured description
   *
   * This term has [1] label and comment, in the language [es].
   */
  inDateTime: _NS("inDateTime"),

  /**
   * Position of a time instant
   *
   * This term has [1] label and comment, in the language [es].
   */
  inTemporalPosition: _NS("inTemporalPosition"),

  /**
   * Position of an instant, expressed as a temporal coordinate or nominal value
   *
   * This term has [1] label and comment, in the language [es].
   */
  inTimePosition: _NS("inTimePosition"),

  /**
   * Position of an instant, expressed using xsd:date
   *
   * This term has [1] label and comment, in the language [es].
   */
  inXSDDate: _NS("inXSDDate"),

  /**
   * Position of an instant, expressed using xsd:dateTime
   *
   * This term has [1] label and comment, in the language [es].
   */
  inXSDDateTime: _NS("inXSDDateTime"),

  /**
   * Position of an instant, expressed using xsd:dateTimeStamp
   *
   * This term has [1] label and comment, in the language [es].
   */
  inXSDDateTimeStamp: _NS("inXSDDateTimeStamp"),

  /**
   * Position of an instant, expressed using xsd:gYear
   *
   * This term has [1] label and comment, in the language [es].
   */
  inXSDgYear: _NS("inXSDgYear"),

  /**
   * Position of an instant, expressed using xsd:gYearMonth
   *
   * This term has [1] label and comment, in the language [es].
   */
  inXSDgYearMonth: _NS("inXSDgYearMonth"),

  /**
   * An instant that falls inside the interval. It is not intended to include beginnings and ends of intervals.
   *
   * This term has [1] label and comment, in the language [es].
   */
  inside: _NS("inside"),

  /**
   * If a proper interval T1 is intervalAfter another proper interval T2, then the beginning of T1 is after the end of T2.
   *
   * This term provides non-English descriptions, but a mismatch between labels and comments, with [1] label in the language [es], but [0] comments.
   */
  intervalAfter: _NS("intervalAfter"),

  /**
   * If a proper interval T1 is intervalDisjoint another proper interval T2, then the beginning of T1 is after the end of T2, or the end of T1 is before the beginning of T2, i.e. the intervals do not overlap in any way, but their ordering relationship is not known.
   *
   * This term has [1] label and comment, in the language [es].
   */
  intervalDisjoint: _NS("intervalDisjoint"),

  /**
   * If a proper interval T1 is intervalBefore another proper interval T2, then the end of T1 is before the beginning of T2.
   *
   * This term has [1] label and comment, in the language [es].
   */
  intervalBefore: _NS("intervalBefore"),

  /**
   * If a proper interval T1 is intervalContains another proper interval T2, then the beginning of T1 is before the beginning of T2, and the end of T1 is after the end of T2.
   *
   * This term has [1] label and comment, in the language [es].
   */
  intervalContains: _NS("intervalContains"),

  /**
   * If a proper interval T1 is intervalDuring another proper interval T2, then the beginning of T1 is after the beginning of T2, and the end of T1 is before the end of T2.
   *
   * This term has [1] label and comment, in the language [es].
   */
  intervalDuring: _NS("intervalDuring"),

  /**
   * If a proper interval T1 is intervalIn another proper interval T2, then the beginning of T1 is after the beginning of T2 or is coincident with the beginning of T2, and the end of T1 is before the end of T2, or is coincident with the end of T2, except that end of T1 may not be coincident with the end of T2 if the beginning of T1 is coincident with the beginning of T2.
   *
   * This term has [1] label and comment, in the language [es].
   */
  intervalIn: _NS("intervalIn"),

  /**
   * If a proper interval T1 is intervalEquals another proper interval T2, then the beginning of T1 is coincident with the beginning of T2, and the end of T1 is coincident with the end of T2.
   *
   * This term has [1] label and comment, in the language [es].
   */
  intervalEquals: _NS("intervalEquals"),

  /**
   * If a proper interval T1 is intervalFinishedBy another proper interval T2, then the beginning of T1 is before the beginning of T2, and the end of T1 is coincident with the end of T2.
   *
   * This term has [1] label and comment, in the language [es].
   */
  intervalFinishedBy: _NS("intervalFinishedBy"),

  /**
   * If a proper interval T1 is intervalFinishes another proper interval T2, then the beginning of T1 is after the beginning of T2, and the end of T1 is coincident with the end of T2.
   *
   * This term has [1] label and comment, in the language [es].
   */
  intervalFinishes: _NS("intervalFinishes"),

  /**
   * If a proper interval T1 is intervalMeets another proper interval T2, then the end of T1 is coincident with the beginning of T2.
   *
   * This term has [1] label and comment, in the language [es].
   */
  intervalMeets: _NS("intervalMeets"),

  /**
   * If a proper interval T1 is intervalMetBy another proper interval T2, then the beginning of T1 is coincident with the end of T2.
   *
   * This term has [1] label and comment, in the language [es].
   */
  intervalMetBy: _NS("intervalMetBy"),

  /**
   * If a proper interval T1 is intervalOverlappedBy another proper interval T2, then the beginning of T1 is after the beginning of T2, the beginning of T1 is before the end of T2, and the end of T1 is after the end of T2.
   *
   * This term has [1] label and comment, in the language [es].
   */
  intervalOverlappedBy: _NS("intervalOverlappedBy"),

  /**
   * If a proper interval T1 is intervalOverlaps another proper interval T2, then the beginning of T1 is before the beginning of T2, the end of T1 is after the beginning of T2, and the end of T1 is before the end of T2.
   *
   * This term has [1] label and comment, in the language [es].
   */
  intervalOverlaps: _NS("intervalOverlaps"),

  /**
   * If a proper interval T1 is intervalStarted another proper interval T2, then the beginning of T1 is coincident with the beginning of T2, and the end of T1 is after the end of T2.
   *
   * This term provides non-English descriptions, but a mismatch between labels and comments, with [0] labels, but [1] comment in the language [es].
   */
  intervalStartedBy: _NS("intervalStartedBy"),

  /**
   * If a proper interval T1 is intervalStarts another proper interval T2, then the beginning of T1 is coincident with the beginning of T2, and the end of T1 is before the end of T2.
   *
   * This term has [1] label and comment, in the language [es].
   */
  intervalStarts: _NS("intervalStarts"),

  /**
   * Value of DateTimeInterval expressed as a compact value.
   *
   * This term has [1] label and comment, in the language [es].
   */
  xsdDateTime: _NS("xsdDateTime"),
 }

export default TIME;
