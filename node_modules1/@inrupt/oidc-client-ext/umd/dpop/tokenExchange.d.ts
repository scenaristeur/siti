import { JSONWebKey } from "jose";
import { IClient, IIssuerConfig } from "../common/types";
export declare type TokenEndpointResponse = {
    accessToken: string;
    idToken: string;
    webId: string;
    refreshToken?: string;
    dpopJwk?: JSONWebKey;
    expiresIn?: number;
};
export declare type TokenEndpointDpopResponse = TokenEndpointResponse & {
    dpopJwk: JSONWebKey;
};
export declare type TokenEndpointInput = {
    grantType: string;
    redirectUrl: string;
    code: string;
    codeVerifier: string;
};
export declare function deriveWebIdFromIdToken(idToken: string): Promise<string>;
export declare function validateTokenEndpointResponse(tokenResponse: Record<string, unknown>, dpop: boolean): Record<string, unknown> & {
    access_token: string;
    id_token: string;
    expires_in?: number;
};
export declare function getTokens(issuer: IIssuerConfig, client: IClient, data: TokenEndpointInput, dpop: true): Promise<TokenEndpointDpopResponse>;
export declare function getTokens(issuer: IIssuerConfig, client: IClient, data: TokenEndpointInput, dpop: false): Promise<TokenEndpointResponse>;
export declare function getBearerToken(redirectUrl: string): Promise<TokenEndpointResponse>;
export declare function getDpopToken(issuer: IIssuerConfig, client: IClient, data: TokenEndpointInput): Promise<TokenEndpointDpopResponse>;
