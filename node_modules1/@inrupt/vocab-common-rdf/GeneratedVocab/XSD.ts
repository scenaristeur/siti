/**
 * MIT License
 * 
 * Copyright 2020 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the &quot;Software&quot;), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

/**
 * Generated by the artifact generator [@inrupt/lit-artifact-generator], version [0.13.4]
 * as part of artifact: [vocab-common-rdf], version: [0.7.4]
 * on 'Monday, April 5, 2021 9:51 PM'.
 *
 * Vocabulary built from vocab list file: [common-rdf/Common/Vocab-List-Common-Rdf.yml].
 *
 * A vocabulary for describing XML Schema datatypes.
 */

import { DataFactory } from 'rdf-data-factory';
import * as RdfTypes from 'rdf-js';

const rdfFactory: RdfTypes.DataFactory = new DataFactory();

function _NS(localName: string): RdfTypes.NamedNode {
  return rdfFactory.namedNode(`http://www.w3.org/2001/XMLSchema#${localName}`);
}

// Add 'any' type annotation in case this vocab includes 'NamedNode' instances,
// for example instances of Constant IRIs (TypeScript compiler will complain of
// "semantic error TS2742" otherwise).
/**
 * A vocabulary for describing XML Schema datatypes.
 */
const XSD: any = {
  PREFIX: "xsd",
  NAMESPACE: "http://www.w3.org/2001/XMLSchema#",
  PREFIX_AND_NAMESPACE: { "xsd": "http://www.w3.org/2001/XMLSchema#" },
  NS: _NS,

  // *******************
  // All the Properties.
  // *******************

  /**
   * .
   *
   * Defined by the vocabulary: http://www.w3.org/2001/XMLSchema#
   */
  changes: _NS("changes"),

  /**
   * .
   *
   * Defined by the vocabulary: http://www.w3.org/2001/XMLSchema#
   */
  string: _NS("string"),

  /**
   * .
   *
   * Defined by the vocabulary: http://www.w3.org/2001/XMLSchema#
   */
  boolean: _NS("boolean"),

  /**
   * .
   *
   * Defined by the vocabulary: http://www.w3.org/2001/XMLSchema#
   */
  float: _NS("float"),

  /**
   * .
   *
   * Defined by the vocabulary: http://www.w3.org/2001/XMLSchema#
   */
  double: _NS("double"),

  /**
   * .
   *
   * Defined by the vocabulary: http://www.w3.org/2001/XMLSchema#
   */
  decimal: _NS("decimal"),

  /**
   * .
   *
   * Defined by the vocabulary: http://www.w3.org/2001/XMLSchema#
   */
  dateTime: _NS("dateTime"),

  /**
   * .
   *
   * Defined by the vocabulary: http://www.w3.org/2001/XMLSchema#
   */
  duration: _NS("duration"),

  /**
   * .
   *
   * Defined by the vocabulary: http://www.w3.org/2001/XMLSchema#
   */
  hexBinary: _NS("hexBinary"),

  /**
   * .
   *
   * Defined by the vocabulary: http://www.w3.org/2001/XMLSchema#
   */
  base64Binary: _NS("base64Binary"),

  /**
   * .
   *
   * Defined by the vocabulary: http://www.w3.org/2001/XMLSchema#
   */
  anyURI: _NS("anyURI"),

  /**
   * .
   *
   * Defined by the vocabulary: http://www.w3.org/2001/XMLSchema#
   */
  ID: _NS("ID"),

  /**
   * .
   *
   * Defined by the vocabulary: http://www.w3.org/2001/XMLSchema#
   */
  IDREF: _NS("IDREF"),

  /**
   * .
   *
   * Defined by the vocabulary: http://www.w3.org/2001/XMLSchema#
   */
  ENTITY: _NS("ENTITY"),

  /**
   * .
   *
   * Defined by the vocabulary: http://www.w3.org/2001/XMLSchema#
   */
  NOTATION: _NS("NOTATION"),

  /**
   * .
   *
   * Defined by the vocabulary: http://www.w3.org/2001/XMLSchema#
   */
  normalizedString: _NS("normalizedString"),

  /**
   * .
   *
   * Defined by the vocabulary: http://www.w3.org/2001/XMLSchema#
   */
  token: _NS("token"),

  /**
   * .
   *
   * Defined by the vocabulary: http://www.w3.org/2001/XMLSchema#
   */
  language: _NS("language"),

  /**
   * .
   *
   * Defined by the vocabulary: http://www.w3.org/2001/XMLSchema#
   */
  IDREFS: _NS("IDREFS"),

  /**
   * .
   *
   * Defined by the vocabulary: http://www.w3.org/2001/XMLSchema#
   */
  ENTITIES: _NS("ENTITIES"),

  /**
   * .
   *
   * Defined by the vocabulary: http://www.w3.org/2001/XMLSchema#
   */
  NMTOKEN: _NS("NMTOKEN"),

  /**
   * .
   *
   * Defined by the vocabulary: http://www.w3.org/2001/XMLSchema#
   */
  NMTOKENS: _NS("NMTOKENS"),

  /**
   * .
   *
   * Defined by the vocabulary: http://www.w3.org/2001/XMLSchema#
   */
  Name: _NS("Name"),

  /**
   * .
   *
   * Defined by the vocabulary: http://www.w3.org/2001/XMLSchema#
   */
  QName: _NS("QName"),

  /**
   * .
   *
   * Defined by the vocabulary: http://www.w3.org/2001/XMLSchema#
   */
  NCName: _NS("NCName"),

  /**
   * .
   *
   * Defined by the vocabulary: http://www.w3.org/2001/XMLSchema#
   */
  integer: _NS("integer"),

  /**
   * .
   *
   * Defined by the vocabulary: http://www.w3.org/2001/XMLSchema#
   */
  nonNegativeInteger: _NS("nonNegativeInteger"),

  /**
   * .
   *
   * Defined by the vocabulary: http://www.w3.org/2001/XMLSchema#
   */
  positiveInteger: _NS("positiveInteger"),

  /**
   * .
   *
   * Defined by the vocabulary: http://www.w3.org/2001/XMLSchema#
   */
  nonPositiveInteger: _NS("nonPositiveInteger"),

  /**
   * .
   *
   * Defined by the vocabulary: http://www.w3.org/2001/XMLSchema#
   */
  negativeInteger: _NS("negativeInteger"),

  /**
   * .
   *
   * Defined by the vocabulary: http://www.w3.org/2001/XMLSchema#
   */
  byte: _NS("byte"),

  /**
   * .
   *
   * Defined by the vocabulary: http://www.w3.org/2001/XMLSchema#
   */
  int: _NS("int"),

  /**
   * .
   *
   * Defined by the vocabulary: http://www.w3.org/2001/XMLSchema#
   */
  long: _NS("long"),

  /**
   * .
   *
   * Defined by the vocabulary: http://www.w3.org/2001/XMLSchema#
   */
  short: _NS("short"),

  /**
   * .
   *
   * Defined by the vocabulary: http://www.w3.org/2001/XMLSchema#
   */
  unsignedByte: _NS("unsignedByte"),

  /**
   * .
   *
   * Defined by the vocabulary: http://www.w3.org/2001/XMLSchema#
   */
  unsignedInt: _NS("unsignedInt"),

  /**
   * .
   *
   * Defined by the vocabulary: http://www.w3.org/2001/XMLSchema#
   */
  unsignedLong: _NS("unsignedLong"),

  /**
   * .
   *
   * Defined by the vocabulary: http://www.w3.org/2001/XMLSchema#
   */
  unsignedShort: _NS("unsignedShort"),

  /**
   * .
   *
   * Defined by the vocabulary: http://www.w3.org/2001/XMLSchema#
   */
  date: _NS("date"),

  /**
   * .
   *
   * Defined by the vocabulary: http://www.w3.org/2001/XMLSchema#
   */
  time: _NS("time"),

  /**
   * .
   *
   * Defined by the vocabulary: http://www.w3.org/2001/XMLSchema#
   */
  gYearMonth: _NS("gYearMonth"),

  /**
   * .
   *
   * Defined by the vocabulary: http://www.w3.org/2001/XMLSchema#
   */
  gYear: _NS("gYear"),

  /**
   * .
   *
   * Defined by the vocabulary: http://www.w3.org/2001/XMLSchema#
   */
  gMonthDay: _NS("gMonthDay"),

  /**
   * .
   *
   * Defined by the vocabulary: http://www.w3.org/2001/XMLSchema#
   */
  gDay: _NS("gDay"),

  /**
   * .
   *
   * Defined by the vocabulary: http://www.w3.org/2001/XMLSchema#
   */
  gMonth: _NS("gMonth"),
 }

export default XSD;
