{"remainingRequest":"/home/smag/dev/siti/node_modules/thread-loader/dist/cjs.js!/home/smag/dev/siti/node_modules/babel-loader/lib/index.js!/home/smag/dev/siti/node_modules/eslint-loader/index.js??ref--13-0!/home/smag/dev/siti/src/store/modules/viki.js","dependencies":[{"path":"/home/smag/dev/siti/src/store/modules/viki.js","mtime":1622991850480},{"path":"/home/smag/dev/siti/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/smag/dev/siti/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/smag/dev/siti/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/home/smag/dev/siti/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly9pbXBvcnQgVnVlIGZyb20gJ3Z1ZSc7CnZhciBzdGF0ZSA9IGZ1bmN0aW9uIHN0YXRlKCkgewogIHJldHVybiB7CiAgICBmaWxlOiB7fQogIH07Cn07Cgp2YXIgYWN0aW9ucyA9IHsvLyB1cGxvYWRMb2NhbFRvUG9kKGNvbnRleHQsZmlsZSl7CiAgLy8gICB0cnl7CiAgLy8gICAgIGNvbnNvbGUubG9nKGZpbGUpCiAgLy8gICAgIFZ1ZS5wcm90b3R5cGUuJHVwbG9hZExvY2FsVG9Qb2QoZmlsZSkKICAvLyAgICAgLy8gbGV0IGdyYXBoID0gSlNPTi5wYXJzZShmaWxlLmNvbnRlbnQpCiAgLy8gICAgIC8vIGdyYXBoLnBhdGggPSBmaWxlLnBhdGgKICAvLyAgICAgLy8gY29udGV4dC5jb21taXQoJ2FkZFRvTmV0d29yaycsIGdyYXBoKQogIC8vICAgfWNhdGNoKGUpewogIC8vICAgICBjb25zb2xlLmxvZyhmaWxlLCAiLT4iLCBlKQogIC8vICAgICBhbGVydChlKyIgaW4gIitmaWxlLnBhdGgpCiAgLy8gICB9CiAgLy8gfQp9Owp2YXIgbXV0YXRpb25zID0gewogIHNldEZpbGU6IGZ1bmN0aW9uIHNldEZpbGUoc3RhdGUsIGYpIHsKICAgIHN0YXRlLmZpbGUgPSBmOwogIH0gLy8gc2V0UG9kKHN0YXRlLHApewogIC8vICAgc3RhdGUucG9kID0gcAogIC8vIH0sCgp9OwpleHBvcnQgZGVmYXVsdCB7CiAgbmFtZXNwYWNlZDogdHJ1ZSwKICBzdGF0ZTogc3RhdGUsCiAgYWN0aW9uczogYWN0aW9ucywKICBtdXRhdGlvbnM6IG11dGF0aW9ucwp9Ow=="},{"version":3,"sources":["/home/smag/dev/siti/src/store/modules/viki.js"],"names":["state","file","actions","mutations","setFile","f","namespaced"],"mappings":"AAAA;AAEA,IAAMA,KAAK,GAAG,SAARA,KAAQ;AAAA,SAAO;AACnBC,IAAAA,IAAI,EAAE;AADa,GAAP;AAAA,CAAd;;AAIA,IAAMC,OAAO,GAAG,CACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAZc,CAAhB;AAeA,IAAMC,SAAS,GAAG;AAChBC,EAAAA,OADgB,mBACRJ,KADQ,EACDK,CADC,EACC;AACfL,IAAAA,KAAK,CAACC,IAAN,GAAaI,CAAb;AACD,GAHe,CAIhB;AACA;AACA;;AANgB,CAAlB;AAUA,eAAe;AACbC,EAAAA,UAAU,EAAE,IADC;AAEbN,EAAAA,KAAK,EAALA,KAFa;AAGbE,EAAAA,OAAO,EAAPA,OAHa;AAIbC,EAAAA,SAAS,EAATA;AAJa,CAAf","sourcesContent":["//import Vue from 'vue';\n\nconst state = () => ({\n  file: {}\n})\n\nconst actions = {\n  // uploadLocalToPod(context,file){\n  //   try{\n  //     console.log(file)\n  //     Vue.prototype.$uploadLocalToPod(file)\n  //     // let graph = JSON.parse(file.content)\n  //     // graph.path = file.path\n  //     // context.commit('addToNetwork', graph)\n  //   }catch(e){\n  //     console.log(file, \"->\", e)\n  //     alert(e+\" in \"+file.path)\n  //   }\n  // }\n}\n\nconst mutations = {\n  setFile(state, f){\n    state.file = f\n  },\n  // setPod(state,p){\n  //   state.pod = p\n  // },\n\n}\n\nexport default {\n  namespaced: true,\n  state,\n  actions,\n  mutations\n}\n"]}]}