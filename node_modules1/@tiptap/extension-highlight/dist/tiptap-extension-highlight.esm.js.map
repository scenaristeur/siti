{"version":3,"file":"tiptap-extension-highlight.esm.js","sources":["../src/highlight.ts"],"sourcesContent":["import {\n  Command,\n  Mark,\n  markInputRule,\n  markPasteRule,\n  mergeAttributes,\n} from '@tiptap/core'\n\nexport interface HighlightOptions {\n  multicolor: boolean,\n  HTMLAttributes: Record<string, any>,\n}\n\ndeclare module '@tiptap/core' {\n  interface Commands {\n    highlight: {\n      /**\n       * Set a highlight mark\n       */\n      setHighlight: (attributes?: { color: string }) => Command,\n      /**\n       * Toggle a highlight mark\n       */\n      toggleHighlight: (attributes?: { color: string }) => Command,\n      /**\n       * Unset a highlight mark\n       */\n      unsetHighlight: () => Command,\n    }\n  }\n}\n\nexport const inputRegex = /(?:^|\\s)((?:==)((?:[^~]+))(?:==))$/gm\nexport const pasteRegex = /(?:^|\\s)((?:==)((?:[^~]+))(?:==))/gm\n\nexport const Highlight = Mark.create<HighlightOptions>({\n  name: 'highlight',\n\n  defaultOptions: {\n    multicolor: false,\n    HTMLAttributes: {},\n  },\n\n  addAttributes() {\n    if (!this.options.multicolor) {\n      return {}\n    }\n\n    return {\n      color: {\n        default: null,\n        parseHTML: element => {\n          return {\n            color: element.getAttribute('data-color') || element.style.backgroundColor,\n          }\n        },\n        renderHTML: attributes => {\n          if (!attributes.color) {\n            return {}\n          }\n\n          return {\n            'data-color': attributes.color,\n            style: `background-color: ${attributes.color}`,\n          }\n        },\n      },\n    }\n  },\n\n  parseHTML() {\n    return [\n      {\n        tag: 'mark',\n      },\n    ]\n  },\n\n  renderHTML({ HTMLAttributes }) {\n    return ['mark', mergeAttributes(this.options.HTMLAttributes, HTMLAttributes), 0]\n  },\n\n  addCommands() {\n    return {\n      setHighlight: attributes => ({ commands }) => {\n        return commands.setMark('highlight', attributes)\n      },\n      toggleHighlight: attributes => ({ commands }) => {\n        return commands.toggleMark('highlight', attributes)\n      },\n      unsetHighlight: () => ({ commands }) => {\n        return commands.unsetMark('highlight')\n      },\n    }\n  },\n\n  addKeyboardShortcuts() {\n    return {\n      'Mod-Shift-h': () => this.editor.commands.toggleHighlight(),\n    }\n  },\n\n  addInputRules() {\n    return [\n      markInputRule(inputRegex, this.type),\n    ]\n  },\n\n  addPasteRules() {\n    return [\n      markPasteRule(inputRegex, this.type),\n    ]\n  },\n})\n"],"names":[],"mappings":";;MAgCa,UAAU,GAAG,uCAAsC;MACnD,UAAU,GAAG,sCAAqC;MAElD,SAAS,GAAG,IAAI,CAAC,MAAM,CAAmB;IACrD,IAAI,EAAE,WAAW;IAEjB,cAAc,EAAE;QACd,UAAU,EAAE,KAAK;QACjB,cAAc,EAAE,EAAE;KACnB;IAED,aAAa;QACX,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,UAAU,EAAE;YAC5B,OAAO,EAAE,CAAA;SACV;QAED,OAAO;YACL,KAAK,EAAE;gBACL,OAAO,EAAE,IAAI;gBACb,SAAS,EAAE,OAAO;oBAChB,OAAO;wBACL,KAAK,EAAE,OAAO,CAAC,YAAY,CAAC,YAAY,CAAC,IAAI,OAAO,CAAC,KAAK,CAAC,eAAe;qBAC3E,CAAA;iBACF;gBACD,UAAU,EAAE,UAAU;oBACpB,IAAI,CAAC,UAAU,CAAC,KAAK,EAAE;wBACrB,OAAO,EAAE,CAAA;qBACV;oBAED,OAAO;wBACL,YAAY,EAAE,UAAU,CAAC,KAAK;wBAC9B,KAAK,EAAE,qBAAqB,UAAU,CAAC,KAAK,EAAE;qBAC/C,CAAA;iBACF;aACF;SACF,CAAA;KACF;IAED,SAAS;QACP,OAAO;YACL;gBACE,GAAG,EAAE,MAAM;aACZ;SACF,CAAA;KACF;IAED,UAAU,CAAC,EAAE,cAAc,EAAE;QAC3B,OAAO,CAAC,MAAM,EAAE,eAAe,CAAC,IAAI,CAAC,OAAO,CAAC,cAAc,EAAE,cAAc,CAAC,EAAE,CAAC,CAAC,CAAA;KACjF;IAED,WAAW;QACT,OAAO;YACL,YAAY,EAAE,UAAU,IAAI,CAAC,EAAE,QAAQ,EAAE;gBACvC,OAAO,QAAQ,CAAC,OAAO,CAAC,WAAW,EAAE,UAAU,CAAC,CAAA;aACjD;YACD,eAAe,EAAE,UAAU,IAAI,CAAC,EAAE,QAAQ,EAAE;gBAC1C,OAAO,QAAQ,CAAC,UAAU,CAAC,WAAW,EAAE,UAAU,CAAC,CAAA;aACpD;YACD,cAAc,EAAE,MAAM,CAAC,EAAE,QAAQ,EAAE;gBACjC,OAAO,QAAQ,CAAC,SAAS,CAAC,WAAW,CAAC,CAAA;aACvC;SACF,CAAA;KACF;IAED,oBAAoB;QAClB,OAAO;YACL,aAAa,EAAE,MAAM,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,eAAe,EAAE;SAC5D,CAAA;KACF;IAED,aAAa;QACX,OAAO;YACL,aAAa,CAAC,UAAU,EAAE,IAAI,CAAC,IAAI,CAAC;SACrC,CAAA;KACF;IAED,aAAa;QACX,OAAO;YACL,aAAa,CAAC,UAAU,EAAE,IAAI,CAAC,IAAI,CAAC;SACrC,CAAA;KACF;CACF;;;;;"}