/**
 * MIT License
 * 
 * Copyright 2020 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the &quot;Software&quot;), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

/**
 * Generated by the artifact generator [@inrupt/lit-artifact-generator], version [0.13.4]
 * as part of artifact: [vocab-common-rdf], version: [0.7.4]
 * on 'Monday, April 5, 2021 9:51 PM'.
 *
 * Vocabulary built from vocab list file: [common-rdf/Common/Vocab-List-Common-Rdf.yml].
 *
 * Extended Activity Streams 2.0 Vocabulary
 */

import { DataFactory } from 'rdf-data-factory';
import * as RdfTypes from 'rdf-js';

const rdfFactory: RdfTypes.DataFactory = new DataFactory();

function _NS(localName: string): RdfTypes.NamedNode {
  return rdfFactory.namedNode(`https://www.w3.org/ns/activitystreams#${localName}`);
}

// Add 'any' type annotation in case this vocab includes 'NamedNode' instances,
// for example instances of Constant IRIs (TypeScript compiler will complain of
// "semantic error TS2742" otherwise).
/**
 * Extended Activity Streams 2.0 Vocabulary
 */
const AS: any = {
  PREFIX: "as",
  NAMESPACE: "https://www.w3.org/ns/activitystreams#",
  PREFIX_AND_NAMESPACE: { "as": "https://www.w3.org/ns/activitystreams#" },
  NS: _NS,

  // *****************
  // All the Classes.
  // *****************

  /**
   * An Object representing some form of Action that has been taken
   */
  Activity: _NS("Activity"),

  /**
   * Object
   */
  Object: _NS("Object"),

  /**
   * Represents a qualified reference to another resource. Patterned after the RFC5988 Web Linking Model
   */
  Link: _NS("Link"),

  /**
   * An ordered or unordered collection of Objects or Links
   */
  Collection: _NS("Collection"),

  /**
   * A subset of items from a Collection
   */
  CollectionPage: _NS("CollectionPage"),

  /**
   * An Image file
   */
  Image: _NS("Image"),

  /**
   * A rdf:List variant for Objects and Links
   */
  OrderedItems: _NS("OrderedItems"),

  /**
   * Represents a Social Graph relationship between two Individuals (indicated by the 'a' and 'b' properties)
   */
  Relationship: _NS("Relationship"),

  /**
   * A question of any sort.
   */
  Question: _NS("Question"),

  /**
   * A Profile Document
   */
  Profile: _NS("Profile"),

  /**
   * A placeholder for a deleted object
   */
  Tombstone: _NS("Tombstone"),

  /**
   * A physical or logical location
   */
  Place: _NS("Place"),

  /**
   * An ordered subset of items from an OrderedCollection
   */
  OrderedCollectionPage: _NS("OrderedCollectionPage"),

  /**
   * Actor accepts the Object
   */
  Accept: _NS("Accept"),

  /**
   * Block
   */
  Block: _NS("Block"),

  /**
   * Actor is ignoring the Object
   */
  Ignore: _NS("Ignore"),

  /**
   * An Activity that has no direct object
   */
  IntransitiveActivity: _NS("IntransitiveActivity"),

  /**
   * To Add an Object or Link to Something
   */
  Add: _NS("Add"),

  /**
   * Actor announces the object to the target
   */
  Announce: _NS("Announce"),

  /**
   * Represents a software application of any sort
   */
  Application: _NS("Application"),

  /**
   * To Arrive Somewhere (can be used, for instance, to indicate that a particular entity is currently located somewhere, e.g. a "check-in")
   */
  Arrive: _NS("Arrive"),

  /**
   * A written work. Typically several paragraphs long. For example, a blog post or a news article.
   */
  Article: _NS("Article"),

  /**
   * An audio file
   */
  Audio: _NS("Audio"),

  /**
   * Represents a digital document/file of any sort
   */
  Document: _NS("Document"),

  /**
   * A variation of Collection in which items are strictly ordered
   */
  OrderedCollection: _NS("OrderedCollection"),

  /**
   * To Create Something
   */
  Create: _NS("Create"),

  /**
   * To Delete Something
   */
  Delete: _NS("Delete"),

  /**
   * The actor dislikes the object
   */
  Dislike: _NS("Dislike"),

  /**
   * An Event of any kind
   */
  Event: _NS("Event"),

  /**
   * To flag something (e.g. flag as inappropriate, flag as spam, etc)
   */
  Flag: _NS("Flag"),

  /**
   * To Express Interest in Something
   */
  Follow: _NS("Follow"),

  /**
   * A Group of any kind.
   */
  Group: _NS("Group"),

  /**
   * To invite someone or something to something
   */
  Invite: _NS("Invite"),

  /**
   * To Offer something to someone or something
   */
  Offer: _NS("Offer"),

  /**
   * To Join Something
   */
  Join: _NS("Join"),

  /**
   * To Leave Something
   */
  Leave: _NS("Leave"),

  /**
   * To Like Something
   */
  Like: _NS("Like"),

  /**
   * The actor viewed the object
   */
  View: _NS("View"),

  /**
   * The actor listened to the object
   */
  Listen: _NS("Listen"),

  /**
   * The actor read the object
   */
  Read: _NS("Read"),

  /**
   * The actor is moving the object. The target specifies where the object is moving to. The origin specifies where the object is moving from.
   */
  Move: _NS("Move"),

  /**
   * The actor is traveling to the target. The origin specifies where the actor is traveling from.
   */
  Travel: _NS("Travel"),

  /**
   * A specialized Link that represents an @mention
   */
  Mention: _NS("Mention"),

  /**
   * A Short note, typically less than a single paragraph. A "tweet" is an example, or a "status update"
   */
  Note: _NS("Note"),

  /**
   * A Web Page
   */
  Page: _NS("Page"),

  /**
   * A Person
   */
  Person: _NS("Person"),

  /**
   * An Organization
   */
  Organization: _NS("Organization"),

  /**
   * Actor rejects the Object
   */
  Reject: _NS("Reject"),

  /**
   * To Remove Something
   */
  Remove: _NS("Remove"),

  /**
   * A service provided by some entity
   */
  Service: _NS("Service"),

  /**
   * Actor tentatively accepts the Object
   */
  TentativeAccept: _NS("TentativeAccept"),

  /**
   * Actor tentatively rejects the object
   */
  TentativeReject: _NS("TentativeReject"),

  /**
   * To Undo Something. This would typically be used to indicate that a previous Activity has been undone.
   */
  Undo: _NS("Undo"),

  /**
   * To Update/Modify Something
   */
  Update: _NS("Update"),

  /**
   * A Video document of any kind.
   */
  Video: _NS("Video"),


  // *******************
  // All the Properties.
  // *******************

  /**
   * Subproperty of as:attributedTo that identifies the primary actor
   */
  actor: _NS("actor"),

  /**
   * Identifies an entity to which an object is attributed
   */
  attributedTo: _NS("attributedTo"),

  /**
   * attachment
   */
  attachment: _NS("attachment"),

  /**
   * attachments
   */
  attachments: _NS("attachments"),

  /**
   * Identifies the author of an object. Deprecated. Use as:attributedTo instead
   */
  author: _NS("author"),

  /**
   * bcc
   */
  bcc: _NS("bcc"),

  /**
   * bto
   */
  bto: _NS("bto"),

  /**
   * cc
   */
  cc: _NS("cc"),

  /**
   * Specifies the context within which an object exists or an activity was performed
   */
  context: _NS("context"),

  /**
   * current
   */
  current: _NS("current"),

  /**
   * first
   */
  first: _NS("first"),

  /**
   * generator
   */
  generator: _NS("generator"),

  /**
   * icon
   */
  icon: _NS("icon"),

  /**
   * image
   */
  image: _NS("image"),

  /**
   * inReplyTo
   */
  inReplyTo: _NS("inReplyTo"),

  /**
   * items
   */
  items: _NS("items"),

  /**
   * last
   */
  last: _NS("last"),

  /**
   * location
   */
  location: _NS("location"),

  /**
   * next
   */
  next: _NS("next"),

  /**
   * object
   */
  object: _NS("object"),

  /**
   * Describes a possible exclusive answer or option for a question.
   */
  oneOf: _NS("oneOf"),

  /**
   * Describes a possible inclusive answer or option for a question.
   */
  anyOf: _NS("anyOf"),

  /**
   * prev
   */
  prev: _NS("prev"),

  /**
   * preview
   */
  preview: _NS("preview"),

  /**
   * provider
   */
  provider: _NS("provider"),

  /**
   * replies
   */
  replies: _NS("replies"),

  /**
   * result
   */
  result: _NS("result"),

  /**
   * audience
   */
  audience: _NS("audience"),

  /**
   * partOf
   */
  partOf: _NS("partOf"),

  /**
   * tag
   */
  tag: _NS("tag"),

  /**
   * tags
   */
  tags: _NS("tags"),

  /**
   * target
   */
  target: _NS("target"),

  /**
   * For certain activities, specifies the entity from which the action is directed.
   */
  origin: _NS("origin"),

  /**
   * Indentifies an object used (or to be used) to complete an activity
   */
  instrument: _NS("instrument"),

  /**
   * to
   */
  to: _NS("to"),

  /**
   * Specifies a link to a specific representation of the Object
   */
  url: _NS("url"),

  /**
   * On a Relationship object, identifies the subject. e.g. when saying "John is connected to Sally", 'subject' refers to 'John'
   */
  subject: _NS("subject"),

  /**
   * On a Relationship object, describes the type of relationship
   */
  relationship: _NS("relationship"),

  /**
   * On a Profile object, describes the object described by the profile
   */
  describes: _NS("describes"),

  /**
   * On a Tombstone object, describes the former type of the deleted object
   */
  formerType: _NS("formerType"),

  /**
   * Specifies the accuracy around the point established by the longitude and latitude
   */
  accuracy: _NS("accuracy"),

  /**
   * The altitude of a place
   */
  altitude: _NS("altitude"),

  /**
   * The content of the object.
   */
  content: _NS("content"),

  /**
   * name
   */
  name: _NS("name"),

  /**
   * downstreamDuplicates
   */
  downstreamDuplicates: _NS("downstreamDuplicates"),

  /**
   * The duration of the object
   */
  duration: _NS("duration"),

  /**
   * The ending time of the object
   */
  endTime: _NS("endTime"),

  /**
   * The display height expressed as device independent pixels
   */
  height: _NS("height"),

  /**
   * The target URI of the Link
   */
  href: _NS("href"),

  /**
   * A hint about the language of the referenced resource
   */
  hreflang: _NS("hreflang"),

  /**
   * id
   */
  id: _NS("id"),

  /**
   * The latitude
   */
  latitude: _NS("latitude"),

  /**
   * The longitude
   */
  longitude: _NS("longitude"),

  /**
   * The MIME Media Type
   */
  mediaType: _NS("mediaType"),

  /**
   * objectType
   */
  objectType: _NS("objectType"),

  /**
   * Specifies the date and time the object was published
   */
  published: _NS("published"),

  /**
   * Specifies a radius around the point established by the longitude and latitude
   */
  radius: _NS("radius"),

  /**
   * A numeric rating (>= 0.0, <= 5.0) for the object
   */
  rating: _NS("rating"),

  /**
   * The RFC 5988 or HTML5 Link Relation associated with the Link
   */
  rel: _NS("rel"),

  /**
   * In a strictly ordered logical collection, specifies the index position of the first item in the items list
   */
  startIndex: _NS("startIndex"),

  /**
   * The starting time of the object
   */
  startTime: _NS("startTime"),

  /**
   * A short summary of the object
   */
  summary: _NS("summary"),

  /**
   * The total number of items in a logical collection
   */
  totalItems: _NS("totalItems"),

  /**
   * Identifies the unit of measurement used by the radius, altitude and accuracy properties. The value can be expressed either as one of a set of predefined units or as a well-known common URI that identifies units.
   */
  units: _NS("units"),

  /**
   * Specifies when the object was last updated
   */
  updated: _NS("updated"),

  /**
   * upstreamDuplicates
   */
  upstreamDuplicates: _NS("upstreamDuplicates"),

  /**
   * verb
   */
  verb: _NS("verb"),

  /**
   * Specifies the preferred display width of the content, expressed in terms of device independent pixels.
   */
  width: _NS("width"),

  /**
   * Specifies the date and time the object was deleted
   */
  deleted: _NS("deleted"),
 }

export default AS;
