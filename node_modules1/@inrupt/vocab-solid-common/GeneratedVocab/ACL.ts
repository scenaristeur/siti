/**
 * MIT License
 * 
 * Copyright 2020 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the &quot;Software&quot;), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

/**
  Generated by the artifact generator [@inrupt/lit-artifact-generator], version [0.13.4]
  as part of artifact: [vocab-solid-common], version: [0.7.4]
  on 'Monday, April 5, 2021 9:51 PM'.

  Vocabulary built from vocab list file: [solid-rdf/Common/Vocab-List-Solid-Common.yml].

  [Generator provided] - Web Access Control Vocabulary
 */

import { VocabTerm, getLocalStore } from "@inrupt/solid-common-vocab";

import { DataFactory } from 'rdf-data-factory';
import * as RDF from 'rdf-js';

const rdfFactory: RDF.DataFactory = new DataFactory();

function _NS(localName: string): RDF.NamedNode {
  return rdfFactory.namedNode(`http://www.w3.org/ns/auth/acl#${localName}`);
}

// Add 'any' type annotation in case this vocab includes 'NamedNode' instances,
// for example instances of Constant IRIs (TypeScript compiler will complain of
// "semantic error TS2742" otherwise).
/**
 * [Generator provided] - Web Access Control Vocabulary
 */
const ACL: any = {
  PREFIX: "acl",
  NAMESPACE: "http://www.w3.org/ns/auth/acl#",
  PREFIX_AND_NAMESPACE: { "acl": "http://www.w3.org/ns/auth/acl#" },
  NS: _NS,

  // *****************
  // All the Classes.
  // *****************

  /**
   * Any kind of access to a resource. Don't use this, use R W and RW
   */
  Access: new VocabTerm(
    _NS("Access"),
    rdfFactory,
    getLocalStore(),
    false
  )
    .addCommentNoLanguage(`Any kind of access to a resource. Don't use this, use R W and RW`),

  /**
   * Append accesses are specific write access which only add information, and do not remove information.
    For text files, for example, append access allows bytes to be added onto the end of the file.
    For RDF graphs, Append access allows adds triples to the graph but does not remove any.
    Append access is useful for dropbox functionality.
    Dropbox can be used for link notification, which the information added is a notification
    that a some link has been made elsewhere relevant to the given resource.
    
   */
  Append: new VocabTerm(
    _NS("Append"),
    rdfFactory,
    getLocalStore(),
    false
  )
    .addLabel(`append`, "en")
    .addCommentNoLanguage(`Append accesses are specific write access which only add information, and do not remove information.
    For text files, for example, append access allows bytes to be added onto the end of the file.
    For RDF graphs, Append access allows adds triples to the graph but does not remove any.
    Append access is useful for dropbox functionality.
    Dropbox can be used for link notification, which the information added is a notification
    that a some link has been made elsewhere relevant to the given resource.
    `),

  /**
   * write
   */
  Write: new VocabTerm(
    _NS("Write"),
    rdfFactory,
    getLocalStore(),
    false
  )
    .addLabel(`write`, "en"),

  /**
   * A class of agents who have been authenticated.
In other words, anyone can access this resource, but not anonymously.
The social expectation is that the authentication process will provide an
identify and a name, or pseudonym.
(A new ID should not be minted for every access: the intent is that the user
is able to continue to use the ID for continues interactions with peers,
and for example to develop a reputation)

   */
  AuthenticatedAgent: new VocabTerm(
    _NS("AuthenticatedAgent"),
    rdfFactory,
    getLocalStore(),
    false
  )
    .addLabelNoLanguage(`Anyone authenticated`)
    .addCommentNoLanguage(`A class of agents who have been authenticated.
In other words, anyone can access this resource, but not anonymously.
The social expectation is that the authentication process will provide an
identify and a name, or pseudonym.
(A new ID should not be minted for every access: the intent is that the user
is able to continue to use the ID for continues interactions with peers,
and for example to develop a reputation)
`),

  /**
   * An element of access control,
    allowing agent to agents access of some kind to resources or classes of resources
   */
  Authorization: new VocabTerm(
    _NS("Authorization"),
    rdfFactory,
    getLocalStore(),
    false
  )
    .addLabelNoLanguage(`authorization`)
    .addCommentNoLanguage(`An element of access control,
    allowing agent to agents access of some kind to resources or classes of resources`),

  /**
   * Allows read/write access to the ACL for the resource(s)
   */
  Control: new VocabTerm(
    _NS("Control"),
    rdfFactory,
    getLocalStore(),
    false
  )
    .addLabel(`control`, "en")
    .addCommentNoLanguage(`Allows read/write access to the ACL for the resource(s)`),

  /**
   * An Origin is basically a web site
        (Note WITHOUT the trailing slash after the domain name and port in its URI)
        and is the basis for controlling access to data by web apps
        in the Same Origin Model of web security.
        All scripts from the same origin are given the same right.
   *
   * See also:
   *  - https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Origin
   */
  Origin: new VocabTerm(
    _NS("Origin"),
    rdfFactory,
    getLocalStore(),
    false
  )
    .addSeeAlso(_NS("https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Origin"))
    .addLabelNoLanguage(`Origin`)
    .addCommentNoLanguage(`An Origin is basically a web site
        (Note WITHOUT the trailing slash after the domain name and port in its URI)
        and is the basis for controlling access to data by web apps
        in the Same Origin Model of web security.
        All scripts from the same origin are given the same right.`),

  /**
   * The class of read operations
   */
  Read: new VocabTerm(
    _NS("Read"),
    rdfFactory,
    getLocalStore(),
    false
  )
    .addLabel(`read`, "en")
    .addCommentNoLanguage(`The class of read operations`),


  // *******************
  // All the Properties.
  // *******************

  /**
   * The Access Control file for this information resource.
        This may of course be a virtual resource implemented by the access control system.
        Note also HTTP's header  Link:  foo.meta ;rel=meta can be used for this.
   */
  accessControl: new VocabTerm(
    _NS("accessControl"),
    rdfFactory,
    getLocalStore(),
    false
  )
    .addLabelNoLanguage(`access control`)
    .addCommentNoLanguage(`The Access Control file for this information resource.
        This may of course be a virtual resource implemented by the access control system.
        Note also HTTP's header  Link:  foo.meta ;rel=meta can be used for this.`),

  /**
   * The information resource to which access is being granted.
   */
  accessTo: new VocabTerm(
    _NS("accessTo"),
    rdfFactory,
    getLocalStore(),
    false
  )
    .addLabelNoLanguage(`to`)
    .addCommentNoLanguage(`The information resource to which access is being granted.`),

  /**
   * A class of information resources to which access is being granted.
   */
  accessToClass: new VocabTerm(
    _NS("accessToClass"),
    rdfFactory,
    getLocalStore(),
    false
  )
    .addLabelNoLanguage(`to all in`)
    .addCommentNoLanguage(`A class of information resources to which access is being granted.`),

  /**
   * A person or social entity to being given the right
   */
  agent: new VocabTerm(
    _NS("agent"),
    rdfFactory,
    getLocalStore(),
    false
  )
    .addLabelNoLanguage(`agent`)
    .addCommentNoLanguage(`A person or social entity to being given the right`),

  /**
   * A class of persons or social entities to being given the right
   */
  agentClass: new VocabTerm(
    _NS("agentClass"),
    rdfFactory,
    getLocalStore(),
    false
  )
    .addLabelNoLanguage(`agent class`)
    .addCommentNoLanguage(`A class of persons or social entities to being given the right`),

  /**
   * A group of persons or social entities to being given the right.
          The right is given to any entity which is a vcard:member of the group,
          as defined by the document received when the Group is dereferenced.
   */
  agentGroup: new VocabTerm(
    _NS("agentGroup"),
    rdfFactory,
    getLocalStore(),
    false
  )
    .addLabelNoLanguage(`agent group`)
    .addCommentNoLanguage(`A group of persons or social entities to being given the right.
          The right is given to any entity which is a vcard:member of the group,
          as defined by the document received when the Group is dereferenced.`),

  /**
   * If a resource has no ACL file (it is 404),
        then access to the resource if given by the ACL of the immediately
        containing directory, or failing that (404) the ACL of the recursively next
        containing directory which has an ACL file.
        Within that ACL file,
        any Authentication which has that directory as its acl:default applies to the
        resource. (The highest directory must have an ACL file.)

   */
  default: new VocabTerm(
    _NS("default"),
    rdfFactory,
    getLocalStore(),
    false
  )
    .addLabelNoLanguage(`default access for things in this`)
    .addCommentNoLanguage(`If a resource has no ACL file (it is 404),
        then access to the resource if given by the ACL of the immediately
        containing directory, or failing that (404) the ACL of the recursively next
        containing directory which has an ACL file.
        Within that ACL file,
        any Authentication which has that directory as its acl:default applies to the
        resource. (The highest directory must have an ACL file.)
`),

  /**
   * THIS IS OBSOLETE AS OF 2017-08-01.   See 'default'.
        Was: A directory for which this authorization is used for new files in the directory.
   */
  defaultForNew: new VocabTerm(
    _NS("defaultForNew"),
    rdfFactory,
    getLocalStore(),
    false
  )
    .addLabelNoLanguage(`default access for new things in the object`)
    .addCommentNoLanguage(`THIS IS OBSOLETE AS OF 2017-08-01.   See 'default'.
        Was: A directory for which this authorization is used for new files in the directory.`),

  /**
   * Delegates a person or another agent to act on behalf of the agent.
    For example, Alice delegates Bob to act on behalf of Alice for ACL purposes.
   */
  delegates: new VocabTerm(
    _NS("delegates"),
    rdfFactory,
    getLocalStore(),
    false
  )
    .addLabel(`delegates`, "en")
    .addCommentNoLanguage(`Delegates a person or another agent to act on behalf of the agent.
    For example, Alice delegates Bob to act on behalf of Alice for ACL purposes.`),

  /**
   * A mode of access such as read or write.
   */
  mode: new VocabTerm(
    _NS("mode"),
    rdfFactory,
    getLocalStore(),
    false
  )
    .addLabelNoLanguage(`access mode`)
    .addCommentNoLanguage(`A mode of access such as read or write.`),

  /**
   * A web application, identified by its Origin, such as
        <https://scripts.example.com>, being given the right.
        When a user of the web application at a certain origin accesses the server,
        then the browser sets the Origin: header to warn that a possibly untrusted webapp
        is being used.
        Then, BOTH the user AND the origin must have the required access.
   *
   * See also:
   *  - https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Origin
   */
  origin: new VocabTerm(
    _NS("origin"),
    rdfFactory,
    getLocalStore(),
    false
  )
    .addSeeAlso(_NS("https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Origin"))
    .addLabelNoLanguage(`origin`)
    .addCommentNoLanguage(`A web application, identified by its Origin, such as
        <https://scripts.example.com>, being given the right.
        When a user of the web application at a certain origin accesses the server,
        then the browser sets the Origin: header to warn that a possibly untrusted webapp
        is being used.
        Then, BOTH the user AND the origin must have the required access.`),

  /**
   * The person or other agent which owns this.
    For example, the owner of a file in a filesystem.
    There is a sense of right to control.   Typically defaults to the agent who craeted
    something but can be changed.
   */
  owner: new VocabTerm(
    _NS("owner"),
    rdfFactory,
    getLocalStore(),
    false
  )
    .addLabel(`owner`, "en")
    .addCommentNoLanguage(`The person or other agent which owns this.
    For example, the owner of a file in a filesystem.
    There is a sense of right to control.   Typically defaults to the agent who craeted
    something but can be changed.`),
 };

export default ACL;
