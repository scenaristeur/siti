/**
 * MIT License
 * 
 * Copyright 2020 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the &quot;Software&quot;), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

/**
 * Generated by the artifact generator [@inrupt/lit-artifact-generator], version [0.13.4]
 * as part of artifact: [vocab-common-rdf], version: [0.7.4]
 * on 'Monday, April 5, 2021 9:51 PM'.
 *
 * Vocabulary built from vocab list file: [common-rdf/Common/Vocab-List-Common-Rdf.yml].
 *
 * [Generator provided] - Security vocabulary
 */

import { DataFactory } from 'rdf-data-factory';
import * as RdfTypes from 'rdf-js';

const rdfFactory: RdfTypes.DataFactory = new DataFactory();

function _NS(localName: string): RdfTypes.NamedNode {
  return rdfFactory.namedNode(`https://w3id.org/security#${localName}`);
}

// Add 'any' type annotation in case this vocab includes 'NamedNode' instances,
// for example instances of Constant IRIs (TypeScript compiler will complain of
// "semantic error TS2742" otherwise).
/**
 * [Generator provided] - Security vocabulary
 */
const SEC: any = {
  PREFIX: "sec",
  NAMESPACE: "https://w3id.org/security#",
  PREFIX_AND_NAMESPACE: { "sec": "https://w3id.org/security#" },
  NS: _NS,

  // *****************
  // All the Classes.
  // *****************

  /**
   *
   */
  EcdsaSecp256k1Signature2019: _NS("EcdsaSecp256k1Signature2019"),

  /**
   *
   */
  EcdsaSecp256k1VerificationKey2019: _NS("EcdsaSecp256k1VerificationKey2019"),

  /**
   *
   */
  RsaSignature2018: _NS("RsaSignature2018"),

  /**
   *
   */
  RsaVerificationKey2018: _NS("RsaVerificationKey2018"),

  /**
   *
   */
  SchnorrSecp256k1Signature2019: _NS("SchnorrSecp256k1Signature2019"),

  /**
   *
   */
  SchnorrSecp256k1VerificationKey2019: _NS("SchnorrSecp256k1VerificationKey2019"),

  /**
   *
   */
  ServiceEndpointProxyService: _NS("ServiceEndpointProxyService"),

  /**
   *
   */
  Digest: _NS("Digest"),

  /**
   *
   */
  EncryptedMessage: _NS("EncryptedMessage"),

  /**
   *
   */
  Signature: _NS("Signature"),

  /**
   *
   */
  LinkedDataSignature2015: _NS("LinkedDataSignature2015"),

  /**
   *
   */
  Ed25519VerificationKey2018: _NS("Ed25519VerificationKey2018"),

  /**
   *
   */
  BbsBlsSignature2020: _NS("BbsBlsSignature2020"),

  /**
   *
   */
  BbsBlsSignatureProof2020: _NS("BbsBlsSignatureProof2020"),

  /**
   *
   */
  Bls12381G1Key2020: _NS("Bls12381G1Key2020"),

  /**
   *
   */
  Bls12381G2Key2020: _NS("Bls12381G2Key2020"),

  /**
   *
   */
  Key: _NS("Key"),


  // *******************
  // All the Properties.
  // *******************

  /**
   *
   */
  cipherAlgorithm: _NS("cipherAlgorithm"),

  /**
   *
   */
  cipherData: _NS("cipherData"),

  /**
   *
   */
  digestAlgorithm: _NS("digestAlgorithm"),

  /**
   *
   */
  digestValue: _NS("digestValue"),

  /**
   *
   */
  cipherKey: _NS("cipherKey"),

  /**
   *
   */
  blockchainAccountId: _NS("blockchainAccountId"),

  /**
   *
   */
  ethereumAddress: _NS("ethereumAddress"),

  /**
   *
   */
  expires: _NS("expires"),

  /**
   *
   */
  initializationVector: _NS("initializationVector"),

  /**
   *
   */
  nonce: _NS("nonce"),

  /**
   *
   */
  canonicalizationAlgorithm: _NS("canonicalizationAlgorithm"),

  /**
   *
   */
  owner: _NS("owner"),

  /**
   *
   */
  password: _NS("password"),

  /**
   *
   */
  privateKeyPem: _NS("privateKeyPem"),

  /**
   *
   */
  verificationMethod: _NS("verificationMethod"),

  /**
   *
   */
  publicKey: _NS("publicKey"),

  /**
   *
   */
  assertionMethod: _NS("assertionMethod"),

  /**
   *
   */
  authentication: _NS("authentication"),

  /**
   *
   */
  capabilityDelegation: _NS("capabilityDelegation"),

  /**
   *
   */
  capabilityInvocation: _NS("capabilityInvocation"),

  /**
   *
   */
  keyAgreement: _NS("keyAgreement"),

  /**
   *
   */
  publicKeyBase58: _NS("publicKeyBase58"),

  /**
   *
   */
  publicKeyJwk: _NS("publicKeyJwk"),

  /**
   *
   */
  publicKeyPem: _NS("publicKeyPem"),

  /**
   *
   */
  publicKeyHex: _NS("publicKeyHex"),

  /**
   *
   */
  publicKeyService: _NS("publicKeyService"),

  /**
   *
   */
  revoked: _NS("revoked"),

  /**
   *
   */
  proof: _NS("proof"),

  /**
   *
   */
  jws: _NS("jws"),

  /**
   *
   */
  proofPurpose: _NS("proofPurpose"),

  /**
   *
   */
  challenge: _NS("challenge"),

  /**
   *
   */
  domain: _NS("domain"),

  /**
   *
   */
  expiration: _NS("expiration"),

  /**
   *
   */
  proofValue: _NS("proofValue"),

  /**
   *
   */
  signature: _NS("signature"),

  /**
   *
   */
  signatureValue: _NS("signatureValue"),

  /**
   *
   */
  signatureAlgorithm: _NS("signatureAlgorithm"),

  /**
   *
   */
  service: _NS("service"),

  /**
   *
   */
  serviceEndpoint: _NS("serviceEndpoint"),

  /**
   *
   */
  allowedAction: _NS("allowedAction"),

  /**
   *
   */
  capability: _NS("capability"),

  /**
   *
   */
  capabilityAction: _NS("capabilityAction"),

  /**
   *
   */
  capabilityChain: _NS("capabilityChain"),

  /**
   *
   */
  caveat: _NS("caveat"),

  /**
   *
   */
  delegator: _NS("delegator"),

  /**
   *
   */
  invocationTarget: _NS("invocationTarget"),

  /**
   *
   */
  invoker: _NS("invoker"),
 }

export default SEC;
