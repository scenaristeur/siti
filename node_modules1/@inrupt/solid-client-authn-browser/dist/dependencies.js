"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getClientAuthenticationWithDependencies = void 0;
require("reflect-metadata");
const tsyringe_1 = require("tsyringe");
const solid_client_authn_core_1 = require("@inrupt/solid-client-authn-core");
const StorageUtility_1 = __importDefault(require("./storage/StorageUtility"));
const ClientAuthentication_1 = __importDefault(require("./ClientAuthentication"));
const OidcLoginHandler_1 = __importDefault(require("./login/oidc/OidcLoginHandler"));
const AggregateOidcHandler_1 = __importDefault(require("./login/oidc/AggregateOidcHandler"));
const AuthorizationCodeOidcHandler_1 = __importDefault(require("./login/oidc/oidcHandlers/AuthorizationCodeOidcHandler"));
const AuthorizationCodeWithPkceOidcHandler_1 = __importDefault(require("./login/oidc/oidcHandlers/AuthorizationCodeWithPkceOidcHandler"));
const ClientCredentialsOidcHandler_1 = __importDefault(require("./login/oidc/oidcHandlers/ClientCredentialsOidcHandler"));
const PrimaryDeviceOidcHandler_1 = __importDefault(require("./login/oidc/oidcHandlers/PrimaryDeviceOidcHandler"));
const SecondaryDeviceOidcHandler_1 = __importDefault(require("./login/oidc/oidcHandlers/SecondaryDeviceOidcHandler"));
const RefreshTokenOidcHandler_1 = __importDefault(require("./login/oidc/oidcHandlers/RefreshTokenOidcHandler"));
const IssuerConfigFetcher_1 = __importDefault(require("./login/oidc/IssuerConfigFetcher"));
const FallbackRedirectHandler_1 = require("./login/oidc/redirectHandler/FallbackRedirectHandler");
const GeneralLogoutHandler_1 = __importDefault(require("./logout/GeneralLogoutHandler"));
const SessionInfoManager_1 = require("./sessionInfo/SessionInfoManager");
const AuthCodeRedirectHandler_1 = require("./login/oidc/redirectHandler/AuthCodeRedirectHandler");
const AggregateRedirectHandler_1 = __importDefault(require("./login/oidc/redirectHandler/AggregateRedirectHandler"));
const BrowserStorage_1 = __importDefault(require("./storage/BrowserStorage"));
const Redirector_1 = __importDefault(require("./login/oidc/Redirector"));
const PopUpLoginHandler_1 = __importDefault(require("./login/popUp/PopUpLoginHandler"));
const AggregatePostPopUpLoginHandler_1 = __importDefault(require("./login/popUp/AggregatePostPopUpLoginHandler"));
const ClientRegistrar_1 = __importDefault(require("./login/oidc/ClientRegistrar"));
const TokenRefresher_1 = __importDefault(require("./login/oidc/refresh/TokenRefresher"));
const TokenRequester_1 = __importDefault(require("./login/oidc/TokenRequester"));
const SessionManager_1 = require("./SessionManager");
const AggregateLoginHandler_1 = __importDefault(require("./login/AggregateLoginHandler"));
const container = tsyringe_1.container;
container.register("browser:storageUtility", {
    useClass: StorageUtility_1.default,
});
container.register("browser:sessionInfoManager", {
    useClass: SessionInfoManager_1.SessionInfoManager,
});
container.register("browser:sessionManager", {
    useClass: SessionManager_1.SessionManager,
});
container.register("browser:loginHandler", {
    useClass: AggregateLoginHandler_1.default,
});
container.register("browser:loginHandlers", {
    useClass: PopUpLoginHandler_1.default,
});
container.register("browser:loginHandlers", {
    useClass: OidcLoginHandler_1.default,
});
container.register("browser:postPopUpLoginHandler", {
    useClass: AggregatePostPopUpLoginHandler_1.default,
});
container.register("browser:postPopUpLoginHandlers", {
    useClass: OidcLoginHandler_1.default,
});
container.register("browser:oidcHandler", {
    useClass: AggregateOidcHandler_1.default,
});
container.register("browser:oidcHandlers", {
    useClass: RefreshTokenOidcHandler_1.default,
});
container.register("browser:oidcHandlers", {
    useClass: AuthorizationCodeOidcHandler_1.default,
});
container.register("browser:oidcHandlers", {
    useClass: AuthorizationCodeWithPkceOidcHandler_1.default,
});
container.register("browser:oidcHandlers", {
    useClass: ClientCredentialsOidcHandler_1.default,
});
container.register("browser:oidcHandlers", {
    useClass: PrimaryDeviceOidcHandler_1.default,
});
container.register("browser:oidcHandlers", {
    useClass: SecondaryDeviceOidcHandler_1.default,
});
container.register("browser:redirector", {
    useClass: Redirector_1.default,
});
container.register("browser:clientRegistrar", {
    useClass: ClientRegistrar_1.default,
});
container.register("browser:tokenRequester", {
    useClass: TokenRequester_1.default,
});
container.register("browser:redirectHandler", {
    useClass: AggregateRedirectHandler_1.default,
});
container.register("browser:redirectHandlers", {
    useClass: AuthCodeRedirectHandler_1.AuthCodeRedirectHandler,
});
container.register("browser:redirectHandlers", {
    useClass: FallbackRedirectHandler_1.FallbackRedirectHandler,
});
container.register("browser:issuerConfigFetcher", {
    useClass: IssuerConfigFetcher_1.default,
});
container.register("browser:tokenRefresher", {
    useClass: TokenRefresher_1.default,
});
container.register("browser:logoutHandler", {
    useClass: GeneralLogoutHandler_1.default,
});
function getClientAuthenticationWithDependencies(dependencies) {
    const secureStorage = dependencies.secureStorage || new solid_client_authn_core_1.InMemoryStorage();
    const insecureStorage = dependencies.insecureStorage || new BrowserStorage_1.default();
    const authenticatorContainer = container.createChildContainer();
    authenticatorContainer.register("browser:secureStorage", {
        useValue: secureStorage,
    });
    authenticatorContainer.register("browser:insecureStorage", {
        useValue: insecureStorage,
    });
    return authenticatorContainer.resolve(ClientAuthentication_1.default);
}
exports.getClientAuthenticationWithDependencies = getClientAuthenticationWithDependencies;
//# sourceMappingURL=dependencies.js.map