/**
 * MIT License
 * 
 * Copyright 2020 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the &quot;Software&quot;), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

/**
  Generated by the artifact generator [@inrupt/lit-artifact-generator], version [0.13.4]
  as part of artifact: [vocab-solid-common], version: [0.7.4]
  on 'Monday, April 5, 2021 9:51 PM'.

  Vocabulary built from vocab list file: [solid-rdf/Common/Vocab-List-Solid-Common.yml].

  The Solid Terms vocabulary defines terms referenced in Solid specifications.
 */

import { VocabTerm, getLocalStore } from "@inrupt/solid-common-vocab";

import { DataFactory } from 'rdf-data-factory';
import * as RDF from 'rdf-js';

const rdfFactory: RDF.DataFactory = new DataFactory();

function _NS(localName: string): RDF.NamedNode {
  return rdfFactory.namedNode(`http://www.w3.org/ns/solid/terms#${localName}`);
}

// Add 'any' type annotation in case this vocab includes 'NamedNode' instances,
// for example instances of Constant IRIs (TypeScript compiler will complain of
// "semantic error TS2742" otherwise).
/**
 * The Solid Terms vocabulary defines terms referenced in Solid specifications.
 */
const SOLID: any = {
  PREFIX: "solid",
  NAMESPACE: "http://www.w3.org/ns/solid/terms#",
  PREFIX_AND_NAMESPACE: { "solid": "http://www.w3.org/ns/solid/terms#" },
  NS: _NS,

  // *****************
  // All the Classes.
  // *****************

  /**
   * A Solid account.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/solid/terms#
   */
  Account: new VocabTerm(
    _NS("Account"),
    rdfFactory,
    getLocalStore(),
    false
  )
    .addIsDefinedBy(_NS("http://www.w3.org/ns/solid/terms#"))
    .addLabel(`Account`, "en")
    .addComment(`A Solid account.`, "en"),

  /**
   * A resource containing notifications.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/solid/terms#
   */
  Inbox: new VocabTerm(
    _NS("Inbox"),
    rdfFactory,
    getLocalStore(),
    false
  )
    .addIsDefinedBy(_NS("http://www.w3.org/ns/solid/terms#"))
    .addLabel(`Inbox`, "en")
    .addComment(`A resource containing notifications.`, "en"),

  /**
   * Listed Type Index is a registry of resources that are publicly discoverable by outside users and applications.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/solid/terms#
   */
  ListedDocument: new VocabTerm(
    _NS("ListedDocument"),
    rdfFactory,
    getLocalStore(),
    false
  )
    .addIsDefinedBy(_NS("http://www.w3.org/ns/solid/terms#"))
    .addLabel(`Listed Type Index`, "en")
    .addComment(`Listed Type Index is a registry of resources that are publicly discoverable by outside users and applications.`, "en"),

  /**
   * A notification resource.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/solid/terms#
   */
  Notification: new VocabTerm(
    _NS("Notification"),
    rdfFactory,
    getLocalStore(),
    false
  )
    .addIsDefinedBy(_NS("http://www.w3.org/ns/solid/terms#"))
    .addLabel(`Notification`, "en")
    .addComment(`A notification resource.`, "en"),

  /**
   * A patch expresses conditional modifications to a resource that has an RDF-based representation.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/solid/terms#
   */
  Patch: new VocabTerm(
    _NS("Patch"),
    rdfFactory,
    getLocalStore(),
    false
  )
    .addIsDefinedBy(_NS("http://www.w3.org/ns/solid/terms#"))
    .addLabel(`Patch`, "en")
    .addComment(`A patch expresses conditional modifications to a resource that has an RDF-based representation.`, "en"),

  /**
   * A resource containing time ordered items and sub-containers.  Sub-containers may be desirable in file based systems to split the timeline into logical components e.g. /yyyy-mm-dd/ as used in ISO 8061.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/solid/terms#
   */
  Timeline: new VocabTerm(
    _NS("Timeline"),
    rdfFactory,
    getLocalStore(),
    false
  )
    .addIsDefinedBy(_NS("http://www.w3.org/ns/solid/terms#"))
    .addLabel(`Timeline`, "en")
    .addComment(`A resource containing time ordered items and sub-containers.  Sub-containers may be desirable in file based systems to split the timeline into logical components e.g. /yyyy-mm-dd/ as used in ISO 8061.`, "en"),

  /**
   * A index of type registries for resources. Applications can register the RDF type they use and list them in the index resource.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/solid/terms#
   */
  TypeIndex: new VocabTerm(
    _NS("TypeIndex"),
    rdfFactory,
    getLocalStore(),
    false
  )
    .addIsDefinedBy(_NS("http://www.w3.org/ns/solid/terms#"))
    .addLabel(`Type index`, "en")
    .addComment(`A index of type registries for resources. Applications can register the RDF type they use and list them in the index resource.`, "en"),

  /**
   * The registered types that map a RDF classes/types to their locations using either `instance` or `instanceContainer` property.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/solid/terms#
   */
  TypeRegistration: new VocabTerm(
    _NS("TypeRegistration"),
    rdfFactory,
    getLocalStore(),
    false
  )
    .addIsDefinedBy(_NS("http://www.w3.org/ns/solid/terms#"))
    .addLabel(`Type Registration`, "en")
    .addComment(`The registered types that map a RDF classes/types to their locations using either \`instance\` or \`instanceContainer\` property.`, "en"),

  /**
   * Unlisted Type Index is a registry of resources that are private to the user and their apps, for types that are not publicly discoverable.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/solid/terms#
   */
  UnlistedDocument: new VocabTerm(
    _NS("UnlistedDocument"),
    rdfFactory,
    getLocalStore(),
    false
  )
    .addIsDefinedBy(_NS("http://www.w3.org/ns/solid/terms#"))
    .addLabel(`Unlisted Type Index`, "en")
    .addComment(`Unlisted Type Index is a registry of resources that are private to the user and their apps, for types that are not publicly discoverable.`, "en"),

  /**
   * The class of WebIDs - where a WebID is an HTTP URI which refers to an Agent (Person, Organization, Device, etc.).
   *
   * Defined by the vocabulary: https://w3id.org/inrupt/vocab/extension/solid-terms#
   */
  WebId: new VocabTerm(
    _NS("WebId"),
    rdfFactory,
    getLocalStore(),
    false
  )
    .addIsDefinedBy(_NS("https://w3id.org/inrupt/vocab/extension/solid-terms#"))
    .addLabel(`Class of WebID`, "en")
    .addComment(`The class of WebIDs - where a WebID is an HTTP URI which refers to an Agent (Person, Organization, Device, etc.).`, "en"),


  // *******************
  // All the Properties.
  // *******************

  /**
   * A solid account belonging to an Agent.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/solid/terms#
   */
  account: new VocabTerm(
    _NS("account"),
    rdfFactory,
    getLocalStore(),
    false
  )
    .addIsDefinedBy(_NS("http://www.w3.org/ns/solid/terms#"))
    .addLabel(`account`, "en")
    .addComment(`A solid account belonging to an Agent.`, "en"),

  /**
   * The triple patterns this patch removes from the document.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/solid/terms#
   */
  deletes: new VocabTerm(
    _NS("deletes"),
    rdfFactory,
    getLocalStore(),
    false
  )
    .addIsDefinedBy(_NS("http://www.w3.org/ns/solid/terms#"))
    .addLabel(`deletes`, "en")
    .addComment(`The triple patterns this patch removes from the document.`, "en"),

  /**
   * A class that is used to map an listed or unlisted type index.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/solid/terms#
   */
  forClass: new VocabTerm(
    _NS("forClass"),
    rdfFactory,
    getLocalStore(),
    false
  )
    .addIsDefinedBy(_NS("http://www.w3.org/ns/solid/terms#"))
    .addLabel(`registry class`, "en")
    .addComment(`A class that is used to map an listed or unlisted type index.`, "en"),

  /**
   * Deprecated pointer to a Linked Data Notifications inbox; please use http://www.w3.org/ns/ldp#inbox instead.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/solid/terms#
   */
  inbox: new VocabTerm(
    _NS("inbox"),
    rdfFactory,
    getLocalStore(),
    false
  )
    .addIsDefinedBy(_NS("http://www.w3.org/ns/solid/terms#"))
    .addLabel(`inbox (deprecated)`, "en")
    .addComment(`Deprecated pointer to a Linked Data Notifications inbox; please use http://www.w3.org/ns/ldp#inbox instead.`, "en"),

  /**
   * The triple patterns this patch adds to the document.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/solid/terms#
   */
  inserts: new VocabTerm(
    _NS("inserts"),
    rdfFactory,
    getLocalStore(),
    false
  )
    .addIsDefinedBy(_NS("http://www.w3.org/ns/solid/terms#"))
    .addLabel(`inserts`, "en")
    .addComment(`The triple patterns this patch adds to the document.`, "en"),

  /**
   * Maps a type to an individual resource, typically an index or a directory listing resource.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/solid/terms#
   */
  instance: new VocabTerm(
    _NS("instance"),
    rdfFactory,
    getLocalStore(),
    false
  )
    .addIsDefinedBy(_NS("http://www.w3.org/ns/solid/terms#"))
    .addLabel(`instance`, "en")
    .addComment(`Maps a type to an individual resource, typically an index or a directory listing resource.`, "en"),

  /**
   * Maps a type to a container which the client would have to list to get the instances of that type.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/solid/terms#
   */
  instanceContainer: new VocabTerm(
    _NS("instanceContainer"),
    rdfFactory,
    getLocalStore(),
    false
  )
    .addIsDefinedBy(_NS("http://www.w3.org/ns/solid/terms#"))
    .addLabel(`instance container`, "en")
    .addComment(`Maps a type to a container which the client would have to list to get the instances of that type.`, "en"),

  /**
   * The login URI of a given server.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/solid/terms#
   */
  loginEndpoint: new VocabTerm(
    _NS("loginEndpoint"),
    rdfFactory,
    getLocalStore(),
    false
  )
    .addIsDefinedBy(_NS("http://www.w3.org/ns/solid/terms#"))
    .addLabel(`loginEndpoint`, "en")
    .addComment(`The login URI of a given server.`, "en"),

  /**
   * The logout URI of a given server.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/solid/terms#
   */
  logoutEndpoint: new VocabTerm(
    _NS("logoutEndpoint"),
    rdfFactory,
    getLocalStore(),
    false
  )
    .addIsDefinedBy(_NS("http://www.w3.org/ns/solid/terms#"))
    .addLabel(`logoutEndpoint`, "en")
    .addComment(`The logout URI of a given server.`, "en"),

  /**
   * Notification resource for an inbox.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/solid/terms#
   */
  notification: new VocabTerm(
    _NS("notification"),
    rdfFactory,
    getLocalStore(),
    false
  )
    .addIsDefinedBy(_NS("http://www.w3.org/ns/solid/terms#"))
    .addLabel(`notification`, "en")
    .addComment(`Notification resource for an inbox.`, "en"),

  /**
   * The preferred OpenID Connect issuer URI for a given WebID.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/solid/terms#
   */
  oidcIssuer: new VocabTerm(
    _NS("oidcIssuer"),
    rdfFactory,
    getLocalStore(),
    false
  )
    .addIsDefinedBy(_NS("http://www.w3.org/ns/solid/terms#"))
    .addLabel(`OIDC issuer`, "en")
    .addComment(`The preferred OpenID Connect issuer URI for a given WebID.`, "en"),

  /**
   * The document to which this patch applies.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/solid/terms#
   */
  patches: new VocabTerm(
    _NS("patches"),
    rdfFactory,
    getLocalStore(),
    false
  )
    .addIsDefinedBy(_NS("http://www.w3.org/ns/solid/terms#"))
    .addLabel(`patches`, "en")
    .addComment(`The document to which this patch applies.`, "en"),

  /**
   * Points to an unlisted type index resource.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/solid/terms#
   */
  privateTypeIndex: new VocabTerm(
    _NS("privateTypeIndex"),
    rdfFactory,
    getLocalStore(),
    false
  )
    .addIsDefinedBy(_NS("http://www.w3.org/ns/solid/terms#"))
    .addLabel(`private type index`, "en")
    .addComment(`Points to an unlisted type index resource.`, "en"),

  /**
   * Points to a listed type index resource.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/solid/terms#
   */
  publicTypeIndex: new VocabTerm(
    _NS("publicTypeIndex"),
    rdfFactory,
    getLocalStore(),
    false
  )
    .addIsDefinedBy(_NS("http://www.w3.org/ns/solid/terms#"))
    .addLabel(`public type index`, "en")
    .addComment(`Points to a listed type index resource.`, "en"),

  /**
   * Points to a TypeIndex resource.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/solid/terms#
   */
  typeIndex: new VocabTerm(
    _NS("typeIndex"),
    rdfFactory,
    getLocalStore(),
    false
  )
    .addIsDefinedBy(_NS("http://www.w3.org/ns/solid/terms#"))
    .addLabel(`type index`, "en")
    .addComment(`Points to a TypeIndex resource.`, "en"),

  /**
   * Indicates if a message has been read or not. This property should have a boolean datatype.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/solid/terms#
   */
  read: new VocabTerm(
    _NS("read"),
    rdfFactory,
    getLocalStore(),
    false
  )
    .addIsDefinedBy(_NS("http://www.w3.org/ns/solid/terms#"))
    .addLabel(`read`, "en")
    .addComment(`Indicates if a message has been read or not. This property should have a boolean datatype.`, "en"),

  /**
   * The quota of non-volatile memory that is available for the account (in bytes)
   *
   * Defined by the vocabulary: http://www.w3.org/ns/solid/terms#
   */
  storageQuota: new VocabTerm(
    _NS("storageQuota"),
    rdfFactory,
    getLocalStore(),
    false
  )
    .addIsDefinedBy(_NS("http://www.w3.org/ns/solid/terms#"))
    .addLabel(`Non-volatile memory quota`, "en")
    .addComment(`The quota of non-volatile memory that is available for the account (in bytes)`, "en"),

  /**
   * The amount of non-volatile memory that the account have used (in bytes)
   *
   * Defined by the vocabulary: http://www.w3.org/ns/solid/terms#
   */
  storageUsage: new VocabTerm(
    _NS("storageUsage"),
    rdfFactory,
    getLocalStore(),
    false
  )
    .addIsDefinedBy(_NS("http://www.w3.org/ns/solid/terms#"))
    .addLabel(`Non-volatile memory usage`, "en")
    .addComment(`The amount of non-volatile memory that the account have used (in bytes)`, "en"),

  /**
   * Timeline for a given resource.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/solid/terms#
   */
  timeline: new VocabTerm(
    _NS("timeline"),
    rdfFactory,
    getLocalStore(),
    false
  )
    .addIsDefinedBy(_NS("http://www.w3.org/ns/solid/terms#"))
    .addLabel(`timeline`, "en")
    .addComment(`Timeline for a given resource.`, "en"),

  /**
   * The conditions the document and the inserted and deleted triple patterns need to satisfy in order for the patch to be applied.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/solid/terms#
   */
  where: new VocabTerm(
    _NS("where"),
    rdfFactory,
    getLocalStore(),
    false
  )
    .addIsDefinedBy(_NS("http://www.w3.org/ns/solid/terms#"))
    .addLabel(`where`, "en")
    .addComment(`The conditions the document and the inserted and deleted triple patterns need to satisfy in order for the patch to be applied.`, "en"),

  /**
   * A WebID is an HTTP URI which refers to an Agent (Person, Organization, Device, etc.).
   *
   * Defined by the vocabulary: https://w3id.org/inrupt/vocab/extension/solid-terms#
   */
  webId: new VocabTerm(
    _NS("webId"),
    rdfFactory,
    getLocalStore(),
    false
  )
    .addIsDefinedBy(_NS("https://w3id.org/inrupt/vocab/extension/solid-terms#"))
    .addLabel(`WebID`, "en")
    .addComment(`A WebID is an HTTP URI which refers to an Agent (Person, Organization, Device, etc.).`, "en"),

  /**
   * The WebID of a 'Pod Owner', the person, organisation or agent deemed to be the owner of a Solid Pod.
   *
   * Defined by the vocabulary: https://w3id.org/inrupt/vocab/extension/solid-terms#
   */
  podOwner: new VocabTerm(
    _NS("podOwner"),
    rdfFactory,
    getLocalStore(),
    false
  )
    .addIsDefinedBy(_NS("https://w3id.org/inrupt/vocab/extension/solid-terms#"))
    .addLabel(`Pod Owner`, "en")
    .addComment(`The WebID of a 'Pod Owner', the person, organisation or agent deemed to be the owner of a Solid Pod.`, "en"),
 };

export default SOLID;
