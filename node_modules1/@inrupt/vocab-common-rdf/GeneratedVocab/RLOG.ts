/**
 * MIT License
 * 
 * Copyright 2020 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the &quot;Software&quot;), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

/**
 * Generated by the artifact generator [@inrupt/lit-artifact-generator], version [0.13.4]
 * as part of artifact: [vocab-common-rdf], version: [0.7.4]
 * on 'Monday, April 5, 2021 9:51 PM'.
 *
 * Vocabulary built from vocab list file: [common-rdf/Common/Vocab-List-Common-Rdf.yml].
 *
 * Inrupt-created copy of RLOG, needed due to Server 500 errors resolving original uni-leipzig.org!
 */

import { DataFactory } from 'rdf-data-factory';
import * as RdfTypes from 'rdf-js';

const rdfFactory: RdfTypes.DataFactory = new DataFactory();

function _NS(localName: string): RdfTypes.NamedNode {
  return rdfFactory.namedNode(`http://persistence.uni-leipzig.org/nlp2rdf/ontologies/rlog#${localName}`);
}

// Add 'any' type annotation in case this vocab includes 'NamedNode' instances,
// for example instances of Constant IRIs (TypeScript compiler will complain of
// "semantic error TS2742" otherwise).
/**
 * Inrupt-created copy of RLOG, needed due to Server 500 errors resolving original uni-leipzig.org!
 */
const RLOG: any = {
  PREFIX: "rlog",
  NAMESPACE: "http://persistence.uni-leipzig.org/nlp2rdf/ontologies/rlog#",
  PREFIX_AND_NAMESPACE: { "rlog": "http://persistence.uni-leipzig.org/nlp2rdf/ontologies/rlog#" },
  NS: _NS,

  // *****************
  // All the Classes.
  // *****************

  /**
   * look here: http://logging.apache.org/log4j/1.2/apidocs/org/apache/log4j/Level.html 
   */
  Level: _NS("Level"),

  /**
   * An entry in a log.
   */
  Entry: _NS("Entry"),

  /**
   * A status code which can occur in an application. Instances of this class must put the name of the status as rdfs:label and describe it with rdfs:comment.
   */
  StatusCode: _NS("StatusCode"),


  // *******************
  // All the Properties.
  // *******************

  /**
   * The ALL has the lowest possible rank and is intended to turn on all logging.
   */
  ALL: _NS("ALL"),

  /**
   * Attention: the ids here can change, they are just used to define an order over the levels!
   */
  priority: _NS("priority"),

  /**
   * The DEBUG Level designates fine-grained informational events that are most useful to debug an application.
   */
  DEBUG: _NS("DEBUG"),

  /**
   * The ERROR level designates error events that might still allow the application to continue running.
   */
  ERROR: _NS("ERROR"),

  /**
   * The FATAL level designates very severe error events that will presumably lead the application to abort.
   */
  FATAL: _NS("FATAL"),

  /**
   * The INFO level designates informational messages that highlight the progress of the application at coarse-grained level.
   */
  INFO: _NS("INFO"),

  /**
   * The OFF has the highest possible rank and is intended to turn off logging.
   */
  OFF: _NS("OFF"),

  /**
   * The TRACE Level designates finer-grained informational events than the DEBUG.
   */
  TRACE: _NS("TRACE"),

  /**
   * The WARN level designates potentially harmful situations.
   */
  WARN: _NS("WARN"),

  /**
   * Outputs the fully qualified class name of the caller issuing the logging request.
   */
  className: _NS("className"),

  /**
   * The numerical value of the code, e.g. 200, 404 or 42.
   */
  codeId: _NS("codeId"),

  /**
   * Logging datetime (or just date)
   */
  date: _NS("date"),

  /**
   * Links a log message to a status code.
   */
  hasCode: _NS("hasCode"),

  /**
   * logLevel
   */
  level: _NS("level"),

  /**
   * Logging message
   */
  message: _NS("message"),

  /**
   * If we mix normal and log output, this can be used to refer to the resource in the RDF the error is connected to. 
   */
  resource: _NS("resource"),
 }

export default RLOG;
