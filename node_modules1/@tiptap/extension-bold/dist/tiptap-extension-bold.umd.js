(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@tiptap/core')) :
  typeof define === 'function' && define.amd ? define(['exports', '@tiptap/core'], factory) :
  (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global['@tiptap/extension-bold'] = {}, global.core));
}(this, (function (exports, core) { 'use strict';

  const starInputRegex = /(?:^|\s)((?:\*\*)((?:[^*]+))(?:\*\*))$/gm;
  const starPasteRegex = /(?:^|\s)((?:\*\*)((?:[^*]+))(?:\*\*))/gm;
  const underscoreInputRegex = /(?:^|\s)((?:__)((?:[^__]+))(?:__))$/gm;
  const underscorePasteRegex = /(?:^|\s)((?:__)((?:[^__]+))(?:__))/gm;
  const Bold = core.Mark.create({
      name: 'bold',
      defaultOptions: {
          HTMLAttributes: {},
      },
      parseHTML() {
          return [
              {
                  tag: 'strong',
              },
              {
                  tag: 'b',
                  getAttrs: node => node.style.fontWeight !== 'normal' && null,
              },
              {
                  style: 'font-weight',
                  getAttrs: value => /^(bold(er)?|[5-9]\d{2,})$/.test(value) && null,
              },
          ];
      },
      renderHTML({ HTMLAttributes }) {
          return ['strong', core.mergeAttributes(this.options.HTMLAttributes, HTMLAttributes), 0];
      },
      addCommands() {
          return {
              setBold: () => ({ commands }) => {
                  return commands.setMark('bold');
              },
              toggleBold: () => ({ commands }) => {
                  return commands.toggleMark('bold');
              },
              unsetBold: () => ({ commands }) => {
                  return commands.unsetMark('bold');
              },
          };
      },
      addKeyboardShortcuts() {
          return {
              'Mod-b': () => this.editor.commands.toggleBold(),
          };
      },
      addInputRules() {
          return [
              core.markInputRule(starInputRegex, this.type),
              core.markInputRule(underscoreInputRegex, this.type),
          ];
      },
      addPasteRules() {
          return [
              core.markPasteRule(starPasteRegex, this.type),
              core.markPasteRule(underscorePasteRegex, this.type),
          ];
      },
  });

  exports.Bold = Bold;
  exports.default = Bold;
  exports.starInputRegex = starInputRegex;
  exports.starPasteRegex = starPasteRegex;
  exports.underscoreInputRegex = underscoreInputRegex;
  exports.underscorePasteRegex = underscorePasteRegex;

  Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=tiptap-extension-bold.umd.js.map
