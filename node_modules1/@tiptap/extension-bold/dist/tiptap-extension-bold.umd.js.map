{"version":3,"file":"tiptap-extension-bold.umd.js","sources":["../src/bold.ts"],"sourcesContent":["import {\n  Command,\n  Mark,\n  markInputRule,\n  markPasteRule,\n  mergeAttributes,\n} from '@tiptap/core'\n\nexport interface BoldOptions {\n  HTMLAttributes: Record<string, any>,\n}\n\ndeclare module '@tiptap/core' {\n  interface Commands {\n    bold: {\n      /**\n       * Set a bold mark\n       */\n      setBold: () => Command,\n      /**\n       * Toggle a bold mark\n       */\n      toggleBold: () => Command,\n      /**\n       * Unset a bold mark\n       */\n      unsetBold: () => Command,\n    }\n  }\n}\n\nexport const starInputRegex = /(?:^|\\s)((?:\\*\\*)((?:[^*]+))(?:\\*\\*))$/gm\nexport const starPasteRegex = /(?:^|\\s)((?:\\*\\*)((?:[^*]+))(?:\\*\\*))/gm\nexport const underscoreInputRegex = /(?:^|\\s)((?:__)((?:[^__]+))(?:__))$/gm\nexport const underscorePasteRegex = /(?:^|\\s)((?:__)((?:[^__]+))(?:__))/gm\n\nexport const Bold = Mark.create<BoldOptions>({\n  name: 'bold',\n\n  defaultOptions: {\n    HTMLAttributes: {},\n  },\n\n  parseHTML() {\n    return [\n      {\n        tag: 'strong',\n      },\n      {\n        tag: 'b',\n        getAttrs: node => (node as HTMLElement).style.fontWeight !== 'normal' && null,\n      },\n      {\n        style: 'font-weight',\n        getAttrs: value => /^(bold(er)?|[5-9]\\d{2,})$/.test(value as string) && null,\n      },\n    ]\n  },\n\n  renderHTML({ HTMLAttributes }) {\n    return ['strong', mergeAttributes(this.options.HTMLAttributes, HTMLAttributes), 0]\n  },\n\n  addCommands() {\n    return {\n      setBold: () => ({ commands }) => {\n        return commands.setMark('bold')\n      },\n      toggleBold: () => ({ commands }) => {\n        return commands.toggleMark('bold')\n      },\n      unsetBold: () => ({ commands }) => {\n        return commands.unsetMark('bold')\n      },\n    }\n  },\n\n  addKeyboardShortcuts() {\n    return {\n      'Mod-b': () => this.editor.commands.toggleBold(),\n    }\n  },\n\n  addInputRules() {\n    return [\n      markInputRule(starInputRegex, this.type),\n      markInputRule(underscoreInputRegex, this.type),\n    ]\n  },\n\n  addPasteRules() {\n    return [\n      markPasteRule(starPasteRegex, this.type),\n      markPasteRule(underscorePasteRegex, this.type),\n    ]\n  },\n})\n"],"names":["Mark","mergeAttributes","markInputRule","markPasteRule"],"mappings":";;;;;;QA+Ba,cAAc,GAAG,2CAA0C;QAC3D,cAAc,GAAG,0CAAyC;QAC1D,oBAAoB,GAAG,wCAAuC;QAC9D,oBAAoB,GAAG,uCAAsC;QAE7D,IAAI,GAAGA,SAAI,CAAC,MAAM,CAAc;MAC3C,IAAI,EAAE,MAAM;MAEZ,cAAc,EAAE;UACd,cAAc,EAAE,EAAE;OACnB;MAED,SAAS;UACP,OAAO;cACL;kBACE,GAAG,EAAE,QAAQ;eACd;cACD;kBACE,GAAG,EAAE,GAAG;kBACR,QAAQ,EAAE,IAAI,IAAK,IAAoB,CAAC,KAAK,CAAC,UAAU,KAAK,QAAQ,IAAI,IAAI;eAC9E;cACD;kBACE,KAAK,EAAE,aAAa;kBACpB,QAAQ,EAAE,KAAK,IAAI,2BAA2B,CAAC,IAAI,CAAC,KAAe,CAAC,IAAI,IAAI;eAC7E;WACF,CAAA;OACF;MAED,UAAU,CAAC,EAAE,cAAc,EAAE;UAC3B,OAAO,CAAC,QAAQ,EAAEC,oBAAe,CAAC,IAAI,CAAC,OAAO,CAAC,cAAc,EAAE,cAAc,CAAC,EAAE,CAAC,CAAC,CAAA;OACnF;MAED,WAAW;UACT,OAAO;cACL,OAAO,EAAE,MAAM,CAAC,EAAE,QAAQ,EAAE;kBAC1B,OAAO,QAAQ,CAAC,OAAO,CAAC,MAAM,CAAC,CAAA;eAChC;cACD,UAAU,EAAE,MAAM,CAAC,EAAE,QAAQ,EAAE;kBAC7B,OAAO,QAAQ,CAAC,UAAU,CAAC,MAAM,CAAC,CAAA;eACnC;cACD,SAAS,EAAE,MAAM,CAAC,EAAE,QAAQ,EAAE;kBAC5B,OAAO,QAAQ,CAAC,SAAS,CAAC,MAAM,CAAC,CAAA;eAClC;WACF,CAAA;OACF;MAED,oBAAoB;UAClB,OAAO;cACL,OAAO,EAAE,MAAM,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,UAAU,EAAE;WACjD,CAAA;OACF;MAED,aAAa;UACX,OAAO;cACLC,kBAAa,CAAC,cAAc,EAAE,IAAI,CAAC,IAAI,CAAC;cACxCA,kBAAa,CAAC,oBAAoB,EAAE,IAAI,CAAC,IAAI,CAAC;WAC/C,CAAA;OACF;MAED,aAAa;UACX,OAAO;cACLC,kBAAa,CAAC,cAAc,EAAE,IAAI,CAAC,IAAI,CAAC;cACxCA,kBAAa,CAAC,oBAAoB,EAAE,IAAI,CAAC,IAAI,CAAC;WAC/C,CAAA;OACF;GACF;;;;;;;;;;;;;;;"}